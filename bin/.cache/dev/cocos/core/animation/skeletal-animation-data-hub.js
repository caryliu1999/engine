(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../math/index.js", "./target-path.js", "../global-exports.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../math/index.js"), require("./target-path.js"), require("../global-exports.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.targetPath, global.globalExports);
    global.skeletalAnimationDataHub = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _targetPath, _globalExports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SkelAnimDataHub = void 0;

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  /**
   * 骨骼动画数据转换中心。
   */
  var SkelAnimDataHub = /*#__PURE__*/function () {
    function SkelAnimDataHub() {
      _classCallCheck(this, SkelAnimDataHub);
    }

    _createClass(SkelAnimDataHub, null, [{
      key: "getOrExtract",
      value: function getOrExtract(clip) {
        var data = SkelAnimDataHub.pool.get(clip);

        if (!data || data.info.sample !== clip.sample) {
          // release outdated render data
          if (data) {
            _globalExports.legacyCC.director.root.dataPoolManager.releaseAnimationClip(clip);
          }

          data = convertToSkeletalCurves(clip);
          SkelAnimDataHub.pool.set(clip, data);
        }

        return data;
      }
    }, {
      key: "destroy",
      value: function destroy(clip) {
        SkelAnimDataHub.pool["delete"](clip);
      }
    }]);

    return SkelAnimDataHub;
  }();

  _exports.SkelAnimDataHub = SkelAnimDataHub;
  SkelAnimDataHub.pool = new Map();

  function convertToSkeletalCurves(clip) {
    var data = {};
    clip.curves.forEach(function (curve) {
      if (!curve.valueAdapter && (0, _targetPath.isCustomPath)(curve.modifiers[0], _targetPath.HierarchyPath) && (0, _targetPath.isPropertyPath)(curve.modifiers[1])) {
        var path = curve.modifiers[0].path;
        var cs = data[path];

        if (!cs) {
          cs = data[path] = {};
        }

        var property = curve.modifiers[1];
        cs[property] = {
          values: curve.data.values,
          keys: curve.data.keys
        }; // don't use curve.data directly
      }
    });
    var frames = Math.ceil(clip.sample * clip.duration) + 1; // lazy eval the conversion due to memory-heavy ops
    // many animation paths may not be actually in-use

    var _loop = function _loop() {
      var path = _Object$keys[_i];
      var props = data[path];

      if (!props) {
        return "continue";
      }

      Object.defineProperty(props, 'worldMatrix', {
        get: function get() {
          if (!props._worldMatrix) {
            var position = props.position,
                rotation = props.rotation,
                scale = props.scale; // fixed step pre-sample

            convertToUniformSample(clip, position, frames);
            convertToUniformSample(clip, rotation, frames);
            convertToUniformSample(clip, scale, frames); // transform to world space

            convertToWorldSpace(data, path, props);
          }

          return props._worldMatrix;
        }
      });
    };

    for (var _i = 0, _Object$keys = Object.keys(data); _i < _Object$keys.length; _i++) {
      var _ret = _loop();

      if (_ret === "continue") continue;
    }

    var info = {
      frames: frames,
      sample: clip.sample
    };
    return {
      info: info,
      data: data
    };
  }

  function convertToUniformSample(clip, curve, frames) {
    var keys = clip.keys[curve.keys];
    var values = [];

    if (!keys || keys.length === 1) {
      for (var i = 0; i < frames; i++) {
        values[i] = curve.values[0].clone(); // never forget to clone
      }
    } else {
      var isQuat = curve.values[0] instanceof _index.Quat;

      for (var _i2 = 0, idx = 0; _i2 < frames; _i2++) {
        var time = _i2 / clip.sample;

        while (keys[idx] <= time) {
          idx++;
        }

        if (idx > keys.length - 1) {
          idx = keys.length - 1;
          time = keys[idx];
        } else if (idx === 0) {
          idx = 1;
        }

        var from = curve.values[idx - 1].clone();
        var denom = keys[idx] - keys[idx - 1];
        var ratio = denom ? (0, _index.clamp01)((time - keys[idx - 1]) / denom) : 1;

        if (isQuat) {
          from.slerp(curve.values[idx], ratio);
        } else {
          from.lerp(curve.values[idx], ratio);
        }

        values[_i2] = from;
      }
    }

    curve.values = values;
  }

  function convertToWorldSpace(convertedProps, path, props) {
    var oPos = props.position.values;
    var oRot = props.rotation.values;
    var oScale = props.scale.values;
    var matrix = oPos.map(function () {
      return new _index.Mat4();
    });
    var idx = path.lastIndexOf('/');
    var pMatrix = null;

    if (idx > 0) {
      var name = path.substring(0, idx);
      var data = convertedProps[name];

      if (!data) {
        console.warn('no data for parent bone?');
        return;
      }

      pMatrix = data.worldMatrix.values;
    } // all props should have the same length now


    for (var i = 0; i < oPos.length; i++) {
      var oT = oPos[i];
      var oR = oRot[i];
      var oS = oScale[i];
      var m = matrix[i];

      _index.Mat4.fromRTS(m, oR, oT, oS);

      if (pMatrix) {
        _index.Mat4.multiply(m, pMatrix[i], m);
      }
    }

    Object.keys(props).forEach(function (k) {
      return delete props[k];
    });
    props._worldMatrix = {
      keys: 0,
      interpolate: false,
      values: matrix
    };
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,