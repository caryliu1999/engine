(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../gfx/define.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../gfx/define.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.define);
    global.assetEnum = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _define) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Filter = _exports.WrapMode = _exports.PixelFormat = void 0;

  /**
   * @category asset
   */
  // define a specified number for the pixel format which gfx do not have a standard definition.
  var CUSTOM_PIXEL_FORMAT = 1024;
  /**
   * @en
   * The texture pixel format, default value is RGBA8888,<br>
   * you should note that textures loaded by normal image files (png, jpg) can only support RGBA8888 format,<br>
   * other formats are supported by compressed file types or raw data.
   * @zh
   * 纹理像素格式，默认值为RGBA8888，<br>
   * 你应该注意到普通图像文件（png，jpg）加载的纹理只能支持RGBA8888格式，<br>
   * 压缩文件类型或原始数据支持其他格式。
   */

  var PixelFormat;
  /**
   * @en
   * The texture wrap mode.
   * @zh
   * 纹理环绕方式。
   */

  _exports.PixelFormat = PixelFormat;

  (function (PixelFormat) {
    PixelFormat[PixelFormat["RGB565"] = _define.GFXFormat.R5G6B5] = "RGB565";
    PixelFormat[PixelFormat["RGB5A1"] = _define.GFXFormat.RGB5A1] = "RGB5A1";
    PixelFormat[PixelFormat["RGBA4444"] = _define.GFXFormat.RGBA4] = "RGBA4444";
    PixelFormat[PixelFormat["RGB888"] = _define.GFXFormat.RGB8] = "RGB888";
    PixelFormat[PixelFormat["RGB32F"] = _define.GFXFormat.RGB32F] = "RGB32F";
    PixelFormat[PixelFormat["RGBA8888"] = _define.GFXFormat.RGBA8] = "RGBA8888";
    PixelFormat[PixelFormat["RGBA32F"] = _define.GFXFormat.RGBA32F] = "RGBA32F";
    PixelFormat[PixelFormat["A8"] = _define.GFXFormat.A8] = "A8";
    PixelFormat[PixelFormat["I8"] = _define.GFXFormat.L8] = "I8";
    PixelFormat[PixelFormat["AI8"] = _define.GFXFormat.LA8] = "AI8";
    PixelFormat[PixelFormat["RGB_PVRTC_2BPPV1"] = _define.GFXFormat.PVRTC_RGB2] = "RGB_PVRTC_2BPPV1";
    PixelFormat[PixelFormat["RGBA_PVRTC_2BPPV1"] = _define.GFXFormat.PVRTC_RGBA2] = "RGBA_PVRTC_2BPPV1";
    PixelFormat[PixelFormat["RGB_A_PVRTC_2BPPV1"] = CUSTOM_PIXEL_FORMAT++] = "RGB_A_PVRTC_2BPPV1";
    PixelFormat[PixelFormat["RGB_PVRTC_4BPPV1"] = _define.GFXFormat.PVRTC_RGB4] = "RGB_PVRTC_4BPPV1";
    PixelFormat[PixelFormat["RGBA_PVRTC_4BPPV1"] = _define.GFXFormat.PVRTC_RGBA4] = "RGBA_PVRTC_4BPPV1";
    PixelFormat[PixelFormat["RGB_A_PVRTC_4BPPV1"] = CUSTOM_PIXEL_FORMAT++] = "RGB_A_PVRTC_4BPPV1";
    PixelFormat[PixelFormat["RGB_ETC1"] = _define.GFXFormat.ETC_RGB8] = "RGB_ETC1";
    PixelFormat[PixelFormat["RGBA_ETC1"] = CUSTOM_PIXEL_FORMAT++] = "RGBA_ETC1";
    PixelFormat[PixelFormat["RGB_ETC2"] = _define.GFXFormat.ETC2_RGB8] = "RGB_ETC2";
    PixelFormat[PixelFormat["RGBA_ETC2"] = _define.GFXFormat.ETC2_RGBA8] = "RGBA_ETC2";
    PixelFormat[PixelFormat["RGBA_ASTC_4x4"] = _define.GFXFormat.ASTC_RGBA_4x4] = "RGBA_ASTC_4x4";
    PixelFormat[PixelFormat["RGBA_ASTC_5x4"] = _define.GFXFormat.ASTC_RGBA_5x4] = "RGBA_ASTC_5x4";
    PixelFormat[PixelFormat["RGBA_ASTC_5x5"] = _define.GFXFormat.ASTC_RGBA_5x5] = "RGBA_ASTC_5x5";
    PixelFormat[PixelFormat["RGBA_ASTC_6x5"] = _define.GFXFormat.ASTC_RGBA_6x5] = "RGBA_ASTC_6x5";
    PixelFormat[PixelFormat["RGBA_ASTC_6x6"] = _define.GFXFormat.ASTC_RGBA_6x6] = "RGBA_ASTC_6x6";
    PixelFormat[PixelFormat["RGBA_ASTC_8x5"] = _define.GFXFormat.ASTC_RGBA_8x5] = "RGBA_ASTC_8x5";
    PixelFormat[PixelFormat["RGBA_ASTC_8x6"] = _define.GFXFormat.ASTC_RGBA_8x6] = "RGBA_ASTC_8x6";
    PixelFormat[PixelFormat["RGBA_ASTC_8x8"] = _define.GFXFormat.ASTC_RGBA_8x8] = "RGBA_ASTC_8x8";
    PixelFormat[PixelFormat["RGBA_ASTC_10x5"] = _define.GFXFormat.ASTC_RGBA_10x5] = "RGBA_ASTC_10x5";
    PixelFormat[PixelFormat["RGBA_ASTC_10x6"] = _define.GFXFormat.ASTC_RGBA_10x6] = "RGBA_ASTC_10x6";
    PixelFormat[PixelFormat["RGBA_ASTC_10x8"] = _define.GFXFormat.ASTC_RGBA_10x8] = "RGBA_ASTC_10x8";
    PixelFormat[PixelFormat["RGBA_ASTC_10x10"] = _define.GFXFormat.ASTC_RGBA_10x10] = "RGBA_ASTC_10x10";
    PixelFormat[PixelFormat["RGBA_ASTC_12x10"] = _define.GFXFormat.ASTC_RGBA_12x10] = "RGBA_ASTC_12x10";
    PixelFormat[PixelFormat["RGBA_ASTC_12x12"] = _define.GFXFormat.ASTC_RGBA_12x12] = "RGBA_ASTC_12x12";
  })(PixelFormat || (_exports.PixelFormat = PixelFormat = {}));

  var WrapMode;
  /**
   * @en
   * The texture filter mode
   * @zh
   * 纹理过滤模式。
   */

  _exports.WrapMode = WrapMode;

  (function (WrapMode) {
    WrapMode[WrapMode["REPEAT"] = _define.GFXAddress.WRAP] = "REPEAT";
    WrapMode[WrapMode["CLAMP_TO_EDGE"] = _define.GFXAddress.CLAMP] = "CLAMP_TO_EDGE";
    WrapMode[WrapMode["MIRRORED_REPEAT"] = _define.GFXAddress.MIRROR] = "MIRRORED_REPEAT";
    WrapMode[WrapMode["CLAMP_TO_BORDER"] = _define.GFXAddress.BORDER] = "CLAMP_TO_BORDER";
  })(WrapMode || (_exports.WrapMode = WrapMode = {}));

  var Filter;
  _exports.Filter = Filter;

  (function (Filter) {
    Filter[Filter["NONE"] = _define.GFXFilter.NONE] = "NONE";
    Filter[Filter["LINEAR"] = _define.GFXFilter.LINEAR] = "LINEAR";
    Filter[Filter["NEAREST"] = _define.GFXFilter.POINT] = "NEAREST";
  })(Filter || (_exports.Filter = Filter = {}));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,