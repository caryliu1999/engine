(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../global-exports.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../global-exports.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.globalExports);
    global.affineTransform = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _globalExports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.AffineTransform = void 0;

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  /**
   * 二维仿射变换矩阵，描述了平移、缩放和缩放。
   */
  var AffineTransform = /*#__PURE__*/function () {
    _createClass(AffineTransform, null, [{
      key: "identity",

      /**
       * 创建单位二维仿射变换矩阵，它不进行任何变换。
       */
      value: function identity() {
        return new AffineTransform();
      }
      /**
       * 克隆指定的二维仿射变换矩阵。
       * @param affineTransform 指定的二维仿射变换矩阵。
       */

    }, {
      key: "clone",
      value: function clone(affineTransform) {
        return new AffineTransform(affineTransform.a, affineTransform.b, affineTransform.c, affineTransform.d, affineTransform.tx, affineTransform.ty);
      }
      /**
       * 将两个矩阵相乘的结果赋值给出口矩阵。
       * @param out 出口矩阵。
       * @param t1 左矩阵。
       * @param t2 右矩阵。
       */

    }, {
      key: "concat",
      value: function concat(out, t1, t2) {
        var a = t1.a;
        var b = t1.b;
        var c = t1.c;
        var d = t1.d;
        var tx = t1.tx;
        var ty = t1.ty;
        out.a = a * t2.a + b * t2.c;
        out.b = a * t2.b + b * t2.d;
        out.c = c * t2.a + d * t2.c;
        out.d = c * t2.b + d * t2.d;
        out.tx = tx * t2.a + ty * t2.c + t2.tx;
        out.ty = tx * t2.b + ty * t2.d + t2.ty;
      }
      /**
       * 将矩阵求逆的结果赋值给出口矩阵。
       * @param out 出口矩阵。
       * @param t 求逆的矩阵。
       */

    }, {
      key: "invert",
      value: function invert(out, t) {
        var determinant = 1 / (t.a * t.d - t.b * t.c);
        out.a = determinant * t.d;
        out.b = -determinant * t.b;
        out.c = -determinant * t.c;
        out.d = determinant * t.a;
        out.tx = determinant * (t.c * t.ty - t.d * t.tx);
        out.ty = determinant * (t.b * t.tx - t.a * t.ty);
      }
      /**
       * 将四维矩阵转换为二维仿射变换矩阵并赋值给出口矩阵。
       * @param out 出口矩阵。
       * @param mat 四维矩阵。
       */

    }, {
      key: "fromMat4",
      value: function fromMat4(out, mat) {
        out.a = mat.m00;
        out.b = mat.m01;
        out.c = mat.m04;
        out.d = mat.m05;
        out.tx = mat.m12;
        out.ty = mat.m13;
      }
      /**
       * 应用二维仿射变换矩阵到二维向量上，并将结果赋值给出口向量。
       * @param out 出口向量。
       * @param point 应用变换的向量。
       * @param t 二维仿射变换矩阵。
       */

    }, {
      key: "transformVec2",
      value: function transformVec2(out, point, transOrY, t) {
        var x;
        var y;

        if (t === undefined) {
          t = transOrY;
          x = point.x;
          y = point.y;
        } else {
          x = point;
          y = transOrY;
        }

        out.x = t.a * x + t.c * y + t.tx;
        out.y = t.b * x + t.d * y + t.ty;
      }
      /**
       * 应用二维仿射变换矩阵到二维尺寸上，并将结果赋值给出口尺寸。
       * @param out 出口尺寸。
       * @param size 应用变换的尺寸。
       * @param t 二维仿射变换矩阵。
       */

    }, {
      key: "transformSize",
      value: function transformSize(out, size, t) {
        out.width = t.a * size.width + t.c * size.height;
        out.height = t.b * size.width + t.d * size.height;
      }
      /**
       * 应用二维仿射变换矩阵到矩形上，并将结果赋值给出口矩形。
       * @param out 出口矩形。
       * @param rect 应用变换的矩形。
       * @param t 二维仿射变换矩阵。
       */

    }, {
      key: "transformRect",
      value: function transformRect(out, rect, t) {
        var or = rect.x + rect.width;
        var ot = rect.y + rect.height;
        var lbx = t.a * rect.x + t.c * rect.y + t.tx;
        var lby = t.b * rect.x + t.d * rect.y + t.ty;
        var rbx = t.a * or + t.c * rect.y + t.tx;
        var rby = t.b * or + t.d * rect.y + t.ty;
        var ltx = t.a * rect.x + t.c * ot + t.tx;
        var lty = t.b * rect.x + t.d * ot + t.ty;
        var rtx = t.a * or + t.c * ot + t.tx;
        var rty = t.b * or + t.d * ot + t.ty;
        var minX = Math.min(lbx, rbx, ltx, rtx);
        var maxX = Math.max(lbx, rbx, ltx, rtx);
        var minY = Math.min(lby, rby, lty, rty);
        var maxY = Math.max(lby, rby, lty, rty);
        out.x = minX;
        out.y = minY;
        out.width = maxX - minX;
        out.height = maxY - minY;
      }
      /**
       * 应用二维仿射变换矩阵到矩形上, 并转换为有向包围盒。
       * 这个函数不创建任何内存，你需要先创建包围盒的四个 Vector 对象用来存储结果，并作为前四个参数传入函数。
       */

    }, {
      key: "transformObb",
      value: function transformObb(out_bl, out_tl, out_tr, out_br, rect, anAffineTransform) {
        var tx = anAffineTransform.a * rect.x + anAffineTransform.c * rect.y + anAffineTransform.tx;
        var ty = anAffineTransform.b * rect.x + anAffineTransform.d * rect.y + anAffineTransform.ty;
        var xa = anAffineTransform.a * rect.width;
        var xb = anAffineTransform.b * rect.width;
        var yc = anAffineTransform.c * rect.height;
        var yd = anAffineTransform.d * rect.height;
        out_tl.x = tx;
        out_tl.y = ty;
        out_tr.x = xa + tx;
        out_tr.y = xb + ty;
        out_bl.x = yc + tx;
        out_bl.y = yd + ty;
        out_br.x = xa + yc + tx;
        out_br.y = xb + yd + ty;
      }
    }]);

    /**
     * 构造二维放射变换矩阵。
     * @param a a 元素。
     * @param b b 元素。
     * @param c c 元素。
     * @param d d 元素。
     * @param tx tx 元素。
     * @param ty ty 元素。
     */
    function AffineTransform() {
      var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
      var tx = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
      var ty = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;

      _classCallCheck(this, AffineTransform);

      this.a = a;
      this.b = b;
      this.c = c;
      this.d = d;
      this.tx = tx;
      this.ty = ty;
    }

    return AffineTransform;
  }();

  _exports.AffineTransform = AffineTransform;
  _globalExports.legacyCC.AffineTransform = AffineTransform;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImU6L2QwMDQ1MjUyMC9HaXRodWIvZW5naW5lL2NvY29zL2NvcmUvbWF0aC9hZmZpbmUtdHJhbnNmb3JtLnRzIl0sIm5hbWVzIjpbIkFmZmluZVRyYW5zZm9ybSIsImFmZmluZVRyYW5zZm9ybSIsImEiLCJiIiwiYyIsImQiLCJ0eCIsInR5Iiwib3V0IiwidDEiLCJ0MiIsInQiLCJkZXRlcm1pbmFudCIsIm1hdCIsIm0wMCIsIm0wMSIsIm0wNCIsIm0wNSIsIm0xMiIsIm0xMyIsInBvaW50IiwidHJhbnNPclkiLCJ4IiwieSIsInVuZGVmaW5lZCIsInNpemUiLCJ3aWR0aCIsImhlaWdodCIsInJlY3QiLCJvciIsIm90IiwibGJ4IiwibGJ5IiwicmJ4IiwicmJ5IiwibHR4IiwibHR5IiwicnR4IiwicnR5IiwibWluWCIsIk1hdGgiLCJtaW4iLCJtYXhYIiwibWF4IiwibWluWSIsIm1heFkiLCJvdXRfYmwiLCJvdXRfdGwiLCJvdXRfdHIiLCJvdXRfYnIiLCJhbkFmZmluZVRyYW5zZm9ybSIsInhhIiwieGIiLCJ5YyIsInlkIiwibGVnYWN5Q0MiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBcUNBOzs7TUFHYUEsZTs7OztBQUNUOzs7aUNBRzBCO0FBQ3RCLGVBQU8sSUFBSUEsZUFBSixFQUFQO0FBQ0g7QUFFRDs7Ozs7Ozs0QkFJcUJDLGUsRUFBa0M7QUFDbkQsZUFBTyxJQUFJRCxlQUFKLENBQ0hDLGVBQWUsQ0FBQ0MsQ0FEYixFQUNnQkQsZUFBZSxDQUFDRSxDQURoQyxFQUVIRixlQUFlLENBQUNHLENBRmIsRUFFZ0JILGVBQWUsQ0FBQ0ksQ0FGaEMsRUFHSEosZUFBZSxDQUFDSyxFQUhiLEVBR2lCTCxlQUFlLENBQUNNLEVBSGpDLENBQVA7QUFJSDtBQUVEOzs7Ozs7Ozs7NkJBTXNCQyxHLEVBQXNCQyxFLEVBQXFCQyxFLEVBQXFCO0FBQ2xGLFlBQU1SLENBQUMsR0FBR08sRUFBRSxDQUFDUCxDQUFiO0FBQ0EsWUFBTUMsQ0FB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QUFDQTJDLFFBQUFBLE1BQU0sQ0FBQzFCLENBQVAsR0FBVzZCLEVBQUUsR0FBR0UsRUFBTCxHQUFVL0MsRUFBckI7QUFDSDs7O0FBU0Q7Ozs7Ozs7OztBQVNBLCtCQUF5RDtBQUFBLFVBQTVDTCxDQUE0Qyx1RUFBeEMsQ0FBd0M7QUFBQSxVQUFyQ0MsQ0FBcUMsdUVBQWpDLENBQWlDO0FBQUEsVUFBOUJDLENBQThCLHVFQUExQixDQUEwQjtBQUFBLFVBQXZCQyxDQUF1Qix1RUFBbkIsQ0FBbUI7QUFBQSxVQUFoQkMsRUFBZ0IsdUVBQVgsQ0FBVztBQUFBLFVBQVJDLEVBQVEsdUVBQUgsQ0FBRzs7QUFBQTs7QUFDckQsV0FBS0wsQ0FBTCxHQUFTQSxDQUFUO0FBQ0EsV0FBS0MsQ0FBTCxHQUFTQSxDQUFUO0FBQ0EsV0FBS0MsQ0FBTCxHQUFTQSxDQUFUO0FBQ0EsV0FBS0MsQ0FBTCxHQUFTQSxDQUFUO0FBQ0EsV0FBS0MsRUFBTCxHQUFVQSxFQUFWO0FBQ0EsV0FBS0MsRUFBTCxHQUFVQSxFQUFWO0FBQ0g7Ozs7OztBQUdMZ0QsMEJBQVN2RCxlQUFULEdBQTJCQSxlQUEzQiIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiBDb3B5cmlnaHQgKGMpIDIwMDgtMjAxMCBSaWNhcmRvIFF1ZXNhZGFcclxuIENvcHlyaWdodCAoYykgMjAxMS0yMDEyIGNvY29zMmQteC5vcmdcclxuIENvcHlyaWdodCAoYykgMjAxMy0yMDE2IENodWtvbmcgVGVjaG5vbG9naWVzIEluYy5cclxuIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxyXG5cclxuIGh0dHA6Ly93d3cuY29jb3MyZC14Lm9yZ1xyXG5cclxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcclxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcclxuIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcclxuIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcclxuIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xyXG4gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcclxuXHJcbiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxyXG4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXHJcblxyXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxyXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXHJcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcclxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcclxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXHJcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXHJcbiBUSEUgU09GVFdBUkUuXHJcbiovXHJcblxyXG4vKipcclxuICogQGNhdGVnb3J5IGNvcmUvbWF0aFxyXG4gKi9cclxuXHJcbmltcG9ydCB7IE1hdDQgfSBmcm9tICcuL21hdDQnO1xyXG5pbXBvcnQgeyBSZWN0IH0gZnJvbSAnLi9yZWN0JztcclxuaW1wb3J0IHsgU2l6ZSB9IGZyb20gJy4vc2l6ZSc7XHJcbmltcG9ydCB7IFZlYzIgfSBmcm9tICcuL3ZlYzInO1xyXG5pbXBvcnQgeyBsZWdhY3lDQyB9IGZyb20gJy4uL2dsb2JhbC1leHBvcnRzJztcclxuXHJcbi8qKlxyXG4gKiDkuoznu7Tku7/lsITlj5jmjaLnn6npmLXvvIzmj4/ov7DkuoblubPnp7vjgIHnvKnmlL7lkoznvKnmlL7jgIJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBBZmZpbmVUcmFuc2Zvcm0ge1xyXG4gICAgLyoqXHJcbiAgICAgKiDliJvlu7rljZXkvY3kuoznu7Tku7/lsITlj5jmjaLnn6npmLXvvIzlroPkuI3ov5vooYzku7vkvZXlj5jmjaLjgIJcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBpZGVudGl0eSAoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBBZmZpbmVUcmFuc2Zvcm0oKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWFi+mahuaMh+WumueahOS6jOe7tOS7v+WwhOWPmOaNouefqemYteOAglxyXG4gICAgICogQHBhcmFtIGFmZmluZVRyYW5zZm9ybSDmjIflrprnmoTkuoznu7Tku7/lsITlj5jmjaLnn6npmLXjgIJcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBjbG9uZSAoYWZmaW5lVHJhbnNmb3JtOiBBZmZpbmVUcmFuc2Zvcm0pIHtcclxuICAgICAgICByZXR1cm4gbmV3IEFmZmluZVRyYW5zZm9ybShcclxuICAgICAgICAgICAgYWZmaW5lVHJhbnNmb3JtLmEsIGFmZmluZVRyYW5zZm9ybS5iLFxyXG4gICAgICAgICAgICBhZmZpbmVUcmFuc2Zvcm0uYywgYWZmaW5lVHJhbnNmb3JtLmQsXHJcbiAgICAgICAgICAgIGFmZmluZVRyYW5zZm9ybS50eCwgYWZmaW5lVHJhbnNmb3JtLnR5KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWwhuS4pOS4quefqemYteebuOS5mOeahOe7k+aenOi1i+WAvOe7meWHuuWPo+efqemYteOAglxyXG4gICAgICogQHBhcmFtIG91dCDlh7rlj6Pnn6npmLXjgIJcclxuICAgICAqIEBwYXJhbSB0MSDlt6bnn6npmLXjgIJcclxuICAgICAqIEBwYXJhbSB0MiDlj7Pnn6npmLXjgIJcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBjb25jYXQgKG91dDogQWZmaW5lVHJhbnNmb3JtLCB0MTogQWZmaW5lVHJhbnNmb3JtLCB0MjogQWZmaW5lVHJhbnNmb3JtKSB7XHJcbiAgICAgICAgY29uc3QgYSA9IHQxLmE7XHJcbiAgICAgICAgY29uc3QgYiA9IHQxLmI7XHJcbiAgICAgICAgY29uc3QgYyA9IHQxLmM7XHJcbiAgICAgICAgY29uc3QgZCA9IHQxLmQ7XHJcbiAgICAgICAgY29uc3QgdHggPSB0MS50eDtcclxuICAgICAgICBjb25zdCB0eSA9IHQxLnR5O1xyXG4gICAgICAgIG91dC5hID0gYSAqIHQyLmEgKyBiICogdDIuYztcclxuICAgICAgICBvdXQuYiA9IGEgKiB0Mi5iICsgYiAqIHQyLmQ7XHJcbiAgICAgICAgb3V0LmMgPSBjICogdDIuYSArIGQgKiB0Mi5jO1xyXG4gICAgICAgIG91dC5kID0gYyAqIHQyLmIgKyBkICogdDIuZDtcclxuICAgICAgICBvdXQudHggPSB0eCAqIHQyLmEgKyB0eSAqIHQyLmMgKyB0Mi50eDtcclxuICAgICAgICBvdXQudHkgPSB0eCAqIHQyLmIgKyB0eSAqIHQyLmQgKyB0Mi50eTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWwhuefqemYteaxgumAhueahOe7k+aenOi1i+WAvOe7meWHuuWPo+efqemYteOAglxyXG4gICAgICogQHBhcmFtIG91dCDlh7rlj6Pnn6npmLXjgIJcclxuICAgICAqIEBwYXJhbSB0IOaxgumAhueahOefqemYteOAglxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGludmVydCAob3V0OiBBZmZpbmVUcmFuc2Zvcm0sIHQ6IEFmZmluZVRyYW5zZm9ybSkge1xyXG4gICAgICAgIGNvbnN0IGRldGVybWluYW50ID0gMSAvICh0LmEgKiB0LmQgLSB0LmIgKiB0LmMpO1xyXG4gICAgICAgIG91dC5hID0gZGV0ZXJtaW5hbnQgKiB0LmQ7XHJcbiAgICAgICAgb3V0LmIgPSAtZGV0ZXJtaW5hbnQgKiB0LmI7XHJcbiAgICAgICAgb3V0LmMgPSAtZGV0ZXJtaW5hbnQgKiB0LmM7XHJcbiAgICAgICAgb3V0LmQgPSBkZXRlcm1pbmFudCAqIHQuYTtcclxuICAgICAgICBvdXQudHggPSBkZXRlcm1pbmFudCAqICh0LmMgKiB0LnR5IC0gdC5kICogdC50eCk7XHJcbiAgICAgICAgb3V0LnR5ID0gZGV0ZXJtaW5hbnQgKiAodC5iICogdC50eCAtIHQuYSAqIHQudHkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5bCG5Zub57u055+p6Zi16L2s5o2i5Li65LqM57u05Lu/5bCE5Y+Y5o2i55+p6Zi15bm26LWL5YC857uZ5Ye65Y+j55+p6Zi144CCXHJcbiAgICAgKiBAcGFyYW0gb3V0IOWHuuWPo+efqemYteOAglxyXG4gICAgICogQHBhcmFtIG1hdCDlm5vnu7Tnn6npmLXjgIJcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBmcm9tTWF0NCAob3V0OiBBZmZpbmVUcmFuc2Zvcm0sIG1hdDogTWF0NCkge1xyXG4gICAgICAgIG91dC5hID0gbWF0Lm0wMDtcclxuICAgICAgICBvdXQuYiA9IG1hdC5tMDE7XHJcbiAgICAgICAgb3V0LmMgPSBtYXQubTA0O1xyXG4gICAgICAgIG91dC5kID0gbWF0Lm0wNTtcclxuICAgICAgICBvdXQudHggPSBtYXQubTEyO1xyXG4gICAgICAgIG91dC50eSA9IG1hdC5tMTM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlupTnlKjkuoznu7Tku7/lsITlj5jmjaLnn6npmLXliLDkuoznu7TlkJHph4/kuIrvvIzlubblsIbnu5PmnpzotYvlgLznu5nlh7rlj6PlkJHph4/jgIJcclxuICAgICAqIEBwYXJhbSBvdXQg5Ye65Y+j5ZCR6YeP44CCXHJcbiAgICAgKiBAcGFyYW0gcG9pbnQg5bqU55So5Y+Y5o2i55qE5ZCR6YeP44CCXHJcbiAgICAgKiBAcGFyYW0gdCDkuoznu7Tku7/lsITlj5jmjaLnn6npmLXjgIJcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyB0cmFuc2Zvcm1WZWMyIChvdXQ6IFZlYzIsIHBvaW50OiBWZWMyLCB0OiBBZmZpbmVUcmFuc2Zvcm0pO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5bqU55So5LqM57u05Lu/5bCE5Y+Y5o2i55+p6Zi15Yiw5LqM57u05ZCR6YeP5LiK77yM5bm25bCG57uT5p6c6LWL5YC857uZ5Ye65Y+j5ZCR6YeP44CCXHJcbiAgICAgKiBAcGFyYW0gb3V0IOWHuuWPo+WQkemHj+OAglxyXG4gICAgICogQHBhcmFtIHgg5bqU55So5Y+Y5o2i55qE5ZCR6YeP55qEIHgg5YiG6YeP44CCXHJcbiAgICAgKiBAcGFyYW0geSDlupTnlKjlj5jmjaLnmoTlkJHph4/nmoQgeSDliIbph4/jgIJcclxuICAgICAqIEBwYXJhbSB0IOS6jOe7tOS7v+WwhOWPmOaNouefqemYteOAglxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIHRyYW5zZm9ybVZlYzIgKG91dDogVmVjMiwgeDogbnVtYmVyLCB5OiBudW1iZXIsIHQ6IEFmZmluZVRyYW5zZm9ybSk7XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyB0cmFuc2Zvcm1WZWMyIChvdXQ6IFZlYzIsIHBvaW50OiBhbnksIHRyYW5zT3JZOiBhbnksIHQ/OiBhbnkpIHtcclxuICAgICAgICBsZXQgeDtcclxuICAgICAgICBsZXQgeTtcclxuICAgICAgICBpZiAodCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHQgPSB0cmFuc09yWTtcclxuICAgICAgICAgICAgeCA9IHBvaW50Lng7XHJcbiAgICAgICAgICAgIHkgPSBwb2ludC55O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHggPSBwb2ludDtcclxuICAgICAgICAgICAgeSA9IHRyYW5zT3JZO1xyXG4gICAgICAgIH1cclxuICAgICAgICBvdXQueCA9IHQuYSAqIHggKyB0LmMgKiB5ICsgdC50eDtcclxuICAgICAgICBvdXQueSA9IHQuYiAqIHggKyB0LmQgKiB5ICsgdC50eTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOW6lOeUqOS6jOe7tOS7v+WwhOWPmOaNouefqemYteWIsOS6jOe7tOWwuuWvuOS4iu+8jOW5tuWwhue7k+aenOi1i+WAvOe7meWHuuWPo+WwuuWvuOOAglxyXG4gICAgICogQHBhcmFtIG91dCDlh7rlj6PlsLrlr7jjgIJcclxuICAgICAqIEBwYXJhbSBzaXplIOW6lOeUqOWPmOaNoueahOWwuuWvuOOAglxyXG4gICAgICogQHBhcmFtIHQg5LqM57u05Lu/5bCE5Y+Y5o2i55+p6Zi144CCXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgdHJhbnNmb3JtU2l6ZSAob3V0OiBTaXplLCBzaXplOiBTaXplLCB0OiBBZmZpbmVUcmFuc2Zvcm0pIHtcclxuICAgICAgICBvdXQud2lkdGggPSB0LmEgKiBzaXplLndpZHRoICsgdC5jICogc2l6ZS5oZWlnaHQ7XHJcbiAgICAgICAgb3V0LmhlaWdodCA9IHQuYiAqIHNpemUud2lkdGggKyB0LmQgKiBzaXplLmhlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOW6lOeUqOS6jOe7tOS7v+WwhOWPmOaNouefqemYteWIsOefqeW9ouS4iu+8jOW5tuWwhue7k+aenOi1i+WAvOe7meWHuuWPo+efqeW9ouOAglxyXG4gICAgICogQHBhcmFtIG91dCDlh7rlj6Pnn6nlvaLjgIJcclxuICAgICAqIEBwYXJhbSByZWN0IOW6lOeUqOWPmOaNoueahOefqeW9ouOAglxyXG4gICAgICogQHBhcmFtIHQg5LqM57u05Lu/5bCE5Y+Y5o2i55+p6Zi144CCXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgdHJhbnNmb3JtUmVjdCAob3V0OiBSZWN0LCByZWN0OiBSZWN0LCB0OiBBZmZpbmVUcmFuc2Zvcm0pIHtcclxuXHJcbiAgICAgICAgY29uc3Qgb3IgPSByZWN0LnggKyByZWN0LndpZHRoO1xyXG4gICAgICAgIGNvbnN0IG90ID0gcmVjdC55ICsgcmVjdC5oZWlnaHQ7XHJcbiAgICAgICAgY29uc3QgbGJ4ID0gdC5hICogcmVjdC54ICsgdC5jICogcmVjdC55ICsgdC50eDtcclxuICAgICAgICBjb25zdCBsYnkgPSB0LmIgKiByZWN0LnggKyB0LmQgKiByZWN0LnkgKyB0LnR5O1xyXG4gICAgICAgIGNvbnN0IHJieCA9IHQuYSAqIG9yICsgdC5jICogcmVjdC55ICsgdC50eDtcclxuICAgICAgICBjb25zdCByYnkgPSB0LmIgKiBvciArIHQuZCAqIHJlY3QueSArIHQudHk7XHJcbiAgICAgICAgY29uc3QgbHR4ID0gdC5hICogcmVjdC54ICsgdC5jICogb3QgKyB0LnR4O1xyXG4gICAgICAgIGNvbnN0IGx0eSA9IHQuYiAqIHJlY3QueCArIHQuZCAqIG90ICsgdC50eTtcclxuICAgICAgICBjb25zdCBydHggPSB0LmEgKiBvciArIHQuYyAqIG90ICsgdC50eDtcclxuICAgICAgICBjb25zdCBydHkgPSB0LmIgKiBvciArIHQuZCAqIG90ICsgdC50eTtcclxuXHJcbiAgICAgICAgY29uc3QgbWluWCA9IE1hdGgubWluKGxieCwgcmJ4LCBsdHgsIHJ0eCk7XHJcbiAgICAgICAgY29uc3QgbWF4WCA9IE1hdGgubWF4KGxieCwgcmJ4LCBsdHgsIHJ0eCk7XHJcbiAgICAgICAgY29uc3QgbWluWSA9IE1hdGgubWluKGxieSwgcmJ5LCBsdHksIHJ0eSk7XHJcbiAgICAgICAgY29uc3QgbWF4WSA9IE1hdGgubWF4KGxieSwgcmJ5LCBsdHksIHJ0eSk7XHJcblxyXG4gICAgICAgIG91dC54ID0gbWluWDtcclxuICAgICAgICBvdXQueSA9IG1pblk7XHJcbiAgICAgICAgb3V0LndpZHRoID0gbWF4WCAtIG1pblg7XHJcbiAgICAgICAgb3V0LmhlaWdodCA9IG1heFkgLSBtaW5ZO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5bqU55So5LqM57u05Lu/5bCE5Y+Y5o2i55+p6Zi15Yiw55+p5b2i5LiKLCDlubbovazmjaLkuLrmnInlkJHljIXlm7Tnm5LjgIJcclxuICAgICAqIOi/meS4quWHveaVsOS4jeWIm+W7uuS7u+S9leWGheWtmO+8jOS9oOmcgOimgeWFiOWIm+W7uuWMheWbtOebkueahOWbm+S4qiBWZWN0b3Ig5a+56LGh55So5p2l5a2Y5YKo57uT5p6c77yM5bm25L2c5Li65YmN5Zub5Liq5Y+C5pWw5Lyg5YWl5Ye95pWw44CCXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgdHJhbnNmb3JtT2JiIChvdXRfYmw6IFZlYzIsIG91dF90bDogVmVjMiwgb3V0X3RyOiBWZWMyLCBvdXRfYnI6IFZlYzIsIHJlY3Q6IFJlY3QsIGFuQWZmaW5lVHJhbnNmb3JtOiBBZmZpbmVUcmFuc2Zvcm0pIHtcclxuXHJcbiAgICAgICAgY29uc3QgdHggPSBhbkFmZmluZVRyYW5zZm9ybS5hICogcmVjdC54ICsgYW5BZmZpbmVUcmFuc2Zvcm0uYyAqIHJlY3QueSArIGFuQWZmaW5lVHJhbnNmb3JtLnR4O1xyXG4gICAgICAgIGNvbnN0IHR5ID0gYW5BZmZpbmVUcmFuc2Zvcm0uYiAqIHJlY3QueCArIGFuQWZmaW5lVHJhbnNmb3JtLmQgKiByZWN0LnkgKyBhbkFmZmluZVRyYW5zZm9ybS50eTtcclxuICAgICAgICBjb25zdCB4YSA9IGFuQWZmaW5lVHJhbnNmb3JtLmEgKiByZWN0LndpZHRoO1xyXG4gICAgICAgIGNvbnN0IHhiID0gYW5BZmZpbmVUcmFuc2Zvcm0uYiAqIHJlY3Qud2lkdGg7XHJcbiAgICAgICAgY29uc3QgeWMgPSBhbkFmZmluZVRyYW5zZm9ybS5jICogcmVjdC5oZWlnaHQ7XHJcbiAgICAgICAgY29uc3QgeWQgPSBhbkFmZmluZVRyYW5zZm9ybS5kICogcmVjdC5oZWlnaHQ7XHJcblxyXG4gICAgICAgIG91dF90bC54ID0gdHg7XHJcbiAgICAgICAgb3V0X3RsLnkgPSB0eTtcclxuICAgICAgICBvdXRfdHIueCA9IHhhICsgdHg7XHJcbiAgICAgICAgb3V0X3RyLnkgPSB4YiArIHR5O1xyXG4gICAgICAgIG91dF9ibC54ID0geWMgKyB0eDtcclxuICAgICAgICBvdXRfYmwueSA9IHlkICsgdHk7XHJcbiAgICAgICAgb3V0X2JyLnggPSB4YSArIHljICsgdHg7XHJcbiAgICAgICAgb3V0X2JyLnkgPSB4YiArIHlkICsgdHk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGRlY2xhcmUgYTogbnVtYmVyO1xyXG4gICAgcHVibGljIGRlY2xhcmUgYjogbnVtYmVyO1xyXG4gICAgcHVibGljIGRlY2xhcmUgYzogbnVtYmVyO1xyXG4gICAgcHVibGljIGRlY2xhcmUgZDogbnVtYmVyO1xyXG4gICAgcHVibGljIGRlY2xhcmUgdHg6IG51bWJlcjtcclxuICAgIHB1YmxpYyBkZWNsYXJlIHR5OiBudW1iZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmnoTpgKDkuoznu7TmlL7lsITlj5jmjaLnn6npmLXjgIJcclxuICAgICAqIEBwYXJhbSBhIGEg5YWD57Sg44CCXHJcbiAgICAgKiBAcGFyYW0gYiBiIOWFg+e0oOOAglxyXG4gICAgICogQHBhcmFtIGMgYyDlhYPntKDjgIJcclxuICAgICAqIEBwYXJhbSBkIGQg5YWD57Sg44CCXHJcbiAgICAgKiBAcGFyYW0gdHggdHgg5YWD57Sg44CCXHJcbiAgICAgKiBAcGFyYW0gdHkgdHkg5YWD57Sg44CCXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yIChhID0gMSwgYiA9IDAsIGMgPSAwLCBkID0gMSwgdHggPSAwLCB0eSA9IDApIHtcclxuICAgICAgICB0aGlzLmEgPSBhO1xyXG4gICAgICAgIHRoaXMuYiA9IGI7XHJcbiAgICAgICAgdGhpcy5jID0gYztcclxuICAgICAgICB0aGlzLmQgPSBkO1xyXG4gICAgICAgIHRoaXMudHggPSB0eDtcclxuICAgICAgICB0aGlzLnR5ID0gdHk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmxlZ2FjeUNDLkFmZmluZVRyYW5zZm9ybSA9IEFmZmluZVRyYW5zZm9ybTtcclxuIl19