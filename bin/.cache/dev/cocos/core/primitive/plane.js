(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../math/index.js", "./define.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../math/index.js"), require("./define.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.define);
    global.plane = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _define) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = plane;

  /**
   * @category 3d/primitive
   */

  /**
   * @zh
   * 应用默认的平面参数选项。
   * @param options 平面参数选项。
   */
  function applyDefaultPlaneOptions(options) {
    options = (0, _define.applyDefaultGeometryOptions)(options);
    options.width = options.width || 10;
    options.length = options.length || 10;
    options.widthSegments = options.widthSegments || 10;
    options.lengthSegments = options.lengthSegments || 10;
    return options;
  }

  var temp1 = new _index.Vec3(0, 0, 0);
  var temp2 = new _index.Vec3(0, 0, 0);
  var temp3 = new _index.Vec3(0, 0, 0);
  var r = new _index.Vec3(0, 0, 0);
  var c00 = new _index.Vec3(0, 0, 0);
  var c10 = new _index.Vec3(0, 0, 0);
  var c01 = new _index.Vec3(0, 0, 0);
  /**
   * @en
   * This function generates a plane on XOZ plane with positive Y direction.
   * @zh
   * 生成一个平面，其位于XOZ平面，方向为Y轴正方向。
   * @param options 平面参数选项。
   */

  function plane(options) {
    var normalizedOptions = applyDefaultPlaneOptions(options);
    var width = normalizedOptions.width,
        length = normalizedOptions.length,
        uSegments = normalizedOptions.widthSegments,
        vSegments = normalizedOptions.lengthSegments;
    var hw = width * 0.5;
    var hl = length * 0.5;
    var positions = [];
    var uvs = [];
    var indices = [];
    var minPos = new _index.Vec3(-hw, 0, -hl);
    var maxPos = new _index.Vec3(hw, 0, hl);
    var boundingRadius = Math.sqrt(width * width + length * length);

    _index.Vec3.set(c00, -hw, 0, hl);

    _index.Vec3.set(c10, hw, 0, hl);

    _index.Vec3.set(c01, -hw, 0, -hl);

    for (var y = 0; y <= vSegments; y++) {
      for (var x = 0; x <= uSegments; x++) {
        var u = x / uSegments;
        var v = y / vSegments;

        _index.Vec3.lerp(temp1, c00, c10, u);

        _index.Vec3.lerp(temp2, c00, c01, v);

        _index.Vec3.subtract(temp3, temp2, c00);

        _index.Vec3.add(r, temp1, temp3);

        positions.push(r.x, r.y, r.z);

        if (normalizedOptions.includeUV) {
          uvs.push(u, v);
        }

        if (x < uSegments && y < vSegments) {
          var useg1 = uSegments + 1;
          var a = x + y * useg1;
          var b = x + (y + 1) * useg1;
          var c = x + 1 + (y + 1) * useg1;
          var d = x + 1 + y * useg1;
          indices.push(a, d, b);
          indices.push(d, c, b);
        }
      }
    }

    var result = {
      positions: positions,
      indices: indices,
      minPos: minPos,
      maxPos: maxPos,
      boundingRadius: boundingRadius
    };

    if (normalizedOptions.includeNormal) {
      var nVertex = (vSegments + 1) * (uSegments + 1);
      var normals = new Array(3 * nVertex);
      result.normals = normals;

      for (var i = 0; i < nVertex; ++i) {
        normals[i * 3 + 0] = 0;
        normals[i * 3 + 1] = 1;
        normals[i * 3 + 2] = 0;
      }
    }

    if (normalizedOptions.includeUV) {
      result.uvs = uvs;
    }

    return result;
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,