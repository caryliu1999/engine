(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../gfx/define.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../gfx/define.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.define);
    global.utils = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _define) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.wireframe = wireframe;
  _exports.invWinding = invWinding;
  _exports.toWavefrontOBJ = toWavefrontOBJ;
  _exports.normals = normals;

  /**
   * 几何图形模块
   * @category 3d/primitive
   */

  /**
   * @deprecated
   */
  function wireframe(indices) {
    var offsets = [[0, 1], [1, 2], [2, 0]];
    var lines = [];
    var lineIDs = {};

    for (var i = 0; i < indices.length; i += 3) {
      for (var k = 0; k < 3; ++k) {
        var i1 = indices[i + offsets[k][0]];
        var i2 = indices[i + offsets[k][1]]; // check if we already have the line in our lines

        var id = i1 > i2 ? i2 << 16 | i1 : i1 << 16 | i2;

        if (lineIDs[id] === undefined) {
          lineIDs[id] = 0;
          lines.push(i1, i2);
        }
      }
    }

    return lines;
  }
  /**
   * @deprecated
   */


  function invWinding(indices) {
    var newIB = [];

    for (var i = 0; i < indices.length; i += 3) {
      newIB.push(indices[i], indices[i + 2], indices[i + 1]);
    }

    return newIB;
  }
  /**
   * @deprecated
   */


  function toWavefrontOBJ(primitive) {
    var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

    if (!primitive.indices || !primitive.uvs || !primitive.normals || primitive.primitiveMode !== undefined && primitive.primitiveMode !== _define.GFXPrimitiveMode.TRIANGLE_LIST) {
      return '';
    }

    var v = primitive.positions;
    var t = primitive.uvs;
    var n = primitive.normals;
    var IB = primitive.indices;

    var V = function V(i) {
      return "".concat(IB[i] + 1, "/").concat(IB[i] + 1, "/").concat(IB[i] + 1);
    };

    var content = '';

    for (var i = 0; i < v.length; i += 3) {
      content += "v ".concat(v[i] * scale, " ").concat(v[i + 1] * scale, " ").concat(v[i + 2] * scale, "\n");
    }

    for (var _i = 0; _i < t.length; _i += 2) {
      content += "vt ".concat(t[_i], " ").concat(t[_i + 1], "\n");
    }

    for (var _i2 = 0; _i2 < n.length; _i2 += 3) {
      content += "vn ".concat(n[_i2], " ").concat(n[_i2 + 1], " ").concat(n[_i2 + 2], "\n");
    }

    for (var _i3 = 0; _i3 < IB.length; _i3 += 3) {
      content += "f ".concat(V(_i3), " ").concat(V(_i3 + 1), " ").concat(V(_i3 + 2), "\n");
    }

    return content;
  }
  /**
   * @deprecated
   */


  function normals(positions, nms) {
    var length = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    var verts = new Array(2 * positions.length);

    for (var i = 0; i < positions.length / 3; ++i) {
      var i3 = 3 * i;
      var i6 = 6 * i; // line start

      verts[i6 + 0] = positions[i3 + 0];
      verts[i6 + 1] = positions[i3 + 1];
      verts[i6 + 2] = positions[i3 + 2]; // line end

      verts[i6 + 3] = positions[i3 + 0] + nms[i3 + 0] * length;
      verts[i6 + 4] = positions[i3 + 1] + nms[i3 + 1] * length;
      verts[i6 + 5] = positions[i3 + 2] + nms[i3 + 2] * length;
    }

    return verts;
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,