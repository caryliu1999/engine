(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../gfx/define.js", "../../gfx/texture.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../gfx/define.js"), require("../../gfx/texture.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.define, global.texture);
    global.textureBufferPool = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _define, _texture) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.nearestPOT = nearestPOT;
  _exports.TextureBufferPool = void 0;

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function nearestPOT(num) {
    --num;
    num |= num >> 16;
    num |= num >> 8;
    num |= num >> 4;
    num |= num >> 2;
    num |= num >> 1;
    ++num;
    return num;
  }

  function roundUp(n, alignment) {
    return Math.ceil(n / alignment) * alignment;
  }

  var TextureBufferPool = /*#__PURE__*/function () {
    function TextureBufferPool(device) {
      _classCallCheck(this, TextureBufferPool);

      this._device = void 0;
      this._format = _define.GFXFormat.UNKNOWN;
      this._formatSize = 0;
      this._chunks = [];
      this._chunkCount = 0;
      this._handles = [];
      this._region0 = new _define.GFXBufferTextureCopy();
      this._region1 = new _define.GFXBufferTextureCopy();
      this._region2 = new _define.GFXBufferTextureCopy();
      this._roundUpFn = null;
      this._bufferViewCtor = Uint8Array;
      this._channels = 4;
      this._alignment = 1;
      this._device = device;
    }

    _createClass(TextureBufferPool, [{
      key: "initialize",
      value: function initialize(info) {
        var formatInfo = _define.GFXFormatInfos[info.format];
        this._format = info.format;
        this._formatSize = formatInfo.size;
        this._channels = formatInfo.count;
        this._bufferViewCtor = (0, _define.getTypedArrayConstructor)(formatInfo);
        this._roundUpFn = info.roundUpFn || null;
        this._alignment = info.alignment || 1;

        if (info.inOrderFree) {
          this.alloc = this._McDonaldAlloc;
        }
      }
    }, {
      key: "destroy",
      value: function destroy() {
        for (var i = 0; i < this._chunkCount; ++i) {
          var chunk = this._chunks[i];
          chunk.texture.destroy();
        }

        this._chunks.length = 0;
        this._handles.length = 0;
      }
    }, {
      key: "alloc",
      value: function alloc(size, chunkIdx) {
        size = roundUp(size, this._alignment);
        var index = -1;
        var start = -1;

        if (chunkIdx !== undefined) {
          index = chunkIdx;
          start = this._findAvailableSpace(size, index);
        }

        if (start < 0) {
          for (var i = 0; i < this._chunkCount; ++i) {
            index = i;
            start = this._findAvailableSpace(size, index);

            if (start >= 0) {
              break;
            }
          }
        }

        if (start >= 0) {
          var chunk = this._chunks[index];
          chunk.start += size;
          var handle = {
            chunkIdx: index,
            start: start,
            end: start + size,
            texture: chunk.texture
          };

          this._handles.push(handle);

          return handle;
        } // create a new one


        var targetSize = Math.sqrt(size / this._formatSize);
        var texLength = this._roundUpFn && this._roundUpFn(targetSize, this._formatSize) || Math.max(1024, nearestPOT(targetSize));

        var newChunk = this._chunks[this.createChunk(texLength)];

        newChunk.start += size;
        var texHandle = {
          chunkIdx: this._chunkCount - 1,
          start: 0,
          end: size,
          texture: newChunk.texture
        };

        this._handles.push(texHandle);

        return texHandle;
      }
    }, {
      key: "free",
      value: function free(handle) {
        for (var i = 0; i < this._handles.length; ++i) {
          if (this._handles[i] === handle) {
            this._chunks[handle.chunkIdx].end = handle.end;

            this._handles.splice(i, 1);

            return;
          }
        }
      }
    }, {
      key: "createChunk",
      value: function createChunk(length) {
        var texSize = length * length * this._formatSize;
        console.info('TextureBufferPool: Allocate chunk ' + this._chunkCount + ', size: ' + texSize + ', format: ' + this._format);

        var texture = this._device.createTexture(new _texture.GFXTextureInfo(_define.GFXTextureType.TEX2D, _define.GFXTextureUsageBit.SAMPLED | _define.GFXTextureUsageBit.TRANSFER_DST, this._format, length, length));

        var chunk = {
          texture: texture,
          size: texSize,
          start: 0,
          end: texSize
        };
        this._chunks[this._chunkCount] = chunk;
        return this._chunkCount++;
      }
    }, {
      key: "update",
      value: function update(handle, buffer) {
        var buffers = [];
        var regions = [];
        var start = handle.start / this._formatSize;
        var remainSize = buffer.byteLength / this._formatSize;
        var offsetX = start % handle.texture.width;
        var offsetY = Math.floor(start / handle.texture.width);
        var copySize = Math.min(handle.texture.width - offsetX, remainSize);
        var begin = 0;

        if (offsetX > 0) {
          this._region0.texOffset.x = offsetX;
          this._region0.texOffset.y = offsetY;
          this._region0.texExtent.width = copySize;
          this._region0.texExtent.height = 1;
          buffers.push(new this._bufferViewCtor(buffer, begin * this._formatSize, copySize * this._channels));
          regions.push(this._region0);
          offsetX = 0;
          offsetY += 1;
          remainSize -= copySize;
          begin += copySize;
        }

        if (remainSize > 0) {
          this._region1.texOffset.x = offsetX;
          this._region1.texOffset.y = offsetY;

          if (remainSize > handle.texture.width) {
            this._region1.texExtent.width = handle.texture.width;
            this._region1.texExtent.height = Math.floor(remainSize / handle.texture.width);
            copySize = this._region1.texExtent.width * this._region1.texExtent.height;
          } else {
            copySize = remainSize;
            this._region1.texExtent.width = copySize;
            this._region1.texExtent.height = 1;
          }

          buffers.push(new this._bufferViewCtor(buffer, begin * this._formatSize, copySize * this._channels));
          regions.push(this._region1);
          offsetX = 0;
          offsetY += this._region1.texExtent.height;
          remainSize -= copySize;
          begin += copySize;
        }

        if (remainSize > 0) {
          this._region2.texOffset.x = offsetX;
          this._region2.texOffset.y = offsetY;
          this._region2.texExtent.width = remainSize;
          this._region2.texExtent.height = 1;
          buffers.push(new this._bufferViewCtor(buffer, begin * this._formatSize, remainSize * this._channels));
          regions.push(this._region2);
        }

        this._device.copyBuffersToTexture(buffers, handle.texture, regions);
      }
    }, {
      key: "_findAvailableSpace",
      value: function _findAvailableSpace(size, chunkIdx) {
        var chunk = this._chunks[chunkIdx];
        var isFound = false;
        var start = chunk.start;

        if (start + size <= chunk.size) {
          isFound = true;
        } else {
          start = 0; // try to find from head again

          var handles = this._handles.filter(function (h) {
            return h.chunkIdx === chunkIdx;
          }).sort(function (a, b) {
            return a.start - b.start;
          });

          for (var i = 0; i < handles.length; i++) {
            var handle = handles[i];

            if (start + size <= handle.start) {
              isFound = true;
              break;
            }

            start = handle.end;
          }

          if (!isFound && start + size <= chunk.size) {
            isFound = true;
          }
        }

        return isFound ? start : -1;
      } // [McDonald 12] Efficient Buffer Management

    }, {
      key: "_McDonaldAlloc",
      value: function _McDonaldAlloc(size) {
        size = roundUp(size, this._alignment);

        for (var i = 0; i < this._chunkCount; ++i) {
          var chunk = this._chunks[i];
          var isFound = false;
          var start = chunk.start;

          if (start + size <= chunk.end) {
            isFound = true;
          } else if (start > chunk.end) {
            if (start + size <= chunk.size) {
              isFound = true;
            } else if (size <= chunk.end) {
              // Try to find from head again.
              chunk.start = start = 0;
              isFound = true;
            }
          } else if (start === chunk.end) {
            chunk.start = start = 0;
            chunk.end = chunk.size;

            if (size <= chunk.end) {
              isFound = true;
            }
          }

          if (isFound) {
            chunk.start += size;
            var handle = {
              chunkIdx: i,
              start: start,
              end: start + size,
              texture: chunk.texture
            };

            this._handles.push(handle);

            return handle;
          }
        } // create a new one


        var targetSize = Math.sqrt(size / this._formatSize);
        var texLength = this._roundUpFn && this._roundUpFn(targetSize, this._formatSize) || Math.max(1024, nearestPOT(targetSize));

        var newChunk = this._chunks[this.createChunk(texLength)];

        newChunk.start += size;
        var texHandle = {
          chunkIdx: this._chunkCount,
          start: 0,
          end: size,
          texture: newChunk.texture
        };

        this._handles.push(texHandle);

        return texHandle;
      }
    }]);

    return TextureBufferPool;
  }();

  _exports.TextureBufferPool = TextureBufferPool;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,