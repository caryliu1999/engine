(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../core/math/index.js", "../core/math/bits.js", "./enum.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../core/math/index.js"), require("../core/math/bits.js"), require("./enum.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.bits, global._enum);
    global.particleGeneralFunction = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _bits, _enum) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.calculateTransform = calculateTransform;
  _exports.fixedAngleUnitVector2 = fixedAngleUnitVector2;
  _exports.randomUnitVector2 = randomUnitVector2;
  _exports.randomUnitVector = randomUnitVector;
  _exports.randomPointInUnitSphere = randomPointInUnitSphere;
  _exports.randomPointBetweenSphere = randomPointBetweenSphere;
  _exports.randomPointInUnitCircle = randomPointInUnitCircle;
  _exports.randomPointBetweenCircle = randomPointBetweenCircle;
  _exports.randomPointBetweenCircleAtFixedAngle = randomPointBetweenCircleAtFixedAngle;
  _exports.randomPointInCube = randomPointInCube;
  _exports.randomPointBetweenCube = randomPointBetweenCube;
  _exports.randomSortArray = randomSortArray;
  _exports.randomSign = randomSign;
  _exports.particleEmitZAxis = void 0;

  /**
   * @hidden
   */
  var particleEmitZAxis = new _index.Vec3(0, 0, -1);
  _exports.particleEmitZAxis = particleEmitZAxis;

  function calculateTransform(systemSpace, moduleSpace, worldTransform, outQuat) {
    if (moduleSpace !== systemSpace) {
      if (systemSpace === _enum.Space.World) {
        _index.Mat4.getRotation(outQuat, worldTransform);
      } else {
        _index.Mat4.invert(worldTransform, worldTransform);

        _index.Mat4.getRotation(outQuat, worldTransform);
      }

      return true;
    } else {
      _index.Quat.set(outQuat, 0, 0, 0, 1);

      return false;
    }
  }

  function fixedAngleUnitVector2(out, theta) {
    _index.Vec2.set(out, Math.cos(theta), Math.sin(theta));
  }

  function randomUnitVector2(out) {
    var a = (0, _index.randomRange)(0, 2 * Math.PI);
    var x = Math.cos(a);
    var y = Math.sin(a);

    _index.Vec2.set(out, x, y);
  }

  function randomUnitVector(out) {
    var z = (0, _index.randomRange)(-1, 1);
    var a = (0, _index.randomRange)(0, 2 * Math.PI);
    var r = Math.sqrt(1 - z * z);
    var x = r * Math.cos(a);
    var y = r * Math.sin(a);

    _index.Vec3.set(out, x, y, z);
  }

  function randomPointInUnitSphere(out) {
    randomUnitVector(out);

    _index.Vec3.multiplyScalar(out, out, (0, _index.random)());
  }

  function randomPointBetweenSphere(out, minRadius, maxRadius) {
    randomUnitVector(out);

    _index.Vec3.multiplyScalar(out, out, minRadius + (maxRadius - minRadius) * (0, _index.random)());
  }

  function randomPointInUnitCircle(out) {
    randomUnitVector2(out);
    out.z = 0;

    _index.Vec3.multiplyScalar(out, out, (0, _index.random)());
  }

  function randomPointBetweenCircle(out, minRadius, maxRadius) {
    randomUnitVector2(out);
    out.z = 0;

    _index.Vec3.multiplyScalar(out, out, minRadius + (maxRadius - minRadius) * (0, _index.random)());
  }

  function randomPointBetweenCircleAtFixedAngle(out, minRadius, maxRadius, theta) {
    fixedAngleUnitVector2(out, theta);
    out.z = 0;

    _index.Vec3.multiplyScalar(out, out, minRadius + (maxRadius - minRadius) * (0, _index.random)());
  }

  function randomPointInCube(out, extents) {
    _index.Vec3.set(out, (0, _index.randomRange)(-extents.x, extents.x), (0, _index.randomRange)(-extents.y, extents.y), (0, _index.randomRange)(-extents.z, extents.z));
  }

  function randomPointBetweenCube(out, minBox, maxBox) {
    var subscript = ['x', 'y', 'z'];
    var edge = (0, _index.randomRangeInt)(0, 3);

    for (var i = 0; i < 3; i++) {
      if (i === edge) {
        out[subscript[i]] = (0, _index.randomRange)(-maxBox[subscript[i]], maxBox[subscript[i]]);
        continue;
      }

      var x = (0, _index.random)() * 2 - 1;

      if (x < 0) {
        out[subscript[i]] = -minBox[subscript[i]] + x * (maxBox[subscript[i]] - minBox[subscript[i]]);
      } else {
        out[subscript[i]] = minBox[subscript[i]] + x * (maxBox[subscript[i]] - minBox[subscript[i]]);
      }
    }
  } // Fisherâ€“Yates shuffle


  function randomSortArray(arr) {
    for (var i = 0; i < arr.length; i++) {
      var transpose = i + (0, _index.randomRangeInt)(0, arr.length - i);
      var val = arr[transpose];
      arr[transpose] = arr[i];
      arr[i] = val;
    }
  }

  function randomSign() {
    var sgn = (0, _index.randomRange)(-1, 1);

    if (sgn === 0) {
      sgn++;
    }

    return (0, _bits.sign)(sgn);
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,