(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "./types.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("./types.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.types);
    global.helper = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _types) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.arc = arc;
  _exports.ellipse = ellipse;
  _exports.roundRect = roundRect;
  _exports.tesselateBezier = tesselateBezier;

  /*
   Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
  
   http://www.cocos.com
  
   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated engine source code (the "Software"), a limited,
   worldwide, royalty-free, non-assignable, revocable and non-exclusive license
   to use Cocos Creator solely to develop games on your target platforms. You shall
   not use Cocos Creator software for developing other software or tools that's
   used for developing games. You are not granted to publish, distribute,
   sublicense, and/or sell copies of Cocos Creator.
  
   The software or tools in this License Agreement are licensed, not sold.
   Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
  
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE.
  */
  var PI = Math.PI;
  var min = Math.min;
  var max = Math.max;
  var cos = Math.cos;
  var sin = Math.sin;
  var abs = Math.abs;
  var sign = Math.sign;
  var KAPPA90 = 0.5522847493;

  function arc(ctx, cx, cy, r, startAngle, endAngle, counterclockwise) {
    counterclockwise = counterclockwise || false;
    var a = 0;
    var da = 0;
    var hda = 0;
    var kappa = 0;
    var dx = 0;
    var dy = 0;
    var x = 0;
    var y = 0;
    var tanx = 0;
    var tany = 0;
    var px = 0;
    var py = 0;
    var ptanx = 0;
    var ptany = 0;
    var i = 0;
    var ndivs = 0; // Clamp angles

    da = endAngle - startAngle;

    if (counterclockwise) {
      if (abs(da) >= PI * 2) {
        da = PI * 2;
      } else {
        while (da < 0) {
          da += PI * 2;
        }
      }
    } else {
      if (abs(da) >= PI * 2) {
        da = -PI * 2;
      } else {
        while (da > 0) {
          da -= PI * 2;
        }
      }
    } // Split arc into max 90 degree segments.


    ndivs = max(1, min(abs(da) / (PI * 0.5) + 0.5, 5)) | 0;
    hda = da / ndivs / 2.0;
    kappa = abs(4.0 / 3.0 * (1 - cos(hda)) / sin(hda));

    if (!counterclockwise) {
      kappa = -kappa;
    }

    for (i = 0; i <= ndivs; i++) {
      a = startAngle + da * (i / ndivs);
      dx = cos(a);
      dy = sin(a);
      x = cx + dx * r;
      y = cy + dy * r;
      tanx = -dy * r * kappa;
      tany = dx * r * kappa;

      if (i === 0) {
        ctx.moveTo(x, y);
      } else {
        ctx.bezierCurveTo(px + ptanx, py + ptany, x - tanx, y - tany, x, y);
      }

      px = x;
      py = y;
      ptanx = tanx;
      ptany = tany;
    }
  }

  function ellipse(ctx, cx, cy, rx, ry) {
    ctx.moveTo(cx - rx, cy);
    ctx.bezierCurveTo(cx - rx, cy + ry * KAPPA90, cx - rx * KAPPA90, cy + ry, cx, cy + ry);
    ctx.bezierCurveTo(cx + rx * KAPPA90, cy + ry, cx + rx, cy + ry * KAPPA90, cx + rx, cy);
    ctx.bezierCurveTo(cx + rx, cy - ry * KAPPA90, cx + rx * KAPPA90, cy - ry, cx, cy - ry);
    ctx.bezierCurveTo(cx - rx * KAPPA90, cy - ry, cx - rx, cy - ry * KAPPA90, cx - rx, cy);
    ctx.close();
  }

  function roundRect(ctx, x, y, w, h, r) {
    if (r < 0.1) {
      ctx.rect(x, y, w, h);
      return;
    } else {
      var rx = min(r, abs(w) * 0.5) * sign(w);
      var ry = min(r, abs(h) * 0.5) * sign(h);
      ctx.moveTo(x, y + ry);
      ctx.lineTo(x, y + h - ry);
      ctx.bezierCurveTo(x, y + h - ry * (1 - KAPPA90), x + rx * (1 - KAPPA90), y + h, x + rx, y + h);
      ctx.lineTo(x + w - rx, y + h);
      ctx.bezierCurveTo(x + w - rx * (1 - KAPPA90), y + h, x + w, y + h - ry * (1 - KAPPA90), x + w, y + h - ry);
      ctx.lineTo(x + w, y + ry);
      ctx.bezierCurveTo(x + w, y + ry * (1 - KAPPA90), x + w - rx * (1 - KAPPA90), y, x + w - rx, y);
      ctx.lineTo(x + rx, y);
      ctx.bezierCurveTo(x + rx * (1 - KAPPA90), y, x, y + ry * (1 - KAPPA90), x, y + ry);
      ctx.close();
    }
  }

  function tesselateBezier(ctx, x1, y1, x2, y2, x3, y3, x4, y4, level, type) {
    var x12 = 0;
    var y12 = 0;
    var x23 = 0;
    var y23 = 0;
    var x34 = 0;
    var y34 = 0;
    var x123 = 0;
    var y123 = 0;
    var x234 = 0;
    var y234 = 0;
    var x1234 = 0;
    var y1234 = 0;
    var dx = 0;
    var dy = 0;
    var d2 = 0;
    var d3 = 0;

    if (level > 10) {
      return;
    }

    x12 = (x1 + x2) * 0.5;
    y12 = (y1 + y2) * 0.5;
    x23 = (x2 + x3) * 0.5;
    y23 = (y2 + y3) * 0.5;
    x34 = (x3 + x4) * 0.5;
    y34 = (y3 + y4) * 0.5;
    x123 = (x12 + x23) * 0.5;
    y123 = (y12 + y23) * 0.5;
    dx = x4 - x1;
    dy = y4 - y1;
    d2 = abs((x2 - x4) * dy - (y2 - y4) * dx);
    d3 = abs((x3 - x4) * dy - (y3 - y4) * dx);

    if ((d2 + d3) * (d2 + d3) < ctx.tessTol * (dx * dx + dy * dy)) {
      ctx.addPoint(x4, y4, type === 0 ? type | _types.PointFlags.PT_BEVEL : type);
      return;
    }

    x234 = (x23 + x34) * 0.5;
    y234 = (y23 + y34) * 0.5;
    x1234 = (x123 + x234) * 0.5;
    y1234 = (y123 + y234) * 0.5;
    tesselateBezier(ctx, x1, y1, x12, y12, x123, y123, x1234, y1234, level + 1, 0);
    tesselateBezier(ctx, x1234, y1234, x234, y234, x34, y34, x4, y4, level + 1, type);
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImU6L2QwMDQ1MjUyMC9HaXRodWIvZW5naW5lL2NvY29zL3VpL2Fzc2VtYmxlci9ncmFwaGljcy9oZWxwZXIudHMiXSwibmFtZXMiOlsiUEkiLCJNYXRoIiwibWluIiwibWF4IiwiY29zIiwic2luIiwiYWJzIiwic2lnbiIsIktBUFBBOTAiLCJhcmMiLCJjdHgiLCJjeCIsImN5IiwiciIsInN0YXJ0QW5nbGUiLCJlbmRBbmdsZSIsImNvdW50ZXJjbG9ja3dpc2UiLCJhIiwiZGEiLCJoZGEiLCJrYXBwYSIsImR4IiwiZHkiLCJ4IiwieSIsInRhbngiLCJ0YW55IiwicHgiLCJweSIsInB0YW54IiwicHRhbnkiLCJpIiwibmRpdnMiLCJtb3ZlVG8iLCJiZXppZXJDdXJ2ZVRvIiwiZWxsaXBzZSIsInJ4IiwicnkiLCJjbG9zZSIsInJvdW5kUmVjdCIsInciLCJoIiwicmVjdCIsImxpbmVUbyIsInRlc3NlbGF0ZUJlemllciIsIngxIiwieTEiLCJ4MiIsInkyIiwieDMiLCJ5MyIsIng0IiwieTQiLCJsZXZlbCIsInR5cGUiLCJ4MTIiLCJ5MTIiLCJ4MjMiLCJ5MjMiLCJ4MzQiLCJ5MzQiLCJ4MTIzIiwieTEyMyIsIngyMzQiLCJ5MjM0IiwieDEyMzQiLCJ5MTIzNCIsImQyIiwiZDMiLCJ0ZXNzVG9sIiwiYWRkUG9pbnQiLCJQb2ludEZsYWdzIiwiUFRfQkVWRUwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTRCQSxNQUFNQSxFQUFFLEdBQUdDLElBQUksQ0FBQ0QsRUFBaEI7QUFDQSxNQUFNRSxHQUFHLEdBQUdELElBQUksQ0FBQ0MsR0FBakI7QUFDQSxNQUFNQyxHQUFHLEdBQUdGLElBQUksQ0FBQ0UsR0FBakI7QUFDQSxNQUFNQyxHQUFHLEdBQUdILElBQUksQ0FBQ0csR0FBakI7QUFDQSxNQUFNQyxHQUFHLEdBQUdKLElBQUksQ0FBQ0ksR0FBakI7QUFDQSxNQUFNQyxHQUFHLEdBQUdM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QUFwQixFQUEwQkMsSUFBMUIsRUFBZ0NMLEdBQWhDLEVBQXFDQyxHQUFyQyxFQUEwQ1QsRUFBMUMsRUFBOENDLEVBQTlDLEVBQWtEQyxLQUFLLEdBQUcsQ0FBMUQsRUFBNkRDLElBQTdELENBQWY7QUFDSCIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cclxuXHJcbiBodHRwOi8vd3d3LmNvY29zLmNvbVxyXG5cclxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcclxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZW5naW5lIHNvdXJjZSBjb2RlICh0aGUgXCJTb2Z0d2FyZVwiKSwgYSBsaW1pdGVkLFxyXG4gd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxyXG4gdG8gdXNlIENvY29zIENyZWF0b3Igc29sZWx5IHRvIGRldmVsb3AgZ2FtZXMgb24geW91ciB0YXJnZXQgcGxhdGZvcm1zLiBZb3Ugc2hhbGxcclxuIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcclxuIHVzZWQgZm9yIGRldmVsb3BpbmcgZ2FtZXMuIFlvdSBhcmUgbm90IGdyYW50ZWQgdG8gcHVibGlzaCwgZGlzdHJpYnV0ZSxcclxuIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiBDb2NvcyBDcmVhdG9yLlxyXG5cclxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXHJcbiBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC4gcmVzZXJ2ZXMgYWxsIHJpZ2h0cyBub3QgZXhwcmVzc2x5IGdyYW50ZWQgdG8geW91LlxyXG5cclxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcclxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxyXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXHJcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXHJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxyXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxyXG4gVEhFIFNPRlRXQVJFLlxyXG4qL1xyXG5cclxuaW1wb3J0IHsgUG9pbnRGbGFncyB9IGZyb20gJy4vdHlwZXMnO1xyXG5pbXBvcnQgeyBJbXBsIH0gZnJvbSAnLi93ZWJnbC9pbXBsJztcclxuXHJcbmNvbnN0IFBJID0gTWF0aC5QSTtcclxuY29uc3QgbWluID0gTWF0aC5taW47XHJcbmNvbnN0IG1heCA9IE1hdGgubWF4O1xyXG5jb25zdCBjb3MgPSBNYXRoLmNvcztcclxuY29uc3Qgc2luID0gTWF0aC5zaW47XHJcbmNvbnN0IGFicyA9IE1hdGguYWJzO1xyXG5jb25zdCBzaWduID0gTWF0aC5zaWduO1xyXG5cclxuY29uc3QgS0FQUEE5MCA9IDAuNTUyMjg0NzQ5MztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhcmMgKGN0eDogSW1wbCwgY3g6IG51bWJlciwgY3k6IG51bWJlciwgcjogbnVtYmVyLCBzdGFydEFuZ2xlOiBudW1iZXIsIGVuZEFuZ2xlOiBudW1iZXIsIGNvdW50ZXJjbG9ja3dpc2U6IGJvb2xlYW4pIHtcclxuICAgIGNvdW50ZXJjbG9ja3dpc2UgPSBjb3VudGVyY2xvY2t3aXNlIHx8IGZhbHNlO1xyXG5cclxuICAgIGxldCBhID0gMDtcclxuICAgIGxldCBkYSA9IDA7XHJcbiAgICBsZXQgaGRhID0gMDtcclxuICAgIGxldCBrYXBwYSA9IDA7XHJcbiAgICBsZXQgZHggPSAwO1xyXG4gICAgbGV0IGR5ID0gMDtcclxuICAgIGxldCB4ID0gMDtcclxuICAgIGxldCB5ID0gMDtcclxuICAgIGxldCB0YW54ID0gMDtcclxuICAgIGxldCB0YW55ID0gMDtcclxuICAgIGxldCBweCA9IDA7XHJcbiAgICBsZXQgcHkgPSAwO1xyXG4gICAgbGV0IHB0YW54ID0gMDtcclxuICAgIGxldCBwdGFueSA9IDA7XHJcbiAgICBsZXQgaSA9IDA7XHJcbiAgICBsZXQgbmRpdnMgPSAwO1xyXG5cclxuICAgIC8vIENsYW1wIGFuZ2xlc1xyXG4gICAgZGEgPSBlbmRBbmdsZSAtIHN0YXJ0QW5nbGU7XHJcbiAgICBpZiAoY291bnRlcmNsb2Nrd2lzZSkge1xyXG4gICAgICAgIGlmIChhYnMoZGEpID49IFBJICogMikge1xyXG4gICAgICAgICAgICBkYSA9IFBJICogMjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB3aGlsZSAoZGEgPCAwKSB7IGRhICs9IFBJICogMjsgfVxyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKGFicyhkYSkgPj0gUEkgKiAyKSB7XHJcbiAgICAgICAgICAgIGRhID0gLVBJICogMjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB3aGlsZSAoZGEgPiAwKSB7IGRhIC09IFBJICogMjsgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBTcGxpdCBhcmMgaW50byBtYXggOTAgZGVncmVlIHNlZ21lbnRzLlxyXG4gICAgbmRpdnMgPSBtYXgoMSwgbWluKGFicyhkYSkgLyAoUEkgKiAwLjUpICsgMC41LCA1KSkgfCAwO1xyXG4gICAgaGRhID0gZGEgLyBuZGl2cyAvIDIuMDtcclxuICAgIGthcHBhID0gYWJzKDQuMCAvIDMuMCAqICgxIC0gY29zKGhkYSkpIC8gc2luKGhkYSkpO1xyXG5cclxuICAgIGlmICghY291bnRlcmNsb2Nrd2lzZSkgeyBrYXBwYSA9IC1rYXBwYTsgfVxyXG5cclxuICAgIGZvciAoaSA9IDA7IGkgPD0gbmRpdnM7IGkrKykge1xyXG4gICAgICAgIGEgPSBzdGFydEFuZ2xlICsgZGEgKiAoaSAvIG5kaXZzKTtcclxuICAgICAgICBkeCA9IGNvcyhhKTtcclxuICAgICAgICBkeSA9IHNpbihhKTtcclxuICAgICAgICB4ID0gY3ggKyBkeCAqIHI7XHJcbiAgICAgICAgeSA9IGN5ICsgZHkgKiByO1xyXG4gICAgICAgIHRhbnggPSAtZHkgKiByICoga2FwcGE7XHJcbiAgICAgICAgdGFueSA9IGR4ICogciAqIGthcHBhO1xyXG5cclxuICAgICAgICBpZiAoaSA9PT0gMCkge1xyXG4gICAgICAgICAgICBjdHgubW92ZVRvKHgsIHkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGN0eC5iZXppZXJDdXJ2ZVRvKHB4ICsgcHRhbngsIHB5ICsgcHRhbnksIHggLSB0YW54LCB5IC0gdGFueSwgeCwgeSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHB4ID0geDtcclxuICAgICAgICBweSA9IHk7XHJcbiAgICAgICAgcHRhbnggPSB0YW54O1xyXG4gICAgICAgIHB0YW55ID0gdGFueTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGVsbGlwc2UgKGN0eDogSW1wbCwgY3g6IG51bWJlciwgY3k6IG51bWJlciwgcng6IG51bWJlciwgcnk6IG51bWJlcikge1xyXG4gICAgY3R4Lm1vdmVUbyhjeCAtIHJ4LCBjeSk7XHJcbiAgICBjdHguYmV6aWVyQ3VydmVUbyhjeCAtIHJ4LCBjeSArIHJ5ICogS0FQUEE5MCwgY3ggLSByeCAqIEtBUFBBOTAsIGN5ICsgcnksIGN4LCBjeSArIHJ5KTtcclxuICAgIGN0eC5iZXppZXJDdXJ2ZVRvKGN4ICsgcnggKiBLQVBQQTkwLCBjeSArIHJ5LCBjeCArIHJ4LCBjeSArIHJ5ICogS0FQUEE5MCwgY3ggKyByeCwgY3kpO1xyXG4gICAgY3R4LmJlemllckN1cnZlVG8oY3ggKyByeCwgY3kgLSByeSAqIEtBUFBBOTAsIGN4ICsgcnggKiBLQVBQQTkwLCBjeSAtIHJ5LCBjeCwgY3kgLSByeSk7XHJcbiAgICBjdHguYmV6aWVyQ3VydmVUbyhjeCAtIHJ4ICogS0FQUEE5MCwgY3kgLSByeSwgY3ggLSByeCwgY3kgLSByeSAqIEtBUFBBOTAsIGN4IC0gcngsIGN5KTtcclxuICAgIGN0eC5jbG9zZSgpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcm91bmRSZWN0IChjdHg6IEltcGwsIHg6IG51bWJlciwgeTogbnVtYmVyLCB3OiBudW1iZXIsIGg6IG51bWJlciwgcjogbnVtYmVyKSB7XHJcbiAgICBpZiAociA8IDAuMSkge1xyXG4gICAgICAgIGN0eC5yZWN0KHgsIHksIHcsIGgpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3QgcnggPSBtaW4ociwgYWJzKHcpICogMC41KSAqIHNpZ24odyk7XHJcbiAgICAgICAgY29uc3QgcnkgPSBtaW4ociwgYWJzKGgpICogMC41KSAqIHNpZ24oaCk7XHJcblxyXG4gICAgICAgIGN0eC5tb3ZlVG8oeCwgeSArIHJ5KTtcclxuICAgICAgICBjdHgubGluZVRvKHgsIHkgKyBoIC0gcnkpO1xyXG4gICAgICAgIGN0eC5iZXppZXJDdXJ2ZVRvKHgsIHkgKyBoIC0gcnkgKiAoMSAtIEtBUFBBOTApLCB4ICsgcnggKiAoMSAtIEtBUFBBOTApLCB5ICsgaCwgeCArIHJ4LCB5ICsgaCk7XHJcbiAgICAgICAgY3R4LmxpbmVUbyh4ICsgdyAtIHJ4LCB5ICsgaCk7XHJcbiAgICAgICAgY3R4LmJlemllckN1cnZlVG8oeCArIHcgLSByeCAqICgxIC0gS0FQUEE5MCksIHkgKyBoLCB4ICsgdywgeSArIGggLSByeSAqICgxIC0gS0FQUEE5MCksIHggKyB3LCB5ICsgaCAtIHJ5KTtcclxuICAgICAgICBjdHgubGluZVRvKHggKyB3LCB5ICsgcnkpO1xyXG4gICAgICAgIGN0eC5iZXppZXJDdXJ2ZVRvKHggKyB3LCB5ICsgcnkgKiAoMSAtIEtBUFBBOTApLCB4ICsgdyAtIHJ4ICogKDEgLSBLQVBQQTkwKSwgeSwgeCArIHcgLSByeCwgeSk7XHJcbiAgICAgICAgY3R4LmxpbmVUbyh4ICsgcngsIHkpO1xyXG4gICAgICAgIGN0eC5iZXppZXJDdXJ2ZVRvKHggKyByeCAqICgxIC0gS0FQUEE5MCksIHksIHgsIHkgKyByeSAqICgxIC0gS0FQUEE5MCksIHgsIHkgKyByeSk7XHJcbiAgICAgICAgY3R4LmNsb3NlKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0ZXNzZWxhdGVCZXppZXIgKFxyXG4gICAgY3R4OiBJbXBsLCB4MTogbnVtYmVyLCB5MTogbnVtYmVyLFxyXG4gICAgeDI6IG51bWJlciwgeTI6IG51bWJlcixcclxuICAgIHgzOiBudW1iZXIsIHkzOiBudW1iZXIsXHJcbiAgICB4NDogbnVtYmVyLCB5NDogbnVtYmVyLFxyXG4gICAgbGV2ZWw6IG51bWJlciwgdHlwZTogbnVtYmVyLFxyXG4pIHtcclxuICAgIGxldCB4MTIgPSAwO1xyXG4gICAgbGV0IHkxMiA9IDA7XHJcbiAgICBsZXQgeDIzID0gMDtcclxuICAgIGxldCB5MjMgPSAwO1xyXG4gICAgbGV0IHgzNCA9IDA7XHJcbiAgICBsZXQgeTM0ID0gMDtcclxuICAgIGxldCB4MTIzID0gMDtcclxuICAgIGxldCB5MTIzID0gMDtcclxuICAgIGxldCB4MjM0ID0gMDtcclxuICAgIGxldCB5MjM0ID0gMDtcclxuICAgIGxldCB4MTIzNCA9IDA7XHJcbiAgICBsZXQgeTEyMzQgPSAwO1xyXG4gICAgbGV0IGR4ID0gMDtcclxuICAgIGxldCBkeSA9IDA7XHJcbiAgICBsZXQgZDIgPSAwO1xyXG4gICAgbGV0IGQzID0gMDtcclxuXHJcbiAgICBpZiAobGV2ZWwgPiAxMCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB4MTIgPSAoeDEgKyB4MikgKiAwLjU7XHJcbiAgICB5MTIgPSAoeTEgKyB5MikgKiAwLjU7XHJcbiAgICB4MjMgPSAoeDIgKyB4MykgKiAwLjU7XHJcbiAgICB5MjMgPSAoeTIgKyB5MykgKiAwLjU7XHJcbiAgICB4MzQgPSAoeDMgKyB4NCkgKiAwLjU7XHJcbiAgICB5MzQgPSAoeTMgKyB5NCkgKiAwLjU7XHJcbiAgICB4MTIzID0gKHgxMiArIHgyMykgKiAwLjU7XHJcbiAgICB5MTIzID0gKHkxMiArIHkyMykgKiAwLjU7XHJcblxyXG4gICAgZHggPSB4NCAtIHgxO1xyXG4gICAgZHkgPSB5NCAtIHkxO1xyXG4gICAgZDIgPSBhYnMoKHgyIC0geDQpICogZHkgLSAoeTIgLSB5NCkgKiBkeCk7XHJcbiAgICBkMyA9IGFicygoeDMgLSB4NCkgKiBkeSAtICh5MyAtIHk0KSAqIGR4KTtcclxuXHJcbiAgICBpZiAoKGQyICsgZDMpICogKGQyICsgZDMpIDwgY3R4LnRlc3NUb2wgKiAoZHggKiBkeCArIGR5ICogZHkpKSB7XHJcbiAgICAgICAgY3R4LmFkZFBvaW50KHg0LCB5NCwgdHlwZSA9PT0gMCA/IHR5cGUgfCBQb2ludEZsYWdzLlBUX0JFVkVMIDogdHlwZSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHgyMzQgPSAoeDIzICsgeDM0KSAqIDAuNTtcclxuICAgIHkyMzQgPSAoeTIzICsgeTM0KSAqIDAuNTtcclxuICAgIHgxMjM0ID0gKHgxMjMgKyB4MjM0KSAqIDAuNTtcclxuICAgIHkxMjM0ID0gKHkxMjMgKyB5MjM0KSAqIDAuNTtcclxuXHJcbiAgICB0ZXNzZWxhdGVCZXppZXIoY3R4LCB4MSwgeTEsIHgxMiwgeTEyLCB4MTIzLCB5MTIzLCB4MTIzNCwgeTEyMzQsIGxldmVsICsgMSwgMCk7XHJcbiAgICB0ZXNzZWxhdGVCZXppZXIoY3R4LCB4MTIzNCwgeTEyMzQsIHgyMzQsIHkyMzQsIHgzNCwgeTM0LCB4NCwgeTQsIGxldmVsICsgMSwgdHlwZSk7XHJcbn1cclxuIl19