(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../global-exports.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../global-exports.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.globalExports);
    global.bezier = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _globalExports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.bezier = bezier;
  _exports.bezierByTime = bezierByTime;

  /**
   * @category animation
   */
  function bezier(C1, C2, C3, C4, t) {
    var t1 = 1 - t;
    return C1 * t1 * t1 * t1 + C2 * 3 * t1 * t1 * t + C3 * 3 * t1 * t * t + C4 * t * t * t;
  }

  _globalExports.legacyCC.bezier = bezier; // var sin = Math.sin;

  var cos = Math.cos;
  var acos = Math.acos;
  var max = Math.max; // var atan2 = Math.atan2;

  var pi = Math.PI;
  var tau = 2 * pi;
  var sqrt = Math.sqrt;

  function crt(v) {
    if (v < 0) {
      return -Math.pow(-v, 1 / 3);
    } else {
      return Math.pow(v, 1 / 3);
    }
  } // Modified from http://jsbin.com/yibipofeqi/1/edit, optimized for animations.
  // The origin Cardano's algorithm is based on http://www.trans4mind.com/personal_development/mathematics/polynomials/cubicAlgebra.htm


  function cardano(curve, x) {
    // align curve with the intersecting line:
    // var line = {p1: {x: x, y: 0}, p2: {x: x, y: 1}};
    // var aligned = align(curve, line);
    //// and rewrite from [a(1-t)^3 + 3bt(1-t)^2 + 3c(1-t)t^2 + dt^3] form
    //    pa = aligned[0].y,
    //    pb = aligned[1].y,
    //    pc = aligned[2].y,
    //    pd = aligned[3].y;
    ////// curve = [{x:0, y:1}, {x: curve[0], y: 1-curve[1]}, {x: curve[2], y: 1-curve[3]}, {x:1, y:0}];
    var pa = x - 0;
    var pb = x - curve[0];
    var pc = x - curve[2];
    var pd = x - 1; // to [t^3 + at^2 + bt + c] form:

    var pa3 = pa * 3;
    var pb3 = pb * 3;
    var pc3 = pc * 3;
    var d = -pa + pb3 - pc3 + pd;
    var rd = 1 / d;
    var r3 = 1 / 3;
    var a = (pa3 - 6 * pb + pc3) * rd;
    var a3 = a * r3;
    var b = (-pa3 + pb3) * rd;
    var c = pa * rd; // then, determine p and q:

    var p = (3 * b - a * a) * r3;
    var p3 = p * r3;
    var q = (2 * a * a * a - 9 * a * b + 27 * c) / 27;
    var q2 = q / 2; // and determine the discriminant:

    var discriminant = q2 * q2 + p3 * p3 * p3; // and some reserved variables

    var u1;
    var v1;
    var x1;
    var x2;
    var x3; // If the discriminant is negative, use polar coordinates
    // to get around square roots of negative numbers

    if (discriminant < 0) {
      var mp3 = -p * r3;
      var mp33 = mp3 * mp3 * mp3;
      var r = sqrt(mp33); // compute cosphi corrected for IEEE float rounding:

      var t = -q / (2 * r);
      var cosphi = t < -1 ? -1 : t > 1 ? 1 : t;
      var phi = acos(cosphi);
      var crtr = crt(r);
      var t1 = 2 * crtr;
      x1 = t1 * cos(phi * r3) - a3;
      x2 = t1 * cos((phi + tau) * r3) - a3;
      x3 = t1 * cos((phi + 2 * tau) * r3) - a3; // choose best percentage

      if (0 <= x1 && x1 <= 1) {
        if (0 <= x2 && x2 <= 1) {
          if (0 <= x3 && x3 <= 1) {
            return max(x1, x2, x3);
          } else {
            return max(x1, x2);
          }
        } else if (0 <= x3 && x3 <= 1) {
          return max(x1, x3);
        } else {
          return x1;
        }
      } else {
        if (0 <= x2 && x2 <= 1) {
          if (0 <= x3 && x3 <= 1) {
            return max(x2, x3);
          } else {
            return x2;
          }
        } else {
          return x3;
        }
      }
    } else if (discriminant === 0) {
      u1 = q2 < 0 ? crt(-q2) : -crt(q2);
      x1 = 2 * u1 - a3;
      x2 = -u1 - a3; // choose best percentage

      if (0 <= x1 && x1 <= 1) {
        if (0 <= x2 && x2 <= 1) {
          return max(x1, x2);
        } else {
          return x1;
        }
      } else {
        return x2;
      }
    } // one real root, and two imaginary roots
    else {
        var sd = sqrt(discriminant);
        u1 = crt(-q2 + sd);
        v1 = crt(q2 + sd);
        x1 = u1 - v1 - a3;
        return x1;
      }
  }

  function bezierByTime(controlPoints, x) {
    var percent = cardano(controlPoints, x); // t

    var p0y = 0; // a

    var p1y = controlPoints[1]; // b

    var p2y = controlPoints[3]; // c

    var p3y = 1; // d

    var t1 = 1 - percent;
    return p0y * t1 * t1 * t1 + p1y * 3 * percent * t1 * t1 + p2y * 3 * percent * percent * t1 + p3y * percent * percent * percent;
  }

  _globalExports.legacyCC.bezierByTime = bezierByTime;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,