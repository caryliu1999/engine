(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../utils/js.js", "../assets/raw-asset.js", "../global-exports.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../utils/js.js"), require("../assets/raw-asset.js"), require("../global-exports.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.js, global.rawAsset, global.globalExports);
    global.autoReleaseUtils = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _js, _rawAsset, _globalExports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.autoRelease = autoRelease;
  _exports.getDependsRecursively = getDependsRecursively;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function parseDepends(key, parsed) {
    var item = _globalExports.legacyCC.loader.getItem(key);

    if (item) {
      var depends = item.dependKeys;

      if (depends) {
        for (var i = 0; i < depends.length; i++) {
          var depend = depends[i];

          if (!parsed[depend]) {
            parsed[depend] = true;
            parseDepends(depend, parsed);
          }
        }
      }
    }
  }

  function visitAsset(asset, excludeMap) {
    // Skip assets generated programmatically or by user (e.g. label texture)
    if (!asset._uuid) {
      return;
    }

    var key = _globalExports.legacyCC.loader._getReferenceKey(asset);

    if (!excludeMap[key]) {
      excludeMap[key] = true;
      parseDepends(key, excludeMap);
    }
  }

  function visitComponent(comp, excludeMap) {
    var props = Object.getOwnPropertyNames(comp);

    for (var i = 0; i < props.length; i++) {
      var value = comp[props[i]];

      if (_typeof(value) === 'object' && value) {
        if (Array.isArray(value)) {
          for (var j = 0; j < value.length; j++) {
            var val = value[j];

            if (val instanceof _rawAsset.RawAsset) {
              visitAsset(val, excludeMap);
            }
          }
        } else if (!value.constructor || value.constructor === Object) {
          var keys = Object.getOwnPropertyNames(value);

          for (var _j = 0; _j < keys.length; _j++) {
            var _val = value[keys[_j]];

            if (_val instanceof _rawAsset.RawAsset) {
              visitAsset(_val, excludeMap);
            }
          }
        } else if (value instanceof _rawAsset.RawAsset) {
          visitAsset(value, excludeMap);
        }
      }
    }
  }

  function visitNode(node, excludeMap) {
    for (var i = 0; i < node._components.length; i++) {
      visitComponent(node._components[i], excludeMap);
    }

    for (var _i = 0; _i < node._children.length; _i++) {
      visitNode(node._children[_i], excludeMap);
    }
  } // do auto release


  function autoRelease(oldSceneAssets, nextSceneAssets, persistNodes) {
    var releaseSettings = _globalExports.legacyCC.loader._autoReleaseSetting;
    var excludeMap = (0, _js.createMap)(); // collect next scene assets

    if (nextSceneAssets) {
      for (var i = 0; i < nextSceneAssets.length; i++) {
        excludeMap[nextSceneAssets[i]] = true;
      }
    } // collect assets used by persist nodes


    for (var _i2 = 0; _i2 < persistNodes.length; _i2++) {
      visitNode(persistNodes[_i2], excludeMap);
    } // remove ununsed scene assets


    if (oldSceneAssets) {
      for (var _i3 = 0; _i3 < oldSceneAssets.length; _i3++) {
        var key = oldSceneAssets[_i3];

        if (releaseSettings[key] !== false && !excludeMap[key]) {
          _globalExports.legacyCC.loader.release(key);
        }
      }
    } // remove auto release assets
    // (releasing asset will change _autoReleaseSetting, so don't use for-in)


    var keys = Object.keys(releaseSettings);

    for (var _i4 = 0; _i4 < keys.length; _i4++) {
      var _key = keys[_i4];

      if (releaseSettings[_key] === true && !excludeMap[_key]) {
        _globalExports.legacyCC.loader.release(_key);
      }
    }
  } // get dependencies not including self


  function getDependsRecursively(key) {
    var depends = {};
    parseDepends(key, depends);
    return Object.keys(depends);
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,