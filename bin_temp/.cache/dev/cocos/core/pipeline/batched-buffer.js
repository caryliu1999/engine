(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../gfx/index.js", "../gfx/buffer.js", "../gfx/input-assembler.js", "../math/index.js", "./define.js", "../renderer/core/memory-pools.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../gfx/index.js"), require("../gfx/buffer.js"), require("../gfx/input-assembler.js"), require("../math/index.js"), require("./define.js"), require("../renderer/core/memory-pools.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.buffer, global.inputAssembler, global.index, global.define, global.memoryPools);
    global.batchedBuffer = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _buffer, _inputAssembler, _index2, _define, _memoryPools) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.BatchedBuffer = void 0;

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  var BatchedBuffer = /*#__PURE__*/function () {
    _createClass(BatchedBuffer, null, [{
      key: "get",
      value: function get(pass) {
        var extraKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var buffers = BatchedBuffer._buffers;
        if (!buffers.has(pass)) buffers.set(pass, {});
        var record = buffers.get(pass);
        return record[extraKey] || (record[extraKey] = new BatchedBuffer(pass));
      }
    }]);

    function BatchedBuffer(pass) {
      _classCallCheck(this, BatchedBuffer);

      this.batches = [];
      this.dynamicOffsets = [];
      this._device = void 0;
      this._device = pass.device;
    }

    _createClass(BatchedBuffer, [{
      key: "destroy",
      value: function destroy() {
        for (var i = 0; i < this.batches.length; ++i) {
          var batch = this.batches[i];

          for (var j = 0; j < batch.vbs.length; ++j) {
            batch.vbs[j].destroy();
          }

          batch.vbIdx.destroy();
          batch.ia.destroy();
          batch.ubo.destroy();
        }

        this.batches.length = 0;
      }
    }, {
      key: "merge",
      value: function merge(subModel, passIdx, ro) {
        var flatBuffers = subModel.subMesh.flatBuffers;

        if (flatBuffers.length === 0) {
          return;
        }

        var vbSize = 0;
        var vbIdxSize = 0;
        var vbCount = flatBuffers[0].count;

        var hPass = _memoryPools.SubModelPool.get(subModel.handle, _memoryPools.SubModelView.PASS_0 + passIdx);

        var hShader = _memoryPools.SubModelPool.get(subModel.handle, _memoryPools.SubModelView.SHADER_0 + passIdx);

        var descriptorSet = subModel.descriptorSet;
        var isBatchExist = false;

        for (var i = 0; i < this.batches.length; ++i) {
          var batch = this.batches[i];

          if (batch.vbs.length === flatBuffers.length && batch.mergeCount < _define.UBOLocalBatched.BATCHING_COUNT) {
            isBatchExist = true;

            for (var j = 0; j < batch.vbs.length; ++j) {
              var vb = batch.vbs[j];

              if (vb.stride !== flatBuffers[j].stride) {
                isBatchExist = false;
                break;
              }
            }

            if (isBatchExist) {
              for (var _j = 0; _j < batch.vbs.length; ++_j) {
                var flatBuff = flatBuffers[_j];
                var batchVB = batch.vbs[_j];
                var vbBuf = batch.vbDatas[_j];
                vbSize = (vbCount + batch.vbCount) * flatBuff.stride;

                if (vbSize > batchVB.size) {
                  batchVB.resize(vbSize);
                  batch.vbDatas[_j] = new Uint8Array(vbSize);

                  batch.vbDatas[_j].set(vbBuf);
                }

                batch.vbDatas[_j].set(flatBuff.buffer, batch.vbCount * flatBuff.stride);
              }

              var vbIdxBuf = batch.vbIdxData;
              vbIdxSize = (vbCount + batch.vbCount) * 4;

              if (vbIdxSize > batch.vbIdx.size) {
                batch.vbIdx.resize(vbIdxSize);
                batch.vbIdxData = new Float32Array(vbIdxSize / Float32Array.BYTES_PER_ELEMENT);
                batch.vbIdxData.set(vbIdxBuf);
                vbIdxBuf = batch.vbIdxData;
              }

              var start = batch.vbCount;
              var end = start + vbCount;
              var mergeCount = batch.mergeCount;

              if (vbIdxBuf[start] !== mergeCount || vbIdxBuf[end - 1] !== mergeCount) {
                for (var _j2 = start; _j2 < end; _j2++) {
                  vbIdxBuf[_j2] = mergeCount + 0.1; // guard against underflow
                }
              } // update world matrix


              _index2.Mat4.toArray(batch.uboData, ro.model.transform.worldMatrix, _define.UBOLocalBatched.MAT_WORLDS_OFFSET + batch.mergeCount * 16);

              if (!batch.mergeCount) {
                descriptorSet.bindBuffer(_define.UBOLocalBatched.BINDING, batch.ubo);
                descriptorSet.update();
                batch.hPass = hPass;
                batch.hShader = hShader;
                batch.descriptorSet = descriptorSet;
              }

              ++batch.mergeCount;
              batch.vbCount += vbCount;
              batch.ia.vertexCount += vbCount;
              return;
            }
          }
        } // Create a new batch


        var vbs = [];
        var vbDatas = [];
        var totalVBs = [];

        for (var _i = 0; _i < flatBuffers.length; ++_i) {
          var _flatBuff = flatBuffers[_i];

          var newVB = this._device.createBuffer(new _buffer.GFXBufferInfo(_index.GFXBufferUsageBit.VERTEX | _index.GFXBufferUsageBit.TRANSFER_DST, _index.GFXMemoryUsageBit.HOST | _index.GFXMemoryUsageBit.DEVICE, _flatBuff.count * _flatBuff.stride, _flatBuff.stride));

          newVB.update(_flatBuff.buffer.buffer);
          vbs.push(newVB);
          vbDatas.push(new Uint8Array(newVB.size));
          totalVBs.push(newVB);
        }

        var vbIdx = this._device.createBuffer(new _buffer.GFXBufferInfo(_index.GFXBufferUsageBit.VERTEX | _index.GFXBufferUsageBit.TRANSFER_DST, _index.GFXMemoryUsageBit.HOST | _index.GFXMemoryUsageBit.DEVICE, vbCount * 4, 4));

        var vbIdxData = new Float32Array(vbCount);
        vbIdxData.fill(0);
        vbIdx.update(vbIdxData);
        totalVBs.push(vbIdx);
        var attributes = subModel.inputAssembler.attributes;
        var attrs = new Array(attributes.length + 1);

        for (var a = 0; a < attributes.length; ++a) {
          attrs[a] = attributes[a];
        }

        attrs[attributes.length] = new _inputAssembler.GFXAttribute('a_dyn_batch_id', _index.GFXFormat.R32F, false, flatBuffers.length);
        var iaInfo = new _inputAssembler.GFXInputAssemblerInfo(attrs, totalVBs);

        var ia = this._device.createInputAssembler(iaInfo);

        var ubo = this._device.createBuffer(new _buffer.GFXBufferInfo(_index.GFXBufferUsageBit.UNIFORM | _index.GFXBufferUsageBit.TRANSFER_DST, _index.GFXMemoryUsageBit.HOST | _index.GFXMemoryUsageBit.DEVICE, _define.UBOLocalBatched.SIZE, _define.UBOLocalBatched.SIZE));

        descriptorSet.bindBuffer(_define.UBOLocalBatched.BINDING, ubo);
        descriptorSet.update();
        var uboData = new Float32Array(_define.UBOLocalBatched.COUNT);

        _index2.Mat4.toArray(uboData, ro.model.transform.worldMatrix, _define.UBOLocalBatched.MAT_WORLDS_OFFSET);

        this.batches.push({
          mergeCount: 1,
          vbs: vbs,
          vbDatas: vbDatas,
          vbIdx: vbIdx,
          vbIdxData: vbIdxData,
          vbCount: vbCount,
          ia: ia,
          ubo: ubo,
          uboData: uboData,
          hPass: hPass,
          hShader: hShader,
          descriptorSet: descriptorSet
        });
      }
    }, {
      key: "clear",
      value: function clear() {
        for (var i = 0; i < this.batches.length; ++i) {
          var batch = this.batches[i];
          batch.vbCount = 0;
          batch.mergeCount = 0;
          batch.ia.vertexCount = 0;
        }
      }
    }]);

    return BatchedBuffer;
  }();

  _exports.BatchedBuffer = BatchedBuffer;
  BatchedBuffer._buffers = new Map();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,