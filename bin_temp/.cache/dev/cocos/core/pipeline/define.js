(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../scene-graph/layers.js", "../global-exports.js", "../gfx/index.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../scene-graph/layers.js"), require("../global-exports.js"), require("../gfx/index.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.layers, global.globalExports, global.index);
    global.define = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _layers, _globalExports, _index) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.MODEL_ALWAYS_MASK = _exports.CAMERA_EDITOR_MASK = _exports.CAMERA_DEFAULT_MASK = _exports.UNIFORM_SPRITE_TEXTURE_BINDING = _exports.UNIFORM_LIGHTMAP_TEXTURE_BINDING = _exports.UNIFORM_TANGENT_MORPH_TEXTURE_BINDING = _exports.UNIFORM_NORMAL_MORPH_TEXTURE_BINDING = _exports.UNIFORM_POSITION_MORPH_TEXTURE_BINDING = _exports.UNIFORM_JOINT_TEXTURE_BINDING = _exports.UBOMorph = _exports.UBOSkinning = _exports.INST_JOINT_ANIM_INFO = _exports.UBOSkinningAnimation = _exports.UBOSkinningTexture = _exports.JOINT_UNIFORM_CAPACITY = _exports.UBOForwardLight = _exports.UBOLocalBatched = _exports.INST_MAT_WORLD = _exports.UBOLocal = _exports.UNIFORM_ENVIRONMENT_BINDING = _exports.UNIFORM_GBUFFER_EMISSIVEMAP_BINDING = _exports.UNIFORM_GBUFFER_NORMALMAP_BINDING = _exports.UNIFORM_GBUFFER_POSITIONMAP_BINDING = _exports.UNIFORM_GBUFFER_ALBEDOMAP_BINDING = _exports.UNIFORM_SHADOWMAP_BINDING = _exports.UBOShadow = _exports.UBOGlobal = _exports.bindingMappingInfo = _exports.SetIndex = _exports.ModelLocalBindings = _exports.PipelineGlobalBindings = _exports.localDescriptorSetLayout = _exports.globalDescriptorSetLayout = _exports.RenderPriority = _exports.RenderPassStage = _exports.PIPELINE_FLOW_TONEMAP = _exports.PIPELINE_FLOW_SMAA = _exports.PIPELINE_FLOW_SHADOW = _exports.PIPELINE_FLOW_LIGHTING = _exports.PIPELINE_FLOW_GBUFFER = _exports.PIPELINE_FLOW_FORWARD = void 0;

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var PIPELINE_FLOW_FORWARD = 'ForwardFlow';
  _exports.PIPELINE_FLOW_FORWARD = PIPELINE_FLOW_FORWARD;
  var PIPELINE_FLOW_GBUFFER = 'GbufferFlow';
  _exports.PIPELINE_FLOW_GBUFFER = PIPELINE_FLOW_GBUFFER;
  var PIPELINE_FLOW_LIGHTING = 'LightingFlow';
  _exports.PIPELINE_FLOW_LIGHTING = PIPELINE_FLOW_LIGHTING;
  var PIPELINE_FLOW_SHADOW = 'ShadowFlow';
  _exports.PIPELINE_FLOW_SHADOW = PIPELINE_FLOW_SHADOW;
  var PIPELINE_FLOW_SMAA = 'SMAAFlow';
  _exports.PIPELINE_FLOW_SMAA = PIPELINE_FLOW_SMAA;
  var PIPELINE_FLOW_TONEMAP = 'ToneMapFlow';
  /**
   * @en The predefined render pass stage ids
   * @zh 预设的渲染阶段。
   */

  _exports.PIPELINE_FLOW_TONEMAP = PIPELINE_FLOW_TONEMAP;
  var RenderPassStage;
  _exports.RenderPassStage = RenderPassStage;

  (function (RenderPassStage) {
    RenderPassStage[RenderPassStage["DEFAULT"] = 100] = "DEFAULT";
    RenderPassStage[RenderPassStage["UI"] = 200] = "UI";
  })(RenderPassStage || (_exports.RenderPassStage = RenderPassStage = {}));

  _globalExports.legacyCC.RenderPassStage = RenderPassStage;
  /**
   * @en The predefined render priorities
   * @zh 预设的渲染优先级。
   */

  var RenderPriority;
  /**
   * @en Render object interface
   * @zh 渲染对象接口。
   */

  _exports.RenderPriority = RenderPriority;

  (function (RenderPriority) {
    RenderPriority[RenderPriority["MIN"] = 0] = "MIN";
    RenderPriority[RenderPriority["MAX"] = 255] = "MAX";
    RenderPriority[RenderPriority["DEFAULT"] = 128] = "DEFAULT";
  })(RenderPriority || (_exports.RenderPriority = RenderPriority = {}));

  var globalDescriptorSetLayout = {
    bindings: [],
    layouts: {}
  };
  _exports.globalDescriptorSetLayout = globalDescriptorSetLayout;
  var localDescriptorSetLayout = {
    bindings: [],
    layouts: {}
  };
  /**
   * @en The uniform bindings
   * @zh Uniform 参数绑定。
   */

  _exports.localDescriptorSetLayout = localDescriptorSetLayout;
  var PipelineGlobalBindings;
  _exports.PipelineGlobalBindings = PipelineGlobalBindings;

  (function (PipelineGlobalBindings) {
    PipelineGlobalBindings[PipelineGlobalBindings["UBO_GLOBAL"] = 0] = "UBO_GLOBAL";
    PipelineGlobalBindings[PipelineGlobalBindings["UBO_SHADOW"] = 1] = "UBO_SHADOW";
    PipelineGlobalBindings[PipelineGlobalBindings["SAMPLER_ENVIRONMENT"] = 2] = "SAMPLER_ENVIRONMENT";
    PipelineGlobalBindings[PipelineGlobalBindings["SAMPLER_SHADOWMAP"] = 3] = "SAMPLER_SHADOWMAP";
    PipelineGlobalBindings[PipelineGlobalBindings["SAMPLER_GBUFFER_ALBEDOMAP"] = 4] = "SAMPLER_GBUFFER_ALBEDOMAP";
    PipelineGlobalBindings[PipelineGlobalBindings["SAMPLER_GBUFFER_POSITIONMAP"] = 5] = "SAMPLER_GBUFFER_POSITIONMAP";
    PipelineGlobalBindings[PipelineGlobalBindings["SAMPLER_GBUFFER_NORMALMAP"] = 6] = "SAMPLER_GBUFFER_NORMALMAP";
    PipelineGlobalBindings[PipelineGlobalBindings["SAMPLER_GBUFFER_EMISSIVEMAP"] = 7] = "SAMPLER_GBUFFER_EMISSIVEMAP";
    PipelineGlobalBindings[PipelineGlobalBindings["COUNT"] = 8] = "COUNT";
  })(PipelineGlobalBindings || (_exports.PipelineGlobalBindings = PipelineGlobalBindings = {}));

  var GLOBAL_UBO_COUNT = PipelineGlobalBindings.SAMPLER_ENVIRONMENT;
  var GLOBAL_SAMPLER_COUNT = PipelineGlobalBindings.COUNT - GLOBAL_UBO_COUNT;
  var ModelLocalBindings;
  _exports.ModelLocalBindings = ModelLocalBindings;

  (function (ModelLocalBindings) {
    ModelLocalBindings[ModelLocalBindings["UBO_LOCAL"] = 0] = "UBO_LOCAL";
    ModelLocalBindings[ModelLocalBindings["UBO_FORWARD_LIGHTS"] = 1] = "UBO_FORWARD_LIGHTS";
    ModelLocalBindings[ModelLocalBindings["UBO_SKINNING_ANIMATION"] = 2] = "UBO_SKINNING_ANIMATION";
    ModelLocalBindings[ModelLocalBindings["UBO_SKINNING_TEXTURE"] = 3] = "UBO_SKINNING_TEXTURE";
    ModelLocalBindings[ModelLocalBindings["UBO_MORPH"] = 4] = "UBO_MORPH";
    ModelLocalBindings[ModelLocalBindings["SAMPLER_JOINTS"] = 5] = "SAMPLER_JOINTS";
    ModelLocalBindings[ModelLocalBindings["SAMPLER_MORPH_POSITION"] = 6] = "SAMPLER_MORPH_POSITION";
    ModelLocalBindings[ModelLocalBindings["SAMPLER_MORPH_NORMAL"] = 7] = "SAMPLER_MORPH_NORMAL";
    ModelLocalBindings[ModelLocalBindings["SAMPLER_MORPH_TANGENT"] = 8] = "SAMPLER_MORPH_TANGENT";
    ModelLocalBindings[ModelLocalBindings["SAMPLER_LIGHTMAP"] = 9] = "SAMPLER_LIGHTMAP";
    ModelLocalBindings[ModelLocalBindings["SAMPLER_SPRITE"] = 10] = "SAMPLER_SPRITE";
    ModelLocalBindings[ModelLocalBindings["COUNT"] = 11] = "COUNT";
  })(ModelLocalBindings || (_exports.ModelLocalBindings = ModelLocalBindings = {}));

  var LOCAL_UBO_COUNT = ModelLocalBindings.SAMPLER_JOINTS;
  var LOCAL_SAMPLER_COUNT = ModelLocalBindings.COUNT - LOCAL_UBO_COUNT;
  var SetIndex; // parameters passed to GFXDevice

  _exports.SetIndex = SetIndex;

  (function (SetIndex) {
    SetIndex[SetIndex["GLOBAL"] = 0] = "GLOBAL";
    SetIndex[SetIndex["MATERIAL"] = 1] = "MATERIAL";
    SetIndex[SetIndex["LOCAL"] = 2] = "LOCAL";
  })(SetIndex || (_exports.SetIndex = SetIndex = {}));

  var bindingMappingInfo = new _index.GFXBindingMappingInfo();
  _exports.bindingMappingInfo = bindingMappingInfo;
  bindingMappingInfo.bufferOffsets = [0, GLOBAL_UBO_COUNT + LOCAL_UBO_COUNT, GLOBAL_UBO_COUNT];
  bindingMappingInfo.samplerOffsets = [-GLOBAL_UBO_COUNT, GLOBAL_SAMPLER_COUNT + LOCAL_SAMPLER_COUNT, GLOBAL_SAMPLER_COUNT - LOCAL_UBO_COUNT];
  bindingMappingInfo.flexibleSet = 1;
  /**
   * @en The global uniform buffer object
   * @zh 全局 UBO。
   */

  var UBOGlobal = function UBOGlobal() {
    _classCallCheck(this, UBOGlobal);
  };

  _exports.UBOGlobal = UBOGlobal;
  UBOGlobal.TIME_OFFSET = 0;
  UBOGlobal.SCREEN_SIZE_OFFSET = UBOGlobal.TIME_OFFSET + 4;
  UBOGlobal.SCREEN_SCALE_OFFSET = UBOGlobal.SCREEN_SIZE_OFFSET + 4;
  UBOGlobal.NATIVE_SIZE_OFFSET = UBOGlobal.SCREEN_SCALE_OFFSET + 4;
  UBOGlobal.MAT_VIEW_OFFSET = UBOGlobal.NATIVE_SIZE_OFFSET + 4;
  UBOGlobal.MAT_VIEW_INV_OFFSET = UBOGlobal.MAT_VIEW_OFFSET + 16;
  UBOGlobal.MAT_PROJ_OFFSET = UBOGlobal.MAT_VIEW_INV_OFFSET + 16;
  UBOGlobal.MAT_PROJ_INV_OFFSET = UBOGlobal.MAT_PROJ_OFFSET + 16;
  UBOGlobal.MAT_VIEW_PROJ_OFFSET = UBOGlobal.MAT_PROJ_INV_OFFSET + 16;
  UBOGlobal.MAT_VIEW_PROJ_INV_OFFSET = UBOGlobal.MAT_VIEW_PROJ_OFFSET + 16;
  UBOGlobal.CAMERA_POS_OFFSET = UBOGlobal.MAT_VIEW_PROJ_INV_OFFSET + 16;
  UBOGlobal.EXPOSURE_OFFSET = UBOGlobal.CAMERA_POS_OFFSET + 4;
  UBOGlobal.MAIN_LIT_DIR_OFFSET = UBOGlobal.EXPOSURE_OFFSET + 4;
  UBOGlobal.MAIN_LIT_COLOR_OFFSET = UBOGlobal.MAIN_LIT_DIR_OFFSET + 4;
  UBOGlobal.AMBIENT_SKY_OFFSET = UBOGlobal.MAIN_LIT_COLOR_OFFSET + 4;
  UBOGlobal.AMBIENT_GROUND_OFFSET = UBOGlobal.AMBIENT_SKY_OFFSET + 4;
  UBOGlobal.GLOBAL_FOG_COLOR_OFFSET = UBOGlobal.AMBIENT_GROUND_OFFSET + 4;
  UBOGlobal.GLOBAL_FOG_BASE_OFFSET = UBOGlobal.GLOBAL_FOG_COLOR_OFFSET + 4;
  UBOGlobal.GLOBAL_FOG_ADD_OFFSET = UBOGlobal.GLOBAL_FOG_BASE_OFFSET + 4;
  UBOGlobal.COUNT = UBOGlobal.GLOBAL_FOG_ADD_OFFSET + 4;
  UBOGlobal.SIZE = UBOGlobal.COUNT * 4;
  UBOGlobal.NAME = 'CCGlobal';
  UBOGlobal.BINDING = PipelineGlobalBindings.UBO_GLOBAL;
  UBOGlobal.DESCRIPTOR = new _index.GFXDescriptorSetLayoutBinding(_index.GFXDescriptorType.UNIFORM_BUFFER, 1, _index.GFXShaderStageFlagBit.ALL);
  UBOGlobal.LAYOUT = new _index.GFXUniformBlock(SetIndex.GLOBAL, UBOGlobal.BINDING, UBOGlobal.NAME, [new _index.GFXUniform('cc_time', _index.GFXType.FLOAT4, 1), new _index.GFXUniform('cc_screenSize', _index.GFXType.FLOAT4, 1), new _index.GFXUniform('cc_screenScale', _index.GFXType.FLOAT4, 1), new _index.GFXUniform('cc_nativeSize', _index.GFXType.FLOAT4, 1), new _index.GFXUniform('cc_matView', _index.GFXType.MAT4, 1), new _index.GFXUniform('cc_matViewInv', _index.GFXType.MAT4, 1), new _index.GFXUniform('cc_matProj', _index.GFXType.MAT4, 1), new _index.GFXUniform('cc_matProjInv', _index.GFXType.MAT4, 1), new _index.GFXUniform('cc_matViewProj', _index.GFXType.MAT4, 1), new _index.GFXUniform('cc_matViewProjInv', _index.GFXType.MAT4, 1), new _index.GFXUniform('cc_cameraPos', _index.GFXType.FLOAT4, 1), new _index.GFXUniform('cc_exposure', _index.GFXType.FLOAT4, 1), new _index.GFXUniform('cc_mainLitDir', _index.GFXType.FLOAT4, 1), new _index.GFXUniform('cc_mainLitColor', _index.GFXType.FLOAT4, 1), new _index.GFXUniform('cc_ambientSky', _index.GFXType.FLOAT4, 1), new _index.GFXUniform('cc_ambientGround', _index.GFXType.FLOAT4, 1), new _index.GFXUniform('cc_fogColor', _index.GFXType.FLOAT4, 1), new _index.GFXUniform('cc_fogBase', _index.GFXType.FLOAT4, 1), new _index.GFXUniform('cc_fogAdd', _index.GFXType.FLOAT4, 1)], 1);
  globalDescriptorSetLayout.layouts[UBOGlobal.NAME] = UBOGlobal.LAYOUT;
  globalDescriptorSetLayout.bindings[UBOGlobal.BINDING] = UBOGlobal.DESCRIPTOR;
  /**
   * @en The uniform buffer object for shadow
   * @zh 阴影 UBO。
   */

  var UBOShadow = function UBOShadow() {
    _classCallCheck(this, UBOShadow);
  };

  _exports.UBOShadow = UBOShadow;
  UBOShadow.MAT_LIGHT_PLANE_PROJ_OFFSET = 0;
  UBOShadow.MAT_LIGHT_VIEW_PROJ_OFFSET = UBOShadow.MAT_LIGHT_PLANE_PROJ_OFFSET + 16;
  UBOShadow.SHADOW_COLOR_OFFSET = UBOShadow.MAT_LIGHT_VIEW_PROJ_OFFSET + 16;
  UBOShadow.SHADOW_PCF_OFFSET = UBOShadow.SHADOW_COLOR_OFFSET + 4;
  UBOShadow.SHADOW_SIZE_OFFSET = UBOShadow.SHADOW_PCF_OFFSET + 4;
  UBOShadow.COUNT = UBOShadow.SHADOW_SIZE_OFFSET + 4;
  UBOShadow.SIZE = UBOShadow.COUNT * 4;
  UBOShadow.NAME = 'CCShadow';
  UBOShadow.BINDING = PipelineGlobalBindings.UBO_SHADOW;
  UBOShadow.DESCRIPTOR = new _index.GFXDescriptorSetLayoutBinding(_index.GFXDescriptorType.UNIFORM_BUFFER, 1, _index.GFXShaderStageFlagBit.ALL);
  UBOShadow.LAYOUT = new _index.GFXUniformBlock(SetIndex.GLOBAL, UBOShadow.BINDING, UBOShadow.NAME, [new _index.GFXUniform('cc_matLightPlaneProj', _index.GFXType.MAT4, 1), new _index.GFXUniform('cc_matLightViewProj', _index.GFXType.MAT4, 1), new _index.GFXUniform('cc_shadowColor', _index.GFXType.FLOAT4, 1), new _index.GFXUniform('cc_shadowPCF', _index.GFXType.FLOAT4, 1), new _index.GFXUniform('cc_shadowSize', _index.GFXType.FLOAT4, 1)], 1);
  globalDescriptorSetLayout.layouts[UBOShadow.NAME] = UBOShadow.LAYOUT;
  globalDescriptorSetLayout.bindings[UBOShadow.BINDING] = UBOShadow.DESCRIPTOR;
  var UNIFORM_SHADOWMAP_NAME = 'cc_shadowMap';
  var UNIFORM_SHADOWMAP_BINDING = PipelineGlobalBindings.SAMPLER_SHADOWMAP;
  _exports.UNIFORM_SHADOWMAP_BINDING = UNIFORM_SHADOWMAP_BINDING;
  var UNIFORM_SHADOWMAP_DESCRIPTOR = new _index.GFXDescriptorSetLayoutBinding(_index.GFXDescriptorType.SAMPLER, 1, _index.GFXShaderStageFlagBit.FRAGMENT);
  var UNIFORM_SHADOWMAP_LAYOUT = new _index.GFXUniformSampler(SetIndex.GLOBAL, UNIFORM_SHADOWMAP_BINDING, UNIFORM_SHADOWMAP_NAME, _index.GFXType.SAMPLER2D, 1);
  globalDescriptorSetLayout.layouts[UNIFORM_SHADOWMAP_NAME] = UNIFORM_SHADOWMAP_LAYOUT;
  globalDescriptorSetLayout.bindings[UNIFORM_SHADOWMAP_BINDING] = UNIFORM_SHADOWMAP_DESCRIPTOR;
  var UNIFORM_GBUFFER_ALBEDOMAP_NAME = 'cc_gbuffer_albedoMap';
  var UNIFORM_GBUFFER_ALBEDOMAP_BINDING = PipelineGlobalBindings.SAMPLER_GBUFFER_ALBEDOMAP;
  _exports.UNIFORM_GBUFFER_ALBEDOMAP_BINDING = UNIFORM_GBUFFER_ALBEDOMAP_BINDING;
  var UNIFORM_GBUFFER_ALBEDOMAP_DESCRIPTOR = new _index.GFXDescriptorSetLayoutBinding(_index.GFXDescriptorType.SAMPLER, 1, _index.GFXShaderStageFlagBit.FRAGMENT);
  var UNIFORM_GBUFFER_ALBEDOMAP_LAYOUT = new _index.GFXUniformSampler(SetIndex.GLOBAL, UNIFORM_GBUFFER_ALBEDOMAP_BINDING, UNIFORM_GBUFFER_ALBEDOMAP_NAME, _index.GFXType.SAMPLER2D, 1);
  globalDescriptorSetLayout.layouts[UNIFORM_GBUFFER_ALBEDOMAP_NAME] = UNIFORM_GBUFFER_ALBEDOMAP_LAYOUT;
  globalDescriptorSetLayout.bindings[UNIFORM_GBUFFER_ALBEDOMAP_BINDING] = UNIFORM_GBUFFER_ALBEDOMAP_DESCRIPTOR;
  var UNIFORM_GBUFFER_POSITIONMAP_NAME = 'cc_gbuffer_positionMap';
  var UNIFORM_GBUFFER_POSITIONMAP_BINDING = PipelineGlobalBindings.SAMPLER_GBUFFER_POSITIONMAP;
  _exports.UNIFORM_GBUFFER_POSITIONMAP_BINDING = UNIFORM_GBUFFER_POSITIONMAP_BINDING;
  var UNIFORM_GBUFFER_POSITIONMAP_DESCRIPTOR = new _index.GFXDescriptorSetLayoutBinding(_index.GFXDescriptorType.SAMPLER, 1, _index.GFXShaderStageFlagBit.FRAGMENT);
  var UNIFORM_GBUFFER_POSITIONMAP_LAYOUT = new _index.GFXUniformSampler(SetIndex.GLOBAL, UNIFORM_GBUFFER_POSITIONMAP_BINDING, UNIFORM_GBUFFER_POSITIONMAP_NAME, _index.GFXType.SAMPLER2D, 1);
  globalDescriptorSetLayout.layouts[UNIFORM_GBUFFER_POSITIONMAP_NAME] = UNIFORM_GBUFFER_POSITIONMAP_LAYOUT;
  globalDescriptorSetLayout.bindings[UNIFORM_GBUFFER_POSITIONMAP_BINDING] = UNIFORM_GBUFFER_POSITIONMAP_DESCRIPTOR;
  var UNIFORM_GBUFFER_NORMALMAP_NAME = 'cc_gbuffer_normalMap';
  var UNIFORM_GBUFFER_NORMALMAP_BINDING = PipelineGlobalBindings.SAMPLER_GBUFFER_NORMALMAP;
  _exports.UNIFORM_GBUFFER_NORMALMAP_BINDING = UNIFORM_GBUFFER_NORMALMAP_BINDING;
  var UNIFORM_GBUFFER_NORMALMAP_DESCRIPTOR = new _index.GFXDescriptorSetLayoutBinding(_index.GFXDescriptorType.SAMPLER, 1, _index.GFXShaderStageFlagBit.FRAGMENT);
  var UNIFORM_GBUFFER_NORMALMAP_LAYOUT = new _index.GFXUniformSampler(SetIndex.GLOBAL, UNIFORM_GBUFFER_NORMALMAP_BINDING, UNIFORM_GBUFFER_NORMALMAP_NAME, _index.GFXType.SAMPLER2D, 1);
  globalDescriptorSetLayout.layouts[UNIFORM_GBUFFER_NORMALMAP_NAME] = UNIFORM_GBUFFER_NORMALMAP_LAYOUT;
  globalDescriptorSetLayout.bindings[UNIFORM_GBUFFER_NORMALMAP_BINDING] = UNIFORM_GBUFFER_NORMALMAP_DESCRIPTOR;
  var UNIFORM_GBUFFER_EMISSIVEMAP_NAME = 'cc_gbuffer_emissiveMap';
  var UNIFORM_GBUFFER_EMISSIVEMAP_BINDING = PipelineGlobalBindings.SAMPLER_GBUFFER_EMISSIVEMAP;
  _exports.UNIFORM_GBUFFER_EMISSIVEMAP_BINDING = UNIFORM_GBUFFER_EMISSIVEMAP_BINDING;
  var UNIFORM_GBUFFER_EMISSIVEMAP_DESCRIPTOR = new _index.GFXDescriptorSetLayoutBinding(_index.GFXDescriptorType.SAMPLER, 1, _index.GFXShaderStageFlagBit.FRAGMENT);
  var UNIFORM_GBUFFER_EMISSIVEMAP_LAYOUT = new _index.GFXUniformSampler(SetIndex.GLOBAL, UNIFORM_GBUFFER_EMISSIVEMAP_BINDING, UNIFORM_GBUFFER_EMISSIVEMAP_NAME, _index.GFXType.SAMPLER2D, 1);
  globalDescriptorSetLayout.layouts[UNIFORM_GBUFFER_EMISSIVEMAP_NAME] = UNIFORM_GBUFFER_EMISSIVEMAP_LAYOUT;
  globalDescriptorSetLayout.bindings[UNIFORM_GBUFFER_EMISSIVEMAP_BINDING] = UNIFORM_GBUFFER_EMISSIVEMAP_DESCRIPTOR;
  var UNIFORM_ENVIRONMENT_NAME = 'cc_environment';
  var UNIFORM_ENVIRONMENT_BINDING = PipelineGlobalBindings.SAMPLER_ENVIRONMENT;
  _exports.UNIFORM_ENVIRONMENT_BINDING = UNIFORM_ENVIRONMENT_BINDING;
  var UNIFORM_ENVIRONMENT_LAYOUT = new _index.GFXUniformSampler(SetIndex.GLOBAL, UNIFORM_ENVIRONMENT_BINDING, UNIFORM_ENVIRONMENT_NAME, _index.GFXType.SAMPLER_CUBE, 1);
  var UNIFORM_ENVIRONMENT_DESCRIPTOR = new _index.GFXDescriptorSetLayoutBinding(_index.GFXDescriptorType.SAMPLER, 1, _index.GFXShaderStageFlagBit.FRAGMENT);
  globalDescriptorSetLayout.layouts[UNIFORM_ENVIRONMENT_NAME] = UNIFORM_ENVIRONMENT_LAYOUT;
  globalDescriptorSetLayout.bindings[UNIFORM_ENVIRONMENT_BINDING] = UNIFORM_ENVIRONMENT_DESCRIPTOR;
  /**
   * @en The local uniform buffer object
   * @zh 本地 UBO。
   */

  var UBOLocal = function UBOLocal() {
    _classCallCheck(this, UBOLocal);
  };

  _exports.UBOLocal = UBOLocal;
  UBOLocal.MAT_WORLD_OFFSET = 0;
  UBOLocal.MAT_WORLD_IT_OFFSET = UBOLocal.MAT_WORLD_OFFSET + 16;
  UBOLocal.LIGHTINGMAP_UVPARAM = UBOLocal.MAT_WORLD_IT_OFFSET + 16;
  UBOLocal.COUNT = UBOLocal.LIGHTINGMAP_UVPARAM + 4;
  UBOLocal.SIZE = UBOLocal.COUNT * 4;
  UBOLocal.NAME = 'CCLocal';
  UBOLocal.BINDING = ModelLocalBindings.UBO_LOCAL;
  UBOLocal.DESCRIPTOR = new _index.GFXDescriptorSetLayoutBinding(_index.GFXDescriptorType.UNIFORM_BUFFER, 1, _index.GFXShaderStageFlagBit.VERTEX);
  UBOLocal.LAYOUT = new _index.GFXUniformBlock(SetIndex.LOCAL, UBOLocal.BINDING, UBOLocal.NAME, [new _index.GFXUniform('cc_matWorld', _index.GFXType.MAT4, 1), new _index.GFXUniform('cc_matWorldIT', _index.GFXType.MAT4, 1), new _index.GFXUniform('cc_lightingMapUVParam', _index.GFXType.FLOAT4, 1)], 1);
  localDescriptorSetLayout.layouts[UBOLocal.NAME] = UBOLocal.LAYOUT;
  localDescriptorSetLayout.bindings[UBOLocal.BINDING] = UBOLocal.DESCRIPTOR;
  var INST_MAT_WORLD = 'a_matWorld0';
  _exports.INST_MAT_WORLD = INST_MAT_WORLD;

  var UBOLocalBatched = function UBOLocalBatched() {
    _classCallCheck(this, UBOLocalBatched);
  };

  _exports.UBOLocalBatched = UBOLocalBatched;
  UBOLocalBatched.BATCHING_COUNT = 10;
  UBOLocalBatched.MAT_WORLDS_OFFSET = 0;
  UBOLocalBatched.COUNT = 16 * UBOLocalBatched.BATCHING_COUNT;
  UBOLocalBatched.SIZE = UBOLocalBatched.COUNT * 4;
  UBOLocalBatched.NAME = 'CCLocalBatched';
  UBOLocalBatched.BINDING = ModelLocalBindings.UBO_LOCAL;
  UBOLocalBatched.DESCRIPTOR = new _index.GFXDescriptorSetLayoutBinding(_index.GFXDescriptorType.UNIFORM_BUFFER, 1, _index.GFXShaderStageFlagBit.VERTEX);
  UBOLocalBatched.LAYOUT = new _index.GFXUniformBlock(SetIndex.LOCAL, UBOLocalBatched.BINDING, UBOLocalBatched.NAME, [new _index.GFXUniform('cc_matWorlds', _index.GFXType.MAT4, UBOLocalBatched.BATCHING_COUNT)], 1);
  localDescriptorSetLayout.layouts[UBOLocalBatched.NAME] = UBOLocalBatched.LAYOUT;
  localDescriptorSetLayout.bindings[UBOLocalBatched.BINDING] = UBOLocalBatched.DESCRIPTOR;
  /**
   * @en The uniform buffer object for forward lighting
   * @zh 前向灯光 UBO。
   */

  var UBOForwardLight = function UBOForwardLight() {
    _classCallCheck(this, UBOForwardLight);
  };

  _exports.UBOForwardLight = UBOForwardLight;
  UBOForwardLight.LIGHTS_PER_PASS = 1;
  UBOForwardLight.LIGHT_POS_OFFSET = 0;
  UBOForwardLight.LIGHT_COLOR_OFFSET = UBOForwardLight.LIGHT_POS_OFFSET + UBOForwardLight.LIGHTS_PER_PASS * 4;
  UBOForwardLight.LIGHT_SIZE_RANGE_ANGLE_OFFSET = UBOForwardLight.LIGHT_COLOR_OFFSET + UBOForwardLight.LIGHTS_PER_PASS * 4;
  UBOForwardLight.LIGHT_DIR_OFFSET = UBOForwardLight.LIGHT_SIZE_RANGE_ANGLE_OFFSET + UBOForwardLight.LIGHTS_PER_PASS * 4;
  UBOForwardLight.COUNT = UBOForwardLight.LIGHT_DIR_OFFSET + UBOForwardLight.LIGHTS_PER_PASS * 4;
  UBOForwardLight.SIZE = UBOForwardLight.COUNT * 4;
  UBOForwardLight.NAME = 'CCForwardLight';
  UBOForwardLight.BINDING = ModelLocalBindings.UBO_FORWARD_LIGHTS;
  UBOForwardLight.DESCRIPTOR = new _index.GFXDescriptorSetLayoutBinding(_index.GFXDescriptorType.DYNAMIC_UNIFORM_BUFFER, 1, _index.GFXShaderStageFlagBit.FRAGMENT);
  UBOForwardLight.LAYOUT = new _index.GFXUniformBlock(SetIndex.LOCAL, UBOForwardLight.BINDING, UBOForwardLight.NAME, [new _index.GFXUniform('cc_lightPos', _index.GFXType.FLOAT4, UBOForwardLight.LIGHTS_PER_PASS), new _index.GFXUniform('cc_lightColor', _index.GFXType.FLOAT4, UBOForwardLight.LIGHTS_PER_PASS), new _index.GFXUniform('cc_lightSizeRangeAngle', _index.GFXType.FLOAT4, UBOForwardLight.LIGHTS_PER_PASS), new _index.GFXUniform('cc_lightDir', _index.GFXType.FLOAT4, UBOForwardLight.LIGHTS_PER_PASS)], 1);
  localDescriptorSetLayout.layouts[UBOForwardLight.NAME] = UBOForwardLight.LAYOUT;
  localDescriptorSetLayout.bindings[UBOForwardLight.BINDING] = UBOForwardLight.DESCRIPTOR; // The actual uniform vectors used is JointUniformCapacity * 3.
  // We think this is a reasonable default capacity considering MAX_VERTEX_UNIFORM_VECTORS in WebGL spec is just 128.
  // Skinning models with number of bones more than this capacity will be automatically switched to texture skinning.
  // But still, you can tweak this for your own need by changing the number below
  // and the JOINT_UNIFORM_CAPACITY macro in cc-skinning shader header.

  var JOINT_UNIFORM_CAPACITY = 30;
  /**
   * @en The uniform buffer object for skinning texture
   * @zh 骨骼贴图 UBO。
   */

  _exports.JOINT_UNIFORM_CAPACITY = JOINT_UNIFORM_CAPACITY;

  var UBOSkinningTexture = function UBOSkinningTexture() {
    _classCallCheck(this, UBOSkinningTexture);
  };

  _exports.UBOSkinningTexture = UBOSkinningTexture;
  UBOSkinningTexture.JOINTS_TEXTURE_INFO_OFFSET = 0;
  UBOSkinningTexture.COUNT = UBOSkinningTexture.JOINTS_TEXTURE_INFO_OFFSET + 4;
  UBOSkinningTexture.SIZE = UBOSkinningTexture.COUNT * 4;
  UBOSkinningTexture.NAME = 'CCSkinningTexture';
  UBOSkinningTexture.BINDING = ModelLocalBindings.UBO_SKINNING_TEXTURE;
  UBOSkinningTexture.DESCRIPTOR = new _index.GFXDescriptorSetLayoutBinding(_index.GFXDescriptorType.UNIFORM_BUFFER, 1, _index.GFXShaderStageFlagBit.VERTEX);
  UBOSkinningTexture.LAYOUT = new _index.GFXUniformBlock(SetIndex.LOCAL, UBOSkinningTexture.BINDING, UBOSkinningTexture.NAME, [new _index.GFXUniform('cc_jointTextureInfo', _index.GFXType.FLOAT4, 1)], 1);
  localDescriptorSetLayout.layouts[UBOSkinningTexture.NAME] = UBOSkinningTexture.LAYOUT;
  localDescriptorSetLayout.bindings[UBOSkinningTexture.BINDING] = UBOSkinningTexture.DESCRIPTOR;

  var UBOSkinningAnimation = function UBOSkinningAnimation() {
    _classCallCheck(this, UBOSkinningAnimation);
  };

  _exports.UBOSkinningAnimation = UBOSkinningAnimation;
  UBOSkinningAnimation.JOINTS_ANIM_INFO_OFFSET = 0;
  UBOSkinningAnimation.COUNT = UBOSkinningAnimation.JOINTS_ANIM_INFO_OFFSET + 4;
  UBOSkinningAnimation.SIZE = UBOSkinningAnimation.COUNT * 4;
  UBOSkinningAnimation.NAME = 'CCSkinningAnimation';
  UBOSkinningAnimation.BINDING = ModelLocalBindings.UBO_SKINNING_ANIMATION;
  UBOSkinningAnimation.DESCRIPTOR = new _index.GFXDescriptorSetLayoutBinding(_index.GFXDescriptorType.UNIFORM_BUFFER, 1, _index.GFXShaderStageFlagBit.VERTEX);
  UBOSkinningAnimation.LAYOUT = new _index.GFXUniformBlock(SetIndex.LOCAL, UBOSkinningAnimation.BINDING, UBOSkinningAnimation.NAME, [new _index.GFXUniform('cc_jointAnimInfo', _index.GFXType.FLOAT4, 1)], 1);
  localDescriptorSetLayout.layouts[UBOSkinningAnimation.NAME] = UBOSkinningAnimation.LAYOUT;
  localDescriptorSetLayout.bindings[UBOSkinningAnimation.BINDING] = UBOSkinningAnimation.DESCRIPTOR;
  var INST_JOINT_ANIM_INFO = 'a_jointAnimInfo';
  _exports.INST_JOINT_ANIM_INFO = INST_JOINT_ANIM_INFO;

  var UBOSkinning = function UBOSkinning() {
    _classCallCheck(this, UBOSkinning);
  };

  _exports.UBOSkinning = UBOSkinning;
  UBOSkinning.JOINTS_OFFSET = 0;
  UBOSkinning.COUNT = UBOSkinning.JOINTS_OFFSET + JOINT_UNIFORM_CAPACITY * 12;
  UBOSkinning.SIZE = UBOSkinning.COUNT * 4;
  UBOSkinning.NAME = 'CCSkinning';
  UBOSkinning.BINDING = ModelLocalBindings.UBO_SKINNING_TEXTURE;
  UBOSkinning.DESCRIPTOR = new _index.GFXDescriptorSetLayoutBinding(_index.GFXDescriptorType.UNIFORM_BUFFER, 1, _index.GFXShaderStageFlagBit.VERTEX);
  UBOSkinning.LAYOUT = new _index.GFXUniformBlock(SetIndex.LOCAL, UBOSkinning.BINDING, UBOSkinning.NAME, [new _index.GFXUniform('cc_joints', _index.GFXType.FLOAT4, JOINT_UNIFORM_CAPACITY * 3)], 1);
  localDescriptorSetLayout.layouts[UBOSkinning.NAME] = UBOSkinning.LAYOUT;
  localDescriptorSetLayout.bindings[UBOSkinning.BINDING] = UBOSkinning.DESCRIPTOR;
  /**
   * @en The uniform buffer object for morph setting
   * @zh 形变配置的 UBO
   */

  var UBOMorph = function UBOMorph() {
    _classCallCheck(this, UBOMorph);
  };

  _exports.UBOMorph = UBOMorph;
  UBOMorph.MAX_MORPH_TARGET_COUNT = 60;
  UBOMorph.OFFSET_OF_WEIGHTS = 0;
  UBOMorph.OFFSET_OF_DISPLACEMENT_TEXTURE_WIDTH = 4 * UBOMorph.MAX_MORPH_TARGET_COUNT;
  UBOMorph.OFFSET_OF_DISPLACEMENT_TEXTURE_HEIGHT = UBOMorph.OFFSET_OF_DISPLACEMENT_TEXTURE_WIDTH + 4;
  UBOMorph.COUNT_BASE_4_BYTES = 4 * Math.ceil(UBOMorph.MAX_MORPH_TARGET_COUNT / 4) + 4;
  UBOMorph.SIZE = UBOMorph.COUNT_BASE_4_BYTES * 4;
  UBOMorph.NAME = 'CCMorph';
  UBOMorph.BINDING = ModelLocalBindings.UBO_MORPH;
  UBOMorph.DESCRIPTOR = new _index.GFXDescriptorSetLayoutBinding(_index.GFXDescriptorType.UNIFORM_BUFFER, 1, _index.GFXShaderStageFlagBit.VERTEX);
  UBOMorph.LAYOUT = new _index.GFXUniformBlock(SetIndex.LOCAL, UBOMorph.BINDING, UBOMorph.NAME, [new _index.GFXUniform('cc_displacementWeights', _index.GFXType.FLOAT4, UBOMorph.MAX_MORPH_TARGET_COUNT / 4), new _index.GFXUniform('cc_displacementTextureInfo', _index.GFXType.FLOAT4, 1)], 1);
  localDescriptorSetLayout.layouts[UBOMorph.NAME] = UBOMorph.LAYOUT;
  localDescriptorSetLayout.bindings[UBOMorph.BINDING] = UBOMorph.DESCRIPTOR;
  /**
   * @en The sampler for joint texture
   * @zh 骨骼纹理采样器。
   */

  var UNIFORM_JOINT_TEXTURE_NAME = 'cc_jointTexture';
  var UNIFORM_JOINT_TEXTURE_BINDING = ModelLocalBindings.SAMPLER_JOINTS;
  _exports.UNIFORM_JOINT_TEXTURE_BINDING = UNIFORM_JOINT_TEXTURE_BINDING;
  var UNIFORM_JOINT_TEXTURE_DESCRIPTOR = new _index.GFXDescriptorSetLayoutBinding(_index.GFXDescriptorType.SAMPLER, 1, _index.GFXShaderStageFlagBit.VERTEX);
  var UNIFORM_JOINT_TEXTURE_LAYOUT = new _index.GFXUniformSampler(SetIndex.LOCAL, UNIFORM_JOINT_TEXTURE_BINDING, UNIFORM_JOINT_TEXTURE_NAME, _index.GFXType.SAMPLER2D, 1);
  localDescriptorSetLayout.layouts[UNIFORM_JOINT_TEXTURE_NAME] = UNIFORM_JOINT_TEXTURE_LAYOUT;
  localDescriptorSetLayout.bindings[UNIFORM_JOINT_TEXTURE_BINDING] = UNIFORM_JOINT_TEXTURE_DESCRIPTOR;
  /**
   * @en The sampler for morph texture of position
   * @zh 位置形变纹理采样器。
   */

  var UNIFORM_POSITION_MORPH_TEXTURE_NAME = 'cc_PositionDisplacements';
  var UNIFORM_POSITION_MORPH_TEXTURE_BINDING = ModelLocalBindings.SAMPLER_MORPH_POSITION;
  _exports.UNIFORM_POSITION_MORPH_TEXTURE_BINDING = UNIFORM_POSITION_MORPH_TEXTURE_BINDING;
  var UNIFORM_POSITION_MORPH_TEXTURE_DESCRIPTOR = new _index.GFXDescriptorSetLayoutBinding(_index.GFXDescriptorType.SAMPLER, 1, _index.GFXShaderStageFlagBit.VERTEX);
  var UNIFORM_POSITION_MORPH_TEXTURE_LAYOUT = new _index.GFXUniformSampler(SetIndex.LOCAL, UNIFORM_POSITION_MORPH_TEXTURE_BINDING, UNIFORM_POSITION_MORPH_TEXTURE_NAME, _index.GFXType.SAMPLER2D, 1);
  localDescriptorSetLayout.layouts[UNIFORM_POSITION_MORPH_TEXTURE_NAME] = UNIFORM_POSITION_MORPH_TEXTURE_LAYOUT;
  localDescriptorSetLayout.bindings[UNIFORM_POSITION_MORPH_TEXTURE_BINDING] = UNIFORM_POSITION_MORPH_TEXTURE_DESCRIPTOR;
  /**
   * @en The sampler for morph texture of normal
   * @zh 法线形变纹理采样器。
   */

  var UNIFORM_NORMAL_MORPH_TEXTURE_NAME = 'cc_NormalDisplacements';
  var UNIFORM_NORMAL_MORPH_TEXTURE_BINDING = ModelLocalBindings.SAMPLER_MORPH_NORMAL;
  _exports.UNIFORM_NORMAL_MORPH_TEXTURE_BINDING = UNIFORM_NORMAL_MORPH_TEXTURE_BINDING;
  var UNIFORM_NORMAL_MORPH_TEXTURE_DESCRIPTOR = new _index.GFXDescriptorSetLayoutBinding(_index.GFXDescriptorType.SAMPLER, 1, _index.GFXShaderStageFlagBit.VERTEX);
  var UNIFORM_NORMAL_MORPH_TEXTURE_LAYOUT = new _index.GFXUniformSampler(SetIndex.LOCAL, UNIFORM_NORMAL_MORPH_TEXTURE_BINDING, UNIFORM_NORMAL_MORPH_TEXTURE_NAME, _index.GFXType.SAMPLER2D, 1);
  localDescriptorSetLayout.layouts[UNIFORM_NORMAL_MORPH_TEXTURE_NAME] = UNIFORM_NORMAL_MORPH_TEXTURE_LAYOUT;
  localDescriptorSetLayout.bindings[UNIFORM_NORMAL_MORPH_TEXTURE_BINDING] = UNIFORM_NORMAL_MORPH_TEXTURE_DESCRIPTOR;
  /**
   * @en The sampler for morph texture of tangent
   * @zh 切线形变纹理采样器。
   */

  var UNIFORM_TANGENT_MORPH_TEXTURE_NAME = 'cc_TangentDisplacements';
  var UNIFORM_TANGENT_MORPH_TEXTURE_BINDING = ModelLocalBindings.SAMPLER_MORPH_TANGENT;
  _exports.UNIFORM_TANGENT_MORPH_TEXTURE_BINDING = UNIFORM_TANGENT_MORPH_TEXTURE_BINDING;
  var UNIFORM_TANGENT_MORPH_TEXTURE_DESCRIPTOR = new _index.GFXDescriptorSetLayoutBinding(_index.GFXDescriptorType.SAMPLER, 1, _index.GFXShaderStageFlagBit.VERTEX);
  var UNIFORM_TANGENT_MORPH_TEXTURE_LAYOUT = new _index.GFXUniformSampler(SetIndex.LOCAL, UNIFORM_TANGENT_MORPH_TEXTURE_BINDING, UNIFORM_TANGENT_MORPH_TEXTURE_NAME, _index.GFXType.SAMPLER2D, 1);
  localDescriptorSetLayout.layouts[UNIFORM_TANGENT_MORPH_TEXTURE_NAME] = UNIFORM_TANGENT_MORPH_TEXTURE_LAYOUT;
  localDescriptorSetLayout.bindings[UNIFORM_TANGENT_MORPH_TEXTURE_BINDING] = UNIFORM_TANGENT_MORPH_TEXTURE_DESCRIPTOR;
  /**
   * @en The sampler for light map texture
   * @zh 光照图纹理采样器。
   */

  var UNIFORM_LIGHTMAP_TEXTURE_NAME = 'cc_lightingMap';
  var UNIFORM_LIGHTMAP_TEXTURE_BINDING = ModelLocalBindings.SAMPLER_LIGHTMAP;
  _exports.UNIFORM_LIGHTMAP_TEXTURE_BINDING = UNIFORM_LIGHTMAP_TEXTURE_BINDING;
  var UNIFORM_LIGHTMAP_TEXTURE_DESCRIPTOR = new _index.GFXDescriptorSetLayoutBinding(_index.GFXDescriptorType.SAMPLER, 1, _index.GFXShaderStageFlagBit.FRAGMENT);
  var UNIFORM_LIGHTMAP_TEXTURE_LAYOUT = new _index.GFXUniformSampler(SetIndex.LOCAL, UNIFORM_LIGHTMAP_TEXTURE_BINDING, UNIFORM_LIGHTMAP_TEXTURE_NAME, _index.GFXType.SAMPLER2D, 1);
  localDescriptorSetLayout.layouts[UNIFORM_LIGHTMAP_TEXTURE_NAME] = UNIFORM_LIGHTMAP_TEXTURE_LAYOUT;
  localDescriptorSetLayout.bindings[UNIFORM_LIGHTMAP_TEXTURE_BINDING] = UNIFORM_LIGHTMAP_TEXTURE_DESCRIPTOR;
  /**
   * @en The sampler for UI sprites.
   * @zh UI 精灵纹理采样器。
   */

  var UNIFORM_SPRITE_TEXTURE_NAME = 'cc_spriteTexture';
  var UNIFORM_SPRITE_TEXTURE_BINDING = ModelLocalBindings.SAMPLER_SPRITE;
  _exports.UNIFORM_SPRITE_TEXTURE_BINDING = UNIFORM_SPRITE_TEXTURE_BINDING;
  var UNIFORM_SPRITE_TEXTURE_DESCRIPTOR = new _index.GFXDescriptorSetLayoutBinding(_index.GFXDescriptorType.SAMPLER, 1, _index.GFXShaderStageFlagBit.FRAGMENT);
  var UNIFORM_SPRITE_TEXTURE_LAYOUT = new _index.GFXUniformSampler(SetIndex.LOCAL, UNIFORM_SPRITE_TEXTURE_BINDING, UNIFORM_SPRITE_TEXTURE_NAME, _index.GFXType.SAMPLER2D, 1);
  localDescriptorSetLayout.layouts[UNIFORM_SPRITE_TEXTURE_NAME] = UNIFORM_SPRITE_TEXTURE_LAYOUT;
  localDescriptorSetLayout.bindings[UNIFORM_SPRITE_TEXTURE_BINDING] = UNIFORM_SPRITE_TEXTURE_DESCRIPTOR;

  var CAMERA_DEFAULT_MASK = _layers.Layers.makeMaskExclude([_layers.Layers.BitMask.UI_2D, _layers.Layers.BitMask.GIZMOS, _layers.Layers.BitMask.EDITOR, _layers.Layers.BitMask.SCENE_GIZMO, _layers.Layers.BitMask.PROFILER]);

  _exports.CAMERA_DEFAULT_MASK = CAMERA_DEFAULT_MASK;

  var CAMERA_EDITOR_MASK = _layers.Layers.makeMaskExclude([_layers.Layers.BitMask.UI_2D, _layers.Layers.BitMask.PROFILER]);

  _exports.CAMERA_EDITOR_MASK = CAMERA_EDITOR_MASK;
  var MODEL_ALWAYS_MASK = _layers.Layers.Enum.ALL;
  /**
   * @en Render view information descriptor
   * @zh 渲染视图描述信息。
   */

  _exports.MODEL_ALWAYS_MASK = MODEL_ALWAYS_MASK;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,