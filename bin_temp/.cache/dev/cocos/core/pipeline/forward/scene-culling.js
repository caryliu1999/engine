(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../geometry/index.js", "../../renderer/scene/camera.js", "../../scene-graph/layers.js", "../../math/index.js", "../../memop/index.js", "../define.js", "../../renderer/scene/shadows.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../geometry/index.js"), require("../../renderer/scene/camera.js"), require("../../scene-graph/layers.js"), require("../../math/index.js"), require("../../memop/index.js"), require("../define.js"), require("../../renderer/scene/shadows.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.camera, global.layers, global.index, global.index, global.define, global.shadows);
    global.sceneCulling = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _camera, _layers, _index2, _index3, _define, _shadows) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.getShadowWorldMatrix = getShadowWorldMatrix;
  _exports.sceneCulling = sceneCulling;

  var _tempVec3 = new _index2.Vec3();

  var _forward = new _index2.Vec3(0, 0, -1);

  var _v3 = new _index2.Vec3();

  var _qt = new _index2.Quat();

  var _dir_negate = new _index2.Vec3();

  var _vec3_p = new _index2.Vec3();

  var _mat4_trans = new _index2.Mat4();

  var _data = Float32Array.from([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, // matLightPlaneProj
  0.0, 0.0, 0.0, 0.3 // shadowColor
  ]);

  var roPool = new _index3.Pool(function () {
    return {
      model: null,
      depth: 0
    };
  }, 128);
  var shadowPool = new _index3.Pool(function () {
    return {
      model: null,
      depth: 0
    };
  }, 128);

  function getRenderObject(model, camera) {
    var depth = 0;

    if (model.node) {
      _index2.Vec3.subtract(_tempVec3, model.node.worldPosition, camera.position);

      depth = _index2.Vec3.dot(_tempVec3, camera.forward);
    }

    var ro = roPool.alloc();
    ro.model = model;
    ro.depth = depth;
    return ro;
  }

  function getCastShadowRenderObject(model, camera) {
    var depth = 0;

    if (model.node) {
      _index2.Vec3.subtract(_tempVec3, model.node.worldPosition, camera.position);

      depth = _index2.Vec3.dot(_tempVec3, camera.forward);
    }

    var ro = shadowPool.alloc();
    ro.model = model;
    ro.depth = depth;
    return ro;
  }

  function getShadowWorldMatrix(pipeline, rotation, dir) {
    var shadows = pipeline.shadows;

    _index2.Vec3.negate(_dir_negate, dir);

    var distance = Math.sqrt(2) * shadows.sphere.radius;

    _index2.Vec3.multiplyScalar(_vec3_p, _dir_negate, distance);

    _index2.Vec3.add(_vec3_p, _vec3_p, shadows.sphere.center);

    _index2.Mat4.fromRT(_mat4_trans, rotation, _vec3_p);

    return _mat4_trans;
  }

  function updateSphereLight(pipeline, light) {
    var shadows = pipeline.shadows;

    if (!light.node.hasChangedFlags && !shadows.dirty) {
      return;
    }

    shadows.dirty = true;
    light.node.getWorldPosition(_v3);
    var n = shadows.normal;
    var d = shadows.distance + 0.001; // avoid z-fighting

    var NdL = _index2.Vec3.dot(n, _v3);

    var lx = _v3.x;
    var ly = _v3.y;
    var lz = _v3.z;
    var nx = n.x;
    var ny = n.y;
    var nz = n.z;
    var m = shadows.matLight;
    m.m00 = NdL - d - lx * nx;
    m.m01 = -ly * nx;
    m.m02 = -lz * nx;
    m.m03 = -nx;
    m.m04 = -lx * ny;
    m.m05 = NdL - d - ly * ny;
    m.m06 = -lz * ny;
    m.m07 = -ny;
    m.m08 = -lx * nz;
    m.m09 = -ly * nz;
    m.m10 = NdL - d - lz * nz;
    m.m11 = -nz;
    m.m12 = lx * d;
    m.m13 = ly * d;
    m.m14 = lz * d;
    m.m15 = NdL;

    _index2.Mat4.toArray(_data, shadows.matLight, _define.UBOShadow.MAT_LIGHT_PLANE_PROJ_OFFSET);

    pipeline.descriptorSet.getBuffer(_define.UBOShadow.BINDING).update(_data);
  }

  function updateDirLight(pipeline, light) {
    var shadows = pipeline.shadows;

    if (!light.node.hasChangedFlags && !shadows.dirty) {
      return;
    }

    shadows.dirty = false;
    light.node.getWorldRotation(_qt);

    _index2.Vec3.transformQuat(_v3, _forward, _qt);

    var n = shadows.normal;
    var d = shadows.distance + 0.001; // avoid z-fighting

    var NdL = _index2.Vec3.dot(n, _v3);

    var scale = 1 / NdL;
    var lx = _v3.x * scale;
    var ly = _v3.y * scale;
    var lz = _v3.z * scale;
    var nx = n.x;
    var ny = n.y;
    var nz = n.z;
    var m = shadows.matLight;
    m.m00 = 1 - nx * lx;
    m.m01 = -nx * ly;
    m.m02 = -nx * lz;
    m.m03 = 0;
    m.m04 = -ny * lx;
    m.m05 = 1 - ny * ly;
    m.m06 = -ny * lz;
    m.m07 = 0;
    m.m08 = -nz * lx;
    m.m09 = -nz * ly;
    m.m10 = 1 - nz * lz;
    m.m11 = 0;
    m.m12 = lx * d;
    m.m13 = ly * d;
    m.m14 = lz * d;
    m.m15 = 1;

    _index2.Mat4.toArray(_data, shadows.matLight, _define.UBOShadow.MAT_LIGHT_PLANE_PROJ_OFFSET);

    pipeline.descriptorSet.getBuffer(_define.UBOShadow.BINDING).update(_data);
  }

  function sceneCulling(pipeline, view) {
    var camera = view.camera;
    var scene = camera.scene;
    var renderObjects = pipeline.renderObjects;
    roPool.freeArray(renderObjects);
    renderObjects.length = 0;
    var shadowObjects = pipeline.shadowObjects;
    shadowPool.freeArray(shadowObjects);
    shadowObjects.length = 0;
    var mainLight = scene.mainLight;
    var shadows = pipeline.shadows;
    var shadowSphere = shadows.sphere;
    shadowSphere.center.set(0.0, 0.0, 0.0);
    shadowSphere.radius = 0.01;

    if (shadows.enabled && shadows.dirty) {
      _index2.Color.toArray(_data, shadows.shadowColor, _define.UBOShadow.SHADOW_COLOR_OFFSET);

      pipeline.descriptorSet.getBuffer(_define.UBOShadow.BINDING).update(_data);
    }

    if (mainLight) {
      if (shadows.type === _shadows.ShadowType.Planar) {
        updateDirLight(pipeline, mainLight);
      }
    }

    if (pipeline.skybox.enabled && pipeline.skybox.model && camera.clearFlag & _camera.SKYBOX_FLAG) {
      renderObjects.push(getRenderObject(pipeline.skybox.model, camera));
    }

    var models = scene.models;

    for (var i = 0; i < models.length; i++) {
      var model = models[i]; // filter model by view visibility

      if (model.enabled) {
        var vis = view.visibility & _layers.Layers.BitMask.UI_2D;

        if (vis) {
          if (model.node && view.visibility === model.node.layer || view.visibility === model.visFlags) {
            renderObjects.push(getRenderObject(model, camera));
          }
        } else {
          if (model.node && (view.visibility & model.node.layer) === model.node.layer || view.visibility & model.visFlags) {
            // shadow render Object
            if (model.castShadow) {
              _index.sphere.mergeAABB(shadowSphere, shadowSphere, model.worldBounds);

              shadowObjects.push(getCastShadowRenderObject(model, camera));
            } // frustum culling


            if (model.worldBounds && !_index.intersect.aabb_frustum(model.worldBounds, camera.frustum)) {
              continue;
            }

            renderObjects.push(getRenderObject(model, camera));
          }
        }
      }
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,