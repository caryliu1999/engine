(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../value-types/enum.js", "../../global-exports.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../value-types/enum.js"), require("../../global-exports.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global._enum, global.globalExports);
    global.eventEnum = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _enum, _globalExports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SystemEventType = void 0;

  /**
   * @category event
   */

  /**
   * @en The event type supported by SystemEvent and Node events
   * @zh SystemEvent 支持的事件类型以及节点事件类型
   */
  var SystemEventType;
  _exports.SystemEventType = SystemEventType;

  (function (SystemEventType) {
    SystemEventType["TOUCH_START"] = "touch-start";
    SystemEventType["TOUCH_MOVE"] = "touch-move";
    SystemEventType["TOUCH_END"] = "touch-end";
    SystemEventType["TOUCH_CANCEL"] = "touch-cancel";
    SystemEventType["MOUSE_DOWN"] = "mouse-down";
    SystemEventType["MOUSE_MOVE"] = "mouse-move";
    SystemEventType["MOUSE_UP"] = "mouse-up";
    SystemEventType["MOUSE_WHEEL"] = "mouse-wheel";
    SystemEventType["MOUSE_ENTER"] = "mouse-enter";
    SystemEventType["MOUSE_LEAVE"] = "mouse-leave";
    SystemEventType["KEY_DOWN"] = "keydown";
    SystemEventType["KEY_UP"] = "keyup";
    SystemEventType["DEVICEMOTION"] = "devicemotion";
    SystemEventType["TRANSFORM_CHANGED"] = "transform-changed";
    SystemEventType["SCENE_CHANGED_FOR_PERSISTS"] = "scene-changed-for-persists";
    SystemEventType["SIZE_CHANGED"] = "size-changed";
    SystemEventType["ANCHOR_CHANGED"] = "anchor-changed";
    SystemEventType["COLOR_CHANGED"] = "color-changed";
    SystemEventType["CHILD_ADDED"] = "child-added";
    SystemEventType["CHILD_REMOVED"] = "child-removed";
    SystemEventType["PARENT_CHANGED"] = "parent-changed";
    SystemEventType["NODE_DESTROYED"] = "node-destroyed";
  })(SystemEventType || (_exports.SystemEventType = SystemEventType = {}));

  (0, _enum.ccenum)(SystemEventType);
  _globalExports.legacyCC.SystemEventType = SystemEventType;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,