(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../math/index.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../math/index.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index);
    global.box = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = box;

  /**
   * @category 3d/primitive
   */

  /**
   * @en
   * This function generates a box with specified extents and centered at origin,
   * but may be repositioned through the `center` option.
   * @zh
   * 生成一个立方体，其大小是定义的范围且中心在原点。
   * @param options 参数选项。
   */
  function box(options) {
    options = options || {};
    var ws = options.widthSegments || 1;
    var hs = options.heightSegments || 1;
    var ls = options.lengthSegments || 1;
    var hw = (options.width || 1) / 2;
    var hh = (options.height || 1) / 2;
    var hl = (options.length || 1) / 2;
    var corners = [_index.Vec3.set(c0, -hw, -hh, hl), _index.Vec3.set(c1, hw, -hh, hl), _index.Vec3.set(c2, hw, hh, hl), _index.Vec3.set(c3, -hw, hh, hl), _index.Vec3.set(c4, hw, -hh, -hl), _index.Vec3.set(c5, -hw, -hh, -hl), _index.Vec3.set(c6, -hw, hh, -hl), _index.Vec3.set(c7, hw, hh, -hl)];
    var faceAxes = [[2, 3, 1], // FRONT
    [4, 5, 7], // BACK
    [7, 6, 2], // TOP
    [1, 0, 4], // BOTTOM
    [1, 4, 2], // RIGHT
    [5, 0, 6] // LEFT
    ];
    var faceNormals = [[0, 0, 1], // FRONT
    [0, 0, -1], // BACK
    [0, 1, 0], // TOP
    [0, -1, 0], // BOTTOM
    [1, 0, 0], // RIGHT
    [-1, 0, 0] // LEFT
    ];
    var faceTangents = [[-1, 0, 0, 1], // FRONT
    [-1, 0, 0, 1], // BACK
    [-1, 0, 0, 1], // TOP
    [-1, 0, 0, 1], // BOTTOM
    [0, 0, -1, 1], // RIGHT
    [0, 0, 1, 1] // LEFT
    ];
    var positions = [];
    var normals = [];
    var uvs = [];
    var tangents = [];
    var indices = [];
    var minPos = new _index.Vec3(-hw, -hh, -hl);
    var maxPos = new _index.Vec3(hw, hh, hl);
    var boundingRadius = Math.sqrt(hw * hw + hh * hh + hl * hl);

    function _buildPlane(side, uSegments, vSegments) {
      var u;
      var v;
      var ix;
      var iy;
      var offset = positions.length / 3;
      var faceAxe = faceAxes[side];
      var faceNormal = faceNormals[side];
      var faceTangent = faceTangents[side];

      for (iy = 0; iy <= vSegments; iy++) {
        for (ix = 0; ix <= uSegments; ix++) {
          u = ix / uSegments;
          v = iy / vSegments;

          _index.Vec3.lerp(temp1, corners[faceAxe[0]], corners[faceAxe[1]], u);

          _index.Vec3.lerp(temp2, corners[faceAxe[0]], corners[faceAxe[2]], v);

          _index.Vec3.subtract(temp3, temp2, corners[faceAxe[0]]);

          _index.Vec3.add(r, temp1, temp3);

          positions.push(r.x, r.y, r.z);
          normals.push(faceNormal[0], faceNormal[1], faceNormal[2]);
          uvs.push(u, v);
          tangents.push(faceTangent[0], faceTangent[1], faceTangent[2], faceTangent[3]);

          if (ix < uSegments && iy < vSegments) {
            var useg1 = uSegments + 1;
            var a = ix + iy * useg1;
            var b = ix + (iy + 1) * useg1;
            var c = ix + 1 + (iy + 1) * useg1;
            var d = ix + 1 + iy * useg1;
            indices.push(offset + a, offset + d, offset + b);
            indices.push(offset + b, offset + d, offset + c);
          }
        }
      }
    }

    _buildPlane(0, ws, hs); // FRONT


    _buildPlane(4, ls, hs); // RIGHT


    _buildPlane(1, ws, hs); // BACK


    _buildPlane(5, ls, hs); // LEFT


    _buildPlane(3, ws, ls); // BOTTOM


    _buildPlane(2, ws, ls); // TOP


    return {
      positions: positions,
      normals: normals,
      uvs: uvs,
      tangents: tangents,
      indices: indices,
      minPos: minPos,
      maxPos: maxPos,
      boundingRadius: boundingRadius
    };
  }

  var temp1 = new _index.Vec3();
  var temp2 = new _index.Vec3();
  var temp3 = new _index.Vec3();
  var r = new _index.Vec3();
  var c0 = new _index.Vec3();
  var c1 = new _index.Vec3();
  var c2 = new _index.Vec3();
  var c3 = new _index.Vec3();
  var c4 = new _index.Vec3();
  var c5 = new _index.Vec3();
  var c6 = new _index.Vec3();
  var c7 = new _index.Vec3();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,