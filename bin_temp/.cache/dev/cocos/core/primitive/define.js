(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports);
    global.define = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.applyDefaultGeometryOptions = applyDefaultGeometryOptions;

  /**
   * @category 3d/primitive
   */

  /**
   * @en
   * The definition of the parameter for building a primitive geometry.
   * @zh
   * 几何体参数选项。
   */

  /**
   * @en
   * Apply the options to default.
   * @zh
   * 应用默认的几何参数选项。
   */
  function applyDefaultGeometryOptions(options) {
    options = options || {};

    if (options.includeNormal === undefined) {
      options.includeNormal = true;
    }

    if (options.includeUV === undefined) {
      options.includeUV = true;
    }

    return options;
  }
  /**
   * @en
   * The definition of the geometry, this struct can build a mesh.
   * @zh
   * 几何体信息。
   */

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImU6L2QwMDQ1MjUyMC9HaXRodWIvZW5naW5lL2NvY29zL2NvcmUvcHJpbWl0aXZlL2RlZmluZS50cyJdLCJuYW1lcyI6WyJhcHBseURlZmF1bHRHZW9tZXRyeU9wdGlvbnMiLCJvcHRpb25zIiwiaW5jbHVkZU5vcm1hbCIsInVuZGVmaW5lZCIsImluY2x1ZGVVViJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7OztBQU9BOzs7Ozs7O0FBd0JBOzs7Ozs7QUFNTyxXQUFTQSwyQkFBVCxDQUNIQyxPQURHLEVBQzREO0FBQy9EQSxJQUFBQSxPQUFPLEdBQUdBLE9BQU8sSUFBSSxFQUFyQjs7QUFDQSxRQUFJQSxPQUFPLENBQUNDLGFBQVIsS0FBMEJDLFNBQTlCLEVBQXlDO0FBQ3JDRixNQUFBQSxPQUFPLENBQUNDLGFBQVIsR0FBd0IsSUFBeEI7QUFDSDs7QUFDRCxRQUFJRCxPQUFPLENBQUNHLFNBQVIsS0FBc0JELFNBQTFCLEVBQXFDO0FBQ2pDRixNQUFBQSxPQUFPLENBQUNHLFNBQVIsR0FBb0IsSUFBcEI7QUFDSDs7QUFDRCxXQUFPSCxPQUFQO0FBQ0g7QUFFRCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAY2F0ZWdvcnkgM2QvcHJpbWl0aXZlXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgR0ZYUHJpbWl0aXZlTW9kZSB9IGZyb20gJy4uL2dmeC9kZWZpbmUnO1xyXG5pbXBvcnQgeyBHRlhBdHRyaWJ1dGUgfSBmcm9tICcuLi9nZngvaW5wdXQtYXNzZW1ibGVyJztcclxuXHJcbi8qKlxyXG4gKiBAZW5cclxuICogVGhlIGRlZmluaXRpb24gb2YgdGhlIHBhcmFtZXRlciBmb3IgYnVpbGRpbmcgYSBwcmltaXRpdmUgZ2VvbWV0cnkuXHJcbiAqIEB6aFxyXG4gKiDlh6DkvZXkvZPlj4LmlbDpgInpobnjgIJcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUdlb21ldHJ5T3B0aW9ucyB7XHJcbiAgICAvKipcclxuICAgICAqIEBlblxyXG4gICAgICogV2hldGhlciB0byBpbmNsdWRlIG5vcm1hbC4gRGVmYXVsdCB0byB0cnVlLlxyXG4gICAgICogQHpoXHJcbiAgICAgKiDmmK/lkKbljIXlkKvms5Xnur/jgILpu5jorqTkuLp0cnVl44CCXHJcbiAgICAgKi9cclxuICAgIGluY2x1ZGVOb3JtYWw6IGJvb2xlYW47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZW5cclxuICAgICAqIFdoZXRoZXIgdG8gaW5jbHVkZSB1di4gRGVmYXVsdCB0byB0cnVlLlxyXG4gICAgICogQHpoXHJcbiAgICAgKiDmmK/lkKbljIXlkKtVVuOAgum7mOiupOS4unRydWXjgIJcclxuICAgICAqL1xyXG4gICAgaW5jbHVkZVVWOiBib29sZWFuO1xyXG59XHJcblxyXG4vKipcclxuICogQGVuXHJcbiAqIEFwcGx5IHRoZSBvcHRpb25zIHRvIGRlZmF1bHQuXHJcbiAqIEB6aFxyXG4gKiDlupTnlKjpu5jorqTnmoTlh6DkvZXlj4LmlbDpgInpobnjgIJcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBhcHBseURlZmF1bHRHZW9tZXRyeU9wdGlvbnM8R2VvbWV0cnlPcHRpb25zID0gSUdlb21ldHJ5T3B0aW9ucz4gKFxyXG4gICAgb3B0aW9ucz86IFJlY3Vyc2l2ZVBhcnRpYWw8SUdlb21ldHJ5T3B0aW9ucz4pOiBHZW9tZXRyeU9wdGlvbnMge1xyXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcbiAgICBpZiAob3B0aW9ucy5pbmNsdWRlTm9ybWFsID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBvcHRpb25zLmluY2x1ZGVOb3JtYWwgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgaWYgKG9wdGlvbnMuaW5jbHVkZVVWID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBvcHRpb25zLmluY2x1ZGVVViA9IHRydWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb3B0aW9ucyBhcyBHZW9tZXRyeU9wdGlvbnM7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAZW5cclxuICogVGhlIGRlZmluaXRpb24gb2YgdGhlIGdlb21ldHJ5LCB0aGlzIHN0cnVjdCBjYW4gYnVpbGQgYSBtZXNoLlxyXG4gKiBAemhcclxuICog5Yeg5L2V5L2T5L+h5oGv44CCXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElHZW9tZXRyeSB7XHJcbiAgICAvKipcclxuICAgICAqIEBlblxyXG4gICAgICogVmVydGV4IHBvc2l0aW9ucy5cclxuICAgICAqIEB6aFxyXG4gICAgICog6aG254K55L2N572u44CCXHJcbiAgICAgKi9cclxuICAgIHBvc2l0aW9uczogbnVtYmVyW107XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZW5cclxuICAgICAqIFZlcnRleCBub3JtYWxzLlxyXG4gICAgICogQHpoXHJcbiAgICAgKiDpobbngrnms5Xnur/jgIJcclxuICAgICAqL1xyXG4gICAgbm9ybWFscz86IG51bWJlcltdO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGVuXHJcbiAgICAgKiBUZXh0dXJlIGNvb3JkaW5hdGVzLlxyXG4gICAgICogQHpoXHJcbiAgICAgKiDnurnnkIblnZDmoIfjgIJcclxuICAgICAqL1xyXG4gICAgdXZzPzogbnVtYmVyW107XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZW5cclxuICAgICAqIFZlcnRleCBUYW5nZW50cy5cclxuICAgICAqIEB6aFxyXG4gICAgICog6aG254K55YiH57q/44CCXHJcbiAgICAgKi9cclxuICAgIHRhbmdlbnRzPzogbnVtYmVyW107XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZW5cclxuICAgICAqIFZlcnRleCBjb2xvcnMuXHJcbiAgICAgKiBAemhcclxuICAgICAqIOmhtueCueminOiJsuOAglxyXG4gICAgICovXHJcbiAgICBjb2xvcnM/OiBudW1iZXJbXTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBlblxyXG4gICAgICogc3BlY2lmeSB2ZXJ0ZXggYXR0cmlidXRlcywgdXNlIChwb3NpdGlvbnN8bm9ybWFsc3x1dnN8Y29sb3JzKSBhcyBrZXlzXHJcbiAgICAgKiBAemhcclxuICAgICAqIOmhtueCueWxnuaAp+OAglxyXG4gICAgICovXHJcbiAgICBhdHRyaWJ1dGVzPzogR0ZYQXR0cmlidXRlW107XHJcblxyXG4gICAgY3VzdG9tQXR0cmlidXRlcz86IHtcclxuICAgICAgICBhdHRyOiBHRlhBdHRyaWJ1dGUsXHJcbiAgICAgICAgdmFsdWVzOiBudW1iZXJbXSxcclxuICAgIH1bXTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBlblxyXG4gICAgICogQm91bmRpbmcgc3BoZXJlIHJhZGl1cy5cclxuICAgICAqIEB6aFxyXG4gICAgICog5YyF5Zu055CD5Y2K5b6E44CCXHJcbiAgICAgKi9cclxuICAgIGJvdW5kaW5nUmFkaXVzPzogbnVtYmVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGVuXHJcbiAgICAgKiBNaW4gcG9zaXRpb24uXHJcbiAgICAgKiBAemhcclxuICAgICAqIOacgOWwj+S9jee9ruOAglxyXG4gICAgICovXHJcbiAgICBtaW5Qb3M/OiB7XHJcbiAgICAgICAgeDogbnVtYmVyO1xyXG4gICAgICAgIHk6IG51bWJlcjtcclxuICAgICAgICB6OiBudW1iZXI7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGVuXHJcbiAgICAgKiBNYXggcG9zaXRpb24uXHJcbiAgICAgKiBAemhcclxuICAgICAqIOacgOWkp+S9jee9ruOAglxyXG4gICAgICovXHJcbiAgICBtYXhQb3M/OiB7XHJcbiAgICAgICAgeDogbnVtYmVyO1xyXG4gICAgICAgIHk6IG51bWJlcjtcclxuICAgICAgICB6OiBudW1iZXI7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGVuXHJcbiAgICAgKiBHZW9tZXRyeSBpbmRpY2VzLCBpZiBvbmUgbmVlZHMgaW5kZXhlZC1kcmF3LlxyXG4gICAgICogQHpoXHJcbiAgICAgKiDlh6DkvZXntKLlvJXvvIzlvZPkvb/nlKjntKLlvJXnu5jliLbml7bjgIJcclxuICAgICAqL1xyXG4gICAgaW5kaWNlcz86IG51bWJlcltdO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGVuXHJcbiAgICAgKiBUb3BvbG9neSBvZiB0aGUgZ2VvbWV0cnkgdmVydGljZXMuIERlZmF1bHQgaXMgVFJJQU5HTEVfTElTVC5cclxuICAgICAqIEB6aFxyXG4gICAgICog5Yeg5L2V6aG254K555qE5ouT5omR5Zu+5YWD44CC6buY6K6k5YC85pivVFJJQU5HTEVfTElTVOOAglxyXG4gICAgICovXHJcbiAgICBwcmltaXRpdmVNb2RlPzogR0ZYUHJpbWl0aXZlTW9kZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBlblxyXG4gICAgICogd2hldGhlciByYXlzIGNhc3RpbmcgZnJvbSB0aGUgYmFjayBmYWNlIG9mIHRoaXMgZ2VvbWV0cnkgY291bGQgY29sbGlkZSB3aXRoIGl0XHJcbiAgICAgKiBAemhcclxuICAgICAqIOaYr+WQpuaYr+WPjOmdou+8jOeUqOS6juWIpOaWreadpeiHquS6juWHoOS9leS9k+iDjOmdoueahOWwhOe6v+ajgOa1i+OAglxyXG4gICAgICovXHJcbiAgICBkb3VibGVTaWRlZD86IGJvb2xlYW47XHJcbn1cclxuIl19