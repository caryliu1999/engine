(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports);
    global.murmurhash2_gc = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.murmurhash2_32_gc = murmurhash2_32_gc;

  /**
   * JS Implementation of MurmurHash2
   *
   * @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
   * @see http://github.com/garycourt/murmurhash-js
   * @author <a href="mailto:aappleby@gmail.com">Austin Appleby</a>
   * @see http://sites.google.com/site/murmurhash/
   *
   * @param {string} str ASCII only
   * @param {number} seed Positive integer only
   * @return {number} 32-bit positive integer hash
   */
  var getUint8ForString = String.prototype.charCodeAt;

  function getUint8ForArray(idx) {
    return this[idx];
  }

  function murmurhash2_32_gc(input, seed) {
    var l = input.length;
    var h = seed ^ l;
    var i = 0;
    var getUint8 = typeof input === 'string' ? getUint8ForString : getUint8ForArray;

    while (l >= 4) {
      var k = getUint8.call(input, i) & 0xff | (getUint8.call(input, ++i) & 0xff) << 8 | (getUint8.call(input, ++i) & 0xff) << 16 | (getUint8.call(input, ++i) & 0xff) << 24;
      k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);
      k ^= k >>> 24;
      k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);
      h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16) ^ k;
      l -= 4;
      ++i;
    }

    switch (l) {
      case 3:
        h ^= (getUint8.call(input, i + 2) & 0xff) << 16;

      case 2:
        h ^= (getUint8.call(input, i + 1) & 0xff) << 8;

      case 1:
        h ^= getUint8.call(input, i) & 0xff;
        h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);
    }

    h ^= h >>> 13;
    h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);
    h ^= h >>> 15;
    return h >>> 0;
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImU6L2QwMDQ1MjUyMC9HaXRodWIvZW5naW5lL2NvY29zL2NvcmUvdXRpbHMvbXVybXVyaGFzaDJfZ2MudHMiXSwibmFtZXMiOlsiZ2V0VWludDhGb3JTdHJpbmciLCJTdHJpbmciLCJwcm90b3R5cGUiLCJjaGFyQ29kZUF0IiwiZ2V0VWludDhGb3JBcnJheSIsImlkeCIsIm11cm11cmhhc2gyXzMyX2djIiwiaW5wdXQiLCJzZWVkIiwibCIsImxlbmd0aCIsImgiLCJpIiwiZ2V0VWludDgiLCJrIiwiY2FsbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7O0FBYUEsTUFBTUEsaUJBQWlCLEdBQUdDLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkMsVUFBM0M7O0FBQ0EsV0FBU0MsZ0JBQVQsQ0FBNkNDLEdBQTdDLEVBQTBEO0FBQUUsV0FBTyxLQUFLQSxHQUFMLENBQVA7QUFBbUI7O0FBRXhFLFdBQVNDLGlCQUFULENBQTRCQyxLQUE1QixFQUF3REMsSUFBeEQsRUFBc0U7QUFDekUsUUFBSUMsQ0FBQyxHQUFHRixLQUFLLENBQUNHLE1BQWQ7QUFDQSxRQUFJQyxDQUFDLEdBQUdILElBQUksR0FBR0MsQ0FBZjtBQUNBLFFBQUlHLENBQUMsR0FBRyxDQUFSO0FBQ0EsUUFBTUMsUUFBUSxHQUFHLE9BQU9OLEtBQVAsS0FBaUIsUUFBakIsR0FBNEJQLGlCQUE1QixHQUFnREksZ0JBQWpFOztBQUVBLFdBQU9LLENBQUMsSUFBSSxDQUFaLEVBQWU7QUFDWCxVQUFJSyxDQUFDLEdBQ0NELFFBQVEsQ0FBQ0UsSUFBVCxDQUFjUixLQUFkLEVBQXFCSyxDQUFyQixJQUEwQixJQUE1QixHQUNDLENBQUNDLFFBQVEsQ0FBQ0UsSUFBVCxDQUFjUixLQUFkLEVBQXFCLEVBQUVLLENBQXZCLElBQTRCLElBQTdCLEtBQXNDLENBRHZDLEdBRUMsQ0FBQ0MsUUFBUSxDQUFDRSxJQUFULENBQWNSLEtBQWQsRUFBcUIsRUFBRUssQ0FBdkIsSUFBNEIsSUFBN0IsS0FBc0MsRUFGdkMsR0FHQyxDQUFDQyxRQUFRLENBQUNFLElBQVQsQ0FBY1IsS0FBZCxFQUFxQixFQUFFSyxDQUF2QixJQUE0QixJQUE3QixLQUFzQyxFQUozQztBQU1BRSxNQUFBQSxDQUFDLEdBQUssQ0FBQ0EsQ0FBQyxHQUFHLE1BQUwsSUFBZSxVQUFoQixJQUErQixDQUFFLENBQUNBLENBQUMsS0FBSyxFQUFQLElBQWEsVUFBZCxHQUE0QixNQUE3QixLQUF3QyxFQUF2RSxDQUFMO0FBQ0FBLE1BQUFBLENBQUMsSUFBSUEsQ0FBQyxLQUFLLEVBQVg7QUFDQUEsTUFBQUEsQ0FBQyxHQUFLLENBQUNBLENBQUMsR0FBRyxNQUFMLElBQWUsVUFBaEIsSUFBK0IsQ0FBRSxDQUFDQSxDQUFDLEtBQUssRUFBUCxJQUFhLFVBQWQsR0FBNEIsTUFBN0IsS0FBd0MsRUFBdkUsQ0FBTDtBQUVBSCxNQUFBQSxDQUFDLEdBQUssQ0FBQ0EsQ0FBQyxHQUFHLE1BQUwsSUFBZSxVQUFoQixJQUErQixDQUFFLENBQUNBLENBQUMsS0FBSyxFQUFQLElBQWEsVUFBZCxHQUE0QixNQUE3QixLQUF3QyxFQUF2RSxDQUFELEdBQStFRyxDQUFuRjtBQUVBTCxNQUFBQSxDQUFDLElBQUksQ0FBTDtBQUNBLFFBQUVHLENBQUY7QUFDSDs7QUFFRCxZQUFRSCxDQUFSO0FBQ0ksV0FBSyxDQUFMO0FBQVFFLFFBQUFBLENBQUMsSUFBSSxDQUFDRSxRQUFRLENBQUNFLElBQVQsQ0FBY1IsS0FBZCxFQUFxQkssQ0FBQyxHQUFHLENBQXpCLElBQThCLElBQS9CLEtBQXdDLEVBQTdDOztBQUNSLFdBQUssQ0FBTDtBQUFRRCxRQUFBQSxDQUFDLElBQUksQ0FBQ0UsUUFBUSxDQUFDRSxJQUFULENBQWNSLEtBQWQsRUFBcUJLLENBQUMsR0FBRyxDQUF6QixJQUE4QixJQUEvQixLQUF3QyxDQUE3Qzs7QUFDUixXQUFLLENBQUw7QUFBUUQsUUFBQUEsQ0FBQyxJQUFLRSxRQUFRLENBQUNFLElBQVQsQ0FBY1IsS0FBZCxFQUFxQkssQ0FBckIsSUFBMEIsSUFBaEM7QUFDQUQsUUFBQUEsQ0FBQyxHQUFLLENBQUNBLENBQUMsR0FBRyxNQUFMLElBQWUsVUFBaEIsSUFBK0IsQ0FBRSxDQUFDQSxDQUFDLEtBQUssRUFBUCxJQUFhLFVBQWQsR0FBNEIsTUFBN0IsS0FBd0MsRUFBdkUsQ0FBTDtBQUpaOztBQU9BQSxJQUFBQSxDQUFDLElBQUlBLENBQUMsS0FBSyxFQUFYO0FBQ0FBLElBQUFBLENBQUMsR0FBSyxDQUFDQSxDQUFDLEdBQUcsTUFBTCxJQUFlLFVBQWhCLElBQStCLENBQUUsQ0FBQ0EsQ0FBQyxLQUFLLEVBQVAsSUFBYSxVQUFkLEdBQTRCLE1BQTdCLEtBQXdDLEVBQXZFLENBQUw7QUFDQUEsSUFBQUEsQ0FBQyxJQUFJQSxDQUFDLEtBQUssRUFBWDtBQUVBLFdBQU9BLENBQUMsS0FBSyxDQUFiO0FBQ0giLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogSlMgSW1wbGVtZW50YXRpb24gb2YgTXVybXVySGFzaDJcclxuICpcclxuICogQGF1dGhvciA8YSBocmVmPVwibWFpbHRvOmdhcnkuY291cnRAZ21haWwuY29tXCI+R2FyeSBDb3VydDwvYT5cclxuICogQHNlZSBodHRwOi8vZ2l0aHViLmNvbS9nYXJ5Y291cnQvbXVybXVyaGFzaC1qc1xyXG4gKiBAYXV0aG9yIDxhIGhyZWY9XCJtYWlsdG86YWFwcGxlYnlAZ21haWwuY29tXCI+QXVzdGluIEFwcGxlYnk8L2E+XHJcbiAqIEBzZWUgaHR0cDovL3NpdGVzLmdvb2dsZS5jb20vc2l0ZS9tdXJtdXJoYXNoL1xyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIEFTQ0lJIG9ubHlcclxuICogQHBhcmFtIHtudW1iZXJ9IHNlZWQgUG9zaXRpdmUgaW50ZWdlciBvbmx5XHJcbiAqIEByZXR1cm4ge251bWJlcn0gMzItYml0IHBvc2l0aXZlIGludGVnZXIgaGFzaFxyXG4gKi9cclxuXHJcbmNvbnN0IGdldFVpbnQ4Rm9yU3RyaW5nID0gU3RyaW5nLnByb3RvdHlwZS5jaGFyQ29kZUF0O1xyXG5mdW5jdGlvbiBnZXRVaW50OEZvckFycmF5ICh0aGlzOiBVaW50OEFycmF5LCBpZHg6IG51bWJlcikgeyByZXR1cm4gdGhpc1tpZHhdOyB9XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbXVybXVyaGFzaDJfMzJfZ2MgKGlucHV0OiBzdHJpbmcgfCBVaW50OEFycmF5LCBzZWVkOiBudW1iZXIpIHtcclxuICAgIGxldCBsID0gaW5wdXQubGVuZ3RoO1xyXG4gICAgbGV0IGggPSBzZWVkIF4gbDtcclxuICAgIGxldCBpID0gMDtcclxuICAgIGNvbnN0IGdldFVpbnQ4ID0gdHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJyA/IGdldFVpbnQ4Rm9yU3RyaW5nIDogZ2V0VWludDhGb3JBcnJheTtcclxuXHJcbiAgICB3aGlsZSAobCA+PSA0KSB7XHJcbiAgICAgICAgbGV0IGsgPVxyXG4gICAgICAgICAgICAoKGdldFVpbnQ4LmNhbGwoaW5wdXQsIGkpICYgMHhmZikpIHxcclxuICAgICAgICAgICAgKChnZXRVaW50OC5jYWxsKGlucHV0LCArK2kpICYgMHhmZikgPDwgOCkgfFxyXG4gICAgICAgICAgICAoKGdldFVpbnQ4LmNhbGwoaW5wdXQsICsraSkgJiAweGZmKSA8PCAxNikgfFxyXG4gICAgICAgICAgICAoKGdldFVpbnQ4LmNhbGwoaW5wdXQsICsraSkgJiAweGZmKSA8PCAyNCk7XHJcblxyXG4gICAgICAgIGsgPSAoKChrICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUpICsgKCgoKGsgPj4+IDE2KSAqIDB4NWJkMWU5OTUpICYgMHhmZmZmKSA8PCAxNikpO1xyXG4gICAgICAgIGsgXj0gayA+Pj4gMjQ7XHJcbiAgICAgICAgayA9ICgoKGsgJiAweGZmZmYpICogMHg1YmQxZTk5NSkgKyAoKCgoayA+Pj4gMTYpICogMHg1YmQxZTk5NSkgJiAweGZmZmYpIDw8IDE2KSk7XHJcblxyXG4gICAgICAgIGggPSAoKChoICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUpICsgKCgoKGggPj4+IDE2KSAqIDB4NWJkMWU5OTUpICYgMHhmZmZmKSA8PCAxNikpIF4gaztcclxuXHJcbiAgICAgICAgbCAtPSA0O1xyXG4gICAgICAgICsraTtcclxuICAgIH1cclxuXHJcbiAgICBzd2l0Y2ggKGwpIHtcclxuICAgICAgICBjYXNlIDM6IGggXj0gKGdldFVpbnQ4LmNhbGwoaW5wdXQsIGkgKyAyKSAmIDB4ZmYpIDw8IDE2O1xyXG4gICAgICAgIGNhc2UgMjogaCBePSAoZ2V0VWludDguY2FsbChpbnB1dCwgaSArIDEpICYgMHhmZikgPDwgODtcclxuICAgICAgICBjYXNlIDE6IGggXj0gKGdldFVpbnQ4LmNhbGwoaW5wdXQsIGkpICYgMHhmZik7XHJcbiAgICAgICAgICAgICAgICBoID0gKCgoaCAmIDB4ZmZmZikgKiAweDViZDFlOTk1KSArICgoKChoID4+PiAxNikgKiAweDViZDFlOTk1KSAmIDB4ZmZmZikgPDwgMTYpKTtcclxuICAgIH1cclxuXHJcbiAgICBoIF49IGggPj4+IDEzO1xyXG4gICAgaCA9ICgoKGggJiAweGZmZmYpICogMHg1YmQxZTk5NSkgKyAoKCgoaCA+Pj4gMTYpICogMHg1YmQxZTk5NSkgJiAweGZmZmYpIDw8IDE2KSk7XHJcbiAgICBoIF49IGggPj4+IDE1O1xyXG5cclxuICAgIHJldHVybiBoID4+PiAwO1xyXG59XHJcbiJdfQ==