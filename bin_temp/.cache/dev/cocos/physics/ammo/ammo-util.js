(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "./ammo-instantiated.js", "../../core/index.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("./ammo-instantiated.js"), require("../../core/index.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.ammoInstantiated, global.index);
    global.ammoUtil = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _ammoInstantiated, _index) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.cocos2AmmoVec3 = cocos2AmmoVec3;
  _exports.ammo2CocosVec3 = ammo2CocosVec3;
  _exports.cocos2AmmoQuat = cocos2AmmoQuat;
  _exports.ammo2CocosQuat = ammo2CocosQuat;
  _exports.ammoDeletePtr = ammoDeletePtr;
  _exports.cocos2AmmoTriMesh = cocos2AmmoTriMesh;
  _ammoInstantiated = _interopRequireDefault(_ammoInstantiated);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function cocos2AmmoVec3(out, v) {
    out.setValue(v.x, v.y, v.z);
    return out;
  }

  function ammo2CocosVec3(out, v) {
    out.x = v.x();
    out.y = v.y();
    out.z = v.z();
    return out;
  }

  function cocos2AmmoQuat(out, q) {
    out.setValue(q.x, q.y, q.z, q.w);
    return out;
  }

  function ammo2CocosQuat(out, q) {
    out.x = q.x();
    out.y = q.y();
    out.z = q.z();
    out.w = q.w();
    return out;
  }

  function ammoDeletePtr(obj, klass) {
    delete klass.__cache__[obj.ptr];
  } // TODO : Ammo['deletePtr'] = deletePtr;


  function cocos2AmmoTriMesh(out, mesh) {
    var len = mesh.renderingSubMeshes.length;

    for (var i = 0; i < len; i++) {
      var subMesh = mesh.renderingSubMeshes[i];
      var geoInfo = subMesh.geometricInfo;

      if (geoInfo) {
        var primitiveMode = subMesh.primitiveMode;
        var vb = geoInfo.positions;
        var ib = geoInfo.indices;

        if (primitiveMode == _index.GFXPrimitiveMode.TRIANGLE_LIST) {
          var cnt = ib.length;

          for (var j = 0; j < cnt; j += 3) {
            var i0 = ib[j] * 3;
            var i1 = ib[j + 1] * 3;
            var i2 = ib[j + 2] * 3;
            var v0 = new _ammoInstantiated.default.btVector3(vb[i0], vb[i0 + 1], vb[i0 + 2]);
            var v1 = new _ammoInstantiated.default.btVector3(vb[i1], vb[i1 + 1], vb[i1 + 2]);
            var v2 = new _ammoInstantiated.default.btVector3(vb[i2], vb[i2 + 1], vb[i2 + 2]);
            out.addTriangle(v0, v1, v2);

            _ammoInstantiated.default.destroy(v0);

            _ammoInstantiated.default.destroy(v1);

            _ammoInstantiated.default.destroy(v2);
          }
        } else if (primitiveMode == _index.GFXPrimitiveMode.TRIANGLE_STRIP) {
          var _cnt = ib.length - 2;

          var rev = 0;

          for (var _j = 0; _j < _cnt; _j += 1) {
            var _i = ib[_j - rev] * 3;

            var _i2 = ib[_j + rev + 1] * 3;

            var _i3 = ib[_j + 2] * 3;

            var _v = new _ammoInstantiated.default.btVector3(vb[_i], vb[_i + 1], vb[_i + 2]);

            var _v2 = new _ammoInstantiated.default.btVector3(vb[_i2], vb[_i2 + 1], vb[_i2 + 2]);

            var _v3 = new _ammoInstantiated.default.btVector3(vb[_i3], vb[_i3 + 1], vb[_i3 + 2]);

            out.addTriangle(_v, _v2, _v3);

            _ammoInstantiated.default.destroy(_v);

            _ammoInstantiated.default.destroy(_v2);

            _ammoInstantiated.default.destroy(_v3);
          }
        } else if (primitiveMode == _index.GFXPrimitiveMode.TRIANGLE_FAN) {
          var _cnt2 = ib.length - 1;

          var _i4 = ib[0] * 3;

          var _v4 = new _ammoInstantiated.default.btVector3(vb[_i4], vb[_i4 + 1], vb[_i4 + 2]);

          for (var _j2 = 1; _j2 < _cnt2; _j2 += 1) {
            var _i5 = ib[_j2] * 3;

            var _i6 = ib[_j2 + 1] * 3;

            var _v5 = new _ammoInstantiated.default.btVector3(vb[_i5], vb[_i5 + 1], vb[_i5 + 2]);

            var _v6 = new _ammoInstantiated.default.btVector3(vb[_i6], vb[_i6 + 1], vb[_i6 + 2]);

            out.addTriangle(_v4, _v5, _v6);

            _ammoInstantiated.default.destroy(_v4);

            _ammoInstantiated.default.destroy(_v5);

            _ammoInstantiated.default.destroy(_v6);
          }
        }
      }
    }

    return out;
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,