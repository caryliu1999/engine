(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "./physics-selector.js", "../../core/index.js", "../../core/default-constants.js", "./physics-enum.js", "../../core/global-exports.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("./physics-selector.js"), require("../../core/index.js"), require("../../core/default-constants.js"), require("./physics-enum.js"), require("../../core/global-exports.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.physicsSelector, global.index, global.defaultConstants, global.physicsEnum, global.globalExports);
    global.instance = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _physicsSelector, _index, _defaultConstants, _physicsEnum, _globalExports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.checkPhysicsModule = checkPhysicsModule;
  _exports.createPhysicsWorld = createPhysicsWorld;
  _exports.createRigidBody = createRigidBody;
  _exports.createShape = createShape;
  _exports.createConstraint = createConstraint;

  /**
   * @hidden
   */
  function checkPhysicsModule(obj) {
    if (_defaultConstants.DEBUG && !_defaultConstants.TEST && !_defaultConstants.EDITOR && obj == null) {
      (0, _index.errorID)(9600);
      return true;
    }

    return false;
  }

  function createPhysicsWorld() {
    if (_defaultConstants.DEBUG && checkPhysicsModule(_physicsSelector.WRAPPER.PhysicsWorld)) {
      return null;
    }

    return new _physicsSelector.WRAPPER.PhysicsWorld();
  }

  function createRigidBody() {
    if (_defaultConstants.DEBUG && checkPhysicsModule(_physicsSelector.WRAPPER.RigidBody)) {
      return null;
    }

    return new _physicsSelector.WRAPPER.RigidBody();
  }

  var CREATE_COLLIDER_PROXY = {
    INITED: false
  };

  var FUNC = function FUNC() {
    return 0;
  };

  var ENTIRE_SHAPE = {
    impl: null,
    collider: null,
    attachedRigidBody: null,
    initialize: FUNC,
    onLoad: FUNC,
    onEnable: FUNC,
    onDisable: FUNC,
    onDestroy: FUNC,
    setGroup: FUNC,
    getGroup: FUNC,
    addGroup: FUNC,
    removeGroup: FUNC,
    setMask: FUNC,
    getMask: FUNC,
    addMask: FUNC,
    removeMask: FUNC,
    setMaterial: FUNC,
    setAsTrigger: FUNC,
    setCenter: FUNC,
    getAABB: FUNC,
    getBoundingSphere: FUNC,
    setSize: FUNC,
    setRadius: FUNC,
    setCylinderHeight: FUNC,
    setDirection: FUNC,
    setHeight: FUNC,
    setShapeType: FUNC,
    setVertices: FUNC,
    setMesh: FUNC,
    setTerrain: FUNC,
    setNormal: FUNC,
    setConstant: FUNC
  };

  function createShape(type) {
    initColliderProxy();
    return CREATE_COLLIDER_PROXY[type]();
  }

  function initColliderProxy() {
    if (CREATE_COLLIDER_PROXY.INITED) return;
    CREATE_COLLIDER_PROXY.INITED = true;
    var PHYSICS_BUILTIN = _globalExports.legacyCC._global['CC_PHYSICS_BUILTIN'];
    var PHYSICS_CANNON = _globalExports.legacyCC._global['CC_PHYSICS_CANNON'];
    var PHYSICS_AMMO = _globalExports.legacyCC._global['CC_PHYSICS_AMMO'];

    CREATE_COLLIDER_PROXY[_physicsEnum.EColliderType.BOX] = function createBoxShape(size) {
      if (_defaultConstants.DEBUG && checkPhysicsModule(_physicsSelector.WRAPPER.BoxShape)) {
        return ENTIRE_SHAPE;
      }

      return new _physicsSelector.WRAPPER.BoxShape(size);
    };

    CREATE_COLLIDER_PROXY[_physicsEnum.EColliderType.SPHERE] = function createSphereShape(radius) {
      if (_defaultConstants.DEBUG && checkPhysicsModule(_physicsSelector.WRAPPER.SphereShape)) {
        return ENTIRE_SHAPE;
      }

      return new _physicsSelector.WRAPPER.SphereShape(radius);
    };

    CREATE_COLLIDER_PROXY[_physicsEnum.EColliderType.CAPSULE] = function createCapsuleShape() {
      var radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.5;
      var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
      var dir = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

      if (PHYSICS_BUILTIN || PHYSICS_AMMO) {
        if (_defaultConstants.DEBUG && checkPhysicsModule(_physicsSelector.WRAPPER.CapsuleShape)) {
          return ENTIRE_SHAPE;
        }

        return new _physicsSelector.WRAPPER.CapsuleShape(radius, height, dir);
      } else {
        (0, _index.warnID)(9610);
        return ENTIRE_SHAPE;
      }
    };

    CREATE_COLLIDER_PROXY[_physicsEnum.EColliderType.CYLINDER] = function createCylinderShape() {
      var radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.5;
      var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
      var dir = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

      if (PHYSICS_CANNON || PHYSICS_AMMO) {
        if (_defaultConstants.DEBUG && checkPhysicsModule(_physicsSelector.WRAPPER.CylinderShape)) {
          return ENTIRE_SHAPE;
        }

        return new _physicsSelector.WRAPPER.CylinderShape(radius, height, dir);
      } else {
        (0, _index.warnID)(9612);
        return ENTIRE_SHAPE;
      }
    };

    CREATE_COLLIDER_PROXY[_physicsEnum.EColliderType.CONE] = function createConeShape() {
      var radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.5;
      var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var dir = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

      if (PHYSICS_CANNON || PHYSICS_AMMO) {
        if (_defaultConstants.DEBUG && checkPhysicsModule(_physicsSelector.WRAPPER.ConeShape)) {
          return ENTIRE_SHAPE;
        }

        return new _physicsSelector.WRAPPER.ConeShape(radius, height, dir);
      } else {
        (0, _index.warnID)(9612);
        return ENTIRE_SHAPE;
      }
    };

    CREATE_COLLIDER_PROXY[_physicsEnum.EColliderType.MESH] = function createTrimeshShape() {
      if (PHYSICS_CANNON || PHYSICS_AMMO) {
        if (_defaultConstants.DEBUG && checkPhysicsModule(_physicsSelector.WRAPPER.TrimeshShape)) {
          return ENTIRE_SHAPE;
        }

        return new _physicsSelector.WRAPPER.TrimeshShape();
      } else {
        (0, _index.warnID)(9611);
        return ENTIRE_SHAPE;
      }
    };

    CREATE_COLLIDER_PROXY[_physicsEnum.EColliderType.TERRAIN] = function createTerrainShape() {
      if (PHYSICS_CANNON || PHYSICS_AMMO) {
        if (_defaultConstants.DEBUG && checkPhysicsModule(_physicsSelector.WRAPPER.TerrainShape)) {
          return ENTIRE_SHAPE;
        }

        return new _physicsSelector.WRAPPER.TerrainShape();
      } else {
        (0, _index.warn)("[Physics]: builtin physics system doesn't support cylinder collider");
        return ENTIRE_SHAPE;
      }
    };

    CREATE_COLLIDER_PROXY[_physicsEnum.EColliderType.SIMPLEX] = function createSimplexShape() {
      if (PHYSICS_CANNON || PHYSICS_AMMO) {
        if (_defaultConstants.DEBUG && checkPhysicsModule(_physicsSelector.WRAPPER.SimplexShape)) {
          return ENTIRE_SHAPE;
        }

        return new _physicsSelector.WRAPPER.SimplexShape();
      } else {
        (0, _index.warn)("[Physics]: builtin physics system doesn't support simple collider");
        return ENTIRE_SHAPE;
      }
    };

    CREATE_COLLIDER_PROXY[_physicsEnum.EColliderType.PLANE] = function createPlaneShape() {
      if (PHYSICS_CANNON || PHYSICS_AMMO) {
        if (_defaultConstants.DEBUG && checkPhysicsModule(_physicsSelector.WRAPPER.PlaneShape)) {
          return ENTIRE_SHAPE;
        }

        return new _physicsSelector.WRAPPER.PlaneShape();
      } else {
        (0, _index.warn)("[Physics]: builtin physics system doesn't support plane collider");
        return ENTIRE_SHAPE;
      }
    };
  } /// CREATE CONSTRAINT ///


  var CREATE_CONSTRAINT_PROXY = {
    INITED: false
  };
  var ENTIRE_CONSTRAINT = {
    'impl': null,
    'initialize': FUNC,
    'onLoad': FUNC,
    'onEnable': FUNC,
    'onDisable': FUNC,
    'onDestroy': FUNC,
    'setEnableCollision': FUNC,
    'setConnectedBody': FUNC,
    'setPivotA': FUNC,
    'setPivotB': FUNC
  };

  function createConstraint(type) {
    initConstraintProxy();
    return CREATE_CONSTRAINT_PROXY[type]();
  }

  function initConstraintProxy() {
    if (CREATE_CONSTRAINT_PROXY.INITED) return;
    CREATE_CONSTRAINT_PROXY.INITED = true;
    var PHYSICS_BUILTIN = _globalExports.legacyCC._global['CC_PHYSICS_BUILTIN'];
    var PHYSICS_CANNON = _globalExports.legacyCC._global['CC_PHYSICS_CANNON'];
    var PHYSICS_AMMO = _globalExports.legacyCC._global['CC_PHYSICS_AMMO'];

    CREATE_CONSTRAINT_PROXY[_physicsEnum.EConstraintType.POINT_TO_POINT] = function createPointToPointConstraint() {
      if (PHYSICS_CANNON || PHYSICS_AMMO) {
        if (_defaultConstants.DEBUG && checkPhysicsModule(_physicsSelector.WRAPPER.PointToPointConstraint)) {
          return ENTIRE_CONSTRAINT;
        }

        return new _physicsSelector.WRAPPER.PointToPointConstraint();
      } else {
        (0, _index.warn)("[Physics]: builtin physics system doesn't support point to point constraint");
        return ENTIRE_CONSTRAINT;
      }
    };

    CREATE_CONSTRAINT_PROXY[_physicsEnum.EConstraintType.HINGE] = function createHingeConstraint() {
      if (PHYSICS_CANNON || PHYSICS_AMMO) {
        if (_defaultConstants.DEBUG && checkPhysicsModule(_physicsSelector.WRAPPER.HingeConstraint)) {
          return ENTIRE_CONSTRAINT;
        }

        return new _physicsSelector.WRAPPER.HingeConstraint();
      } else {
        (0, _index.warn)("[Physics]: builtin physics system doesn't support hinge constraint");
        return ENTIRE_CONSTRAINT;
      }
    };

    CREATE_CONSTRAINT_PROXY[_physicsEnum.EConstraintType.CONE_TWIST] = function createConeTwistConstraint() {
      if (PHYSICS_CANNON || PHYSICS_AMMO) {
        if (_defaultConstants.DEBUG && checkPhysicsModule(_physicsSelector.WRAPPER.ConeTwistConstraint)) {
          return null;
        }

        return new _physicsSelector.WRAPPER.ConeTwistConstraint();
      } else {
        (0, _index.warn)("[Physics]: builtin physics system doesn't support cone twist constraint");
        return ENTIRE_CONSTRAINT;
      }
    };
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImU6L2QwMDQ1MjUyMC9HaXRodWIvZW5naW5lL2NvY29zL3BoeXNpY3MvZnJhbWV3b3JrL2luc3RhbmNlLnRzIl0sIm5hbWVzIjpbImNoZWNrUGh5c2ljc01vZHVsZSIsIm9iaiIsIkRFQlVHIiwiVEVTVCIsIkVESVRPUiIsImNyZWF0ZVBoeXNpY3NXb3JsZCIsIldSQVBQRVIiLCJQaHlzaWNzV29ybGQiLCJjcmVhdGVSaWdpZEJvZHkiLCJSaWdpZEJvZHkiLCJDUkVBVEVfQ09MTElERVJfUFJPWFkiLCJJTklURUQiLCJGVU5DIiwiRU5USVJFX1NIQVBFIiwiaW1wbCIsImNvbGxpZGVyIiwiYXR0YWNoZWRSaWdpZEJvZHkiLCJpbml0aWFsaXplIiwib25Mb2FkIiwib25FbmFibGUiLCJvbkRpc2FibGUiLCJvbkRlc3Ryb3kiLCJzZXRHcm91cCIsImdldEdyb3VwIiwiYWRkR3JvdXAiLCJyZW1vdmVHcm91cCIsInNldE1hc2siLCJnZXRNYXNrIiwiYWRkTWFzayIsInJlbW92ZU1hc2siLCJzZXRNYXRlcmlhbCIsInNldEFzVHJpZ2dlciIsInNldENlbnRlciIsImdldEFBQkIiLCJnZXRCb3VuZGluZ1NwaGVyZSIsInNldFNpemUiLCJzZXRSYWRpdXMiLCJzZXRDeWxpbmRlckhlaWdodCIsInNldERpcmVjdGlvbiIsInNldEhlaWdodCIsInNldFNoYXBlVHlwZSIsInNldFZlcnRpY2VzIiwic2V0TWVzaCIsInNldFRlcnJhaW4iLCJzZXROb3JtYWwiLCJzZXRDb25zdGFudCIsImNyZWF0ZVNoYXBlIiwidHlwZSIsImluaXRDb2xsaWRlclByb3h5IiwiUEhZU0lDU19CVUlMVElOIiwibGVnYWN5Q0MiLCJfZ2xvYmFsIiwiUEhZU0lDU19DQU5OT04iLCJQSFlTSUNTX0FNTU8iLCJFQ29sbGlkZXJUeXBlIiwiQk9YIiwiY3JlYXRlQm94U2hhcGUiLCJzaXplIiwiQm94U2hhcGUiLCJTUEhFUkUiLCJjcmVhdGVTcGhlcmVTaGFwZSIsInJhZGl1cyIsIlNwaGVyZVNoYXBlIiwiQ0FQU1VMRSIsImNyZWF0ZUNhcHN1bGVTaGFwZSIsImhlaWdodCIsImRpciIsIkNhcHN1bGVTaGFwZSIsIkNZTElOREVSIiwiY3JlYXRlQ3lsaW5kZXJTaGFwZSIsIkN5bGluZGVyU2hhcGUiLCJDT05FIiwiY3JlYXRlQ29uZVNoYXBlIiwiQ29uZVNoYXBlIiwiTUVTSCIsImNyZWF0ZVRyaW1lc2hTaGFwZSIsIlRyaW1lc2hTaGFwZSIsIlRFUlJBSU4iLCJjcmVhdGVUZXJyYWluU2hhcGUiLCJUZXJyYWluU2hhcGUiLCJTSU1QTEVYIiwiY3JlYXRlU2ltcGxleFNoYXBlIiwiU2ltcGxleFNoYXBlIiwiUExBTkUiLCJjcmVhdGVQbGFuZVNoYXBlIiwiUGxhbmVTaGFwZSIsIkNSRUFURV9DT05TVFJBSU5UX1BST1hZIiwiRU5USVJFX0NPTlNUUkFJTlQiLCJjcmVhdGVDb25zdHJhaW50IiwiaW5pdENvbnN0cmFpbnRQcm94eSIsIkVDb25zdHJhaW50VHlwZSIsIlBPSU5UX1RPX1BPSU5UIiwiY3JlYXRlUG9pbnRUb1BvaW50Q29uc3RyYWludCIsIlBvaW50VG9Qb2ludENvbnN0cmFpbnQiLCJISU5HRSIsImNyZWF0ZUhpbmdlQ29uc3RyYWludCIsIkhpbmdlQ29uc3RyYWludCIsIkNPTkVfVFdJU1QiLCJjcmVhdGVDb25lVHdpc3RDb25zdHJhaW50IiwiQ29uZVR3aXN0Q29uc3RyYWludCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7OztBQWVPLFdBQVNBLGtCQUFULENBQTZCQyxHQUE3QixFQUF1QztBQUMxQyxRQUFJQywyQkFBUyxDQUFDQyxzQkFBVixJQUFrQixDQUFDQyx3QkFBbkIsSUFBNkJILEdBQUcsSUFBSSxJQUF4QyxFQUE4QztBQUMxQywwQkFBUSxJQUFSO0FBQ0EsYUFBTyxJQUFQO0FBQ0g7O0FBQ0QsV0FBTyxLQUFQO0FBQ0g7O0FBRU0sV0FBU0ksa0JBQVQsR0FBOEM7QUFDakQsUUFBSUgsMkJBQVNGLGtCQUFrQixDQUFDTSx5QkFBUUMsWUFB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QUFJbkQsMkJBQVNGLGtCQUFrQixDQUFDTSx5QkFBUXVGLHNCQUFULENBQS9CLEVBQWlFO0FBQUUsaUJBQU9OLGlCQUFQO0FBQTJCOztBQUM5RixlQUFPLElBQUlqRix5QkFBUXVGLHNCQUFaLEVBQVA7QUFDSCxPQUhELE1BR087QUFDSCx5QkFBSyw2RUFBTDtBQUNBLGVBQU9OLGlCQUFQO0FBQ0g7QUFDSixLQVJEOztBQVVBRCxJQUFBQSx1QkFBdUIsQ0FBQ0ksNkJBQWdCSSxLQUFqQixDQUF2QixHQUFpRCxTQUFTQyxxQkFBVCxHQUFvRDtBQUNqRyxVQUFJM0MsY0FBYyxJQUFJQyxZQUF0QixFQUFvQztBQUNoQyxZQUFJbkQsMkJBQVNGLGtCQUFrQixDQUFDTSx5QkFBUTBGLGVBQVQsQ0FBL0IsRUFBMEQ7QUFBRSxpQkFBT1QsaUJBQVA7QUFBMkI7O0FBQ3ZGLGVBQU8sSUFBSWpGLHlCQUFRMEYsZUFBWixFQUFQO0FBQ0gsT0FIRCxNQUdPO0FBQ0gseUJBQUssb0VBQUw7QUFDQSxlQUFPVCxpQkFBUDtBQUNIO0FBQ0osS0FSRDs7QUFVQUQsSUFBQUEsdUJBQXVCLENBQUNJLDZCQUFnQk8sVUFBakIsQ0FBdkIsR0FBc0QsU0FBU0MseUJBQVQsR0FBNEQ7QUFDOUcsVUFBSTlDLGNBQWMsSUFBSUMsWUFBdEIsRUFBb0M7QUFDaEMsWUFBSW5ELDJCQUFTRixrQkFBa0IsQ0FBQ00seUJBQVE2RixtQkFBVCxDQUEvQixFQUE4RDtBQUFFLGlCQUFPLElBQVA7QUFBcUI7O0FBQ3JGLGVBQU8sSUFBSTdGLHlCQUFRNkYsbUJBQVosRUFBUDtBQUNILE9BSEQsTUFHTztBQUNILHlCQUFLLHlFQUFMO0FBQ0EsZUFBT1osaUJBQVA7QUFDSDtBQUNKLEtBUkQ7QUFTSCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAaGlkZGVuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgSVZlYzNMaWtlIH0gZnJvbSAnLi4vLi4vY29yZS9tYXRoJztcclxuaW1wb3J0IHsgSVJpZ2lkQm9keSB9IGZyb20gJy4uL3NwZWMvaS1yaWdpZC1ib2R5JztcclxuaW1wb3J0IHsgV1JBUFBFUiB9IGZyb20gJy4vcGh5c2ljcy1zZWxlY3Rvcic7XHJcbmltcG9ydCB7IElCb3hTaGFwZSwgSVNwaGVyZVNoYXBlLCBJQ2Fwc3VsZVNoYXBlLCBJVHJpbWVzaFNoYXBlLCBJQ3lsaW5kZXJTaGFwZSwgSUNvbmVTaGFwZSwgSVRlcnJhaW5TaGFwZSwgSVNpbXBsZXhTaGFwZSwgSVBsYW5lU2hhcGUsIElCYXNlU2hhcGUgfSBmcm9tICcuLi9zcGVjL2ktcGh5c2ljcy1zaGFwZSc7XHJcbmltcG9ydCB7IElQaHlzaWNzV29ybGQgfSBmcm9tICcuLi9zcGVjL2ktcGh5c2ljcy13b3JsZCc7XHJcbmltcG9ydCB7IGVycm9ySUQsIHdhcm5JRCwgd2FybiB9IGZyb20gJy4uLy4uL2NvcmUnO1xyXG5pbXBvcnQgeyBFRElUT1IsIERFQlVHLCBURVNUIH0gZnJvbSAnaW50ZXJuYWw6Y29uc3RhbnRzJztcclxuaW1wb3J0IHsgRUNvbGxpZGVyVHlwZSwgRUNvbnN0cmFpbnRUeXBlIH0gZnJvbSAnLi9waHlzaWNzLWVudW0nO1xyXG5pbXBvcnQgeyBJQmFzZUNvbnN0cmFpbnQsIElQb2ludFRvUG9pbnRDb25zdHJhaW50LCBJSGluZ2VDb25zdHJhaW50LCBJQ29uZVR3aXN0Q29uc3RyYWludCB9IGZyb20gJy4uL3NwZWMvaS1waHlzaWNzLWNvbnN0cmFpbnQnO1xyXG5pbXBvcnQgeyBsZWdhY3lDQyB9IGZyb20gJy4uLy4uL2NvcmUvZ2xvYmFsLWV4cG9ydHMnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrUGh5c2ljc01vZHVsZSAob2JqOiBhbnkpIHtcclxuICAgIGlmIChERUJVRyAmJiAhVEVTVCAmJiAhRURJVE9SICYmIG9iaiA9PSBudWxsKSB7XHJcbiAgICAgICAgZXJyb3JJRCg5NjAwKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVBoeXNpY3NXb3JsZCAoKTogSVBoeXNpY3NXb3JsZCB7XHJcbiAgICBpZiAoREVCVUcgJiYgY2hlY2tQaHlzaWNzTW9kdWxlKFdSQVBQRVIuUGh5c2ljc1dvcmxkKSkgeyByZXR1cm4gbnVsbCBhcyBhbnk7IH1cclxuICAgIHJldHVybiBuZXcgV1JBUFBFUi5QaHlzaWNzV29ybGQoKSBhcyBJUGh5c2ljc1dvcmxkO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUmlnaWRCb2R5ICgpOiBJUmlnaWRCb2R5IHtcclxuICAgIGlmIChERUJVRyAmJiBjaGVja1BoeXNpY3NNb2R1bGUoV1JBUFBFUi5SaWdpZEJvZHkpKSB7IHJldHVybiBudWxsIGFzIGFueTsgfVxyXG4gICAgcmV0dXJuIG5ldyBXUkFQUEVSLlJpZ2lkQm9keSgpIGFzIElSaWdpZEJvZHk7XHJcbn1cclxuXHJcbmNvbnN0IENSRUFURV9DT0xMSURFUl9QUk9YWSA9IHsgSU5JVEVEOiBmYWxzZSB9O1xyXG5cclxuY29uc3QgRlVOQyA9ICguLi52OiBhbnkpID0+IHsgcmV0dXJuIDAgYXMgYW55OyB9O1xyXG5pbnRlcmZhY2UgSUVudGlyZVNoYXBlIGV4dGVuZHMgSUJveFNoYXBlLCBJU3BoZXJlU2hhcGUsIElDYXBzdWxlU2hhcGUsIElUcmltZXNoU2hhcGUsIElDeWxpbmRlclNoYXBlLCBJQ29uZVNoYXBlLCBJVGVycmFpblNoYXBlLCBJU2ltcGxleFNoYXBlLCBJUGxhbmVTaGFwZSB7IH1cclxuY29uc3QgRU5USVJFX1NIQVBFOiBJRW50aXJlU2hhcGUgPSB7XHJcbiAgICBpbXBsOiBudWxsLFxyXG4gICAgY29sbGlkZXI6IG51bGwgYXMgdW5rbm93biBhcyBhbnksXHJcbiAgICBhdHRhY2hlZFJpZ2lkQm9keTogbnVsbCxcclxuICAgIGluaXRpYWxpemU6IEZVTkMsXHJcbiAgICBvbkxvYWQ6IEZVTkMsXHJcbiAgICBvbkVuYWJsZTogRlVOQyxcclxuICAgIG9uRGlzYWJsZTogRlVOQyxcclxuICAgIG9uRGVzdHJveTogRlVOQyxcclxuICAgIHNldEdyb3VwOiBGVU5DLFxyXG4gICAgZ2V0R3JvdXA6IEZVTkMsXHJcbiAgICBhZGRHcm91cDogRlVOQyxcclxuICAgIHJlbW92ZUdyb3VwOiBGVU5DLFxyXG4gICAgc2V0TWFzazogRlVOQyxcclxuICAgIGdldE1hc2s6IEZVTkMsXHJcbiAgICBhZGRNYXNrOiBGVU5DLFxyXG4gICAgcmVtb3ZlTWFzazogRlVOQyxcclxuICAgIHNldE1hdGVyaWFsOiBGVU5DLFxyXG4gICAgc2V0QXNUcmlnZ2VyOiBGVU5DLFxyXG4gICAgc2V0Q2VudGVyOiBGVU5DLFxyXG4gICAgZ2V0QUFCQjogRlVOQyxcclxuICAgIGdldEJvdW5kaW5nU3BoZXJlOiBGVU5DLFxyXG4gICAgc2V0U2l6ZTogRlVOQyxcclxuICAgIHNldFJhZGl1czogRlVOQyxcclxuICAgIHNldEN5bGluZGVySGVpZ2h0OiBGVU5DLFxyXG4gICAgc2V0RGlyZWN0aW9uOiBGVU5DLFxyXG4gICAgc2V0SGVpZ2h0OiBGVU5DLFxyXG4gICAgc2V0U2hhcGVUeXBlOiBGVU5DLFxyXG4gICAgc2V0VmVydGljZXM6IEZVTkMsXHJcbiAgICBzZXRNZXNoOiBGVU5DLFxyXG4gICAgc2V0VGVycmFpbjogRlVOQyxcclxuICAgIHNldE5vcm1hbDogRlVOQyxcclxuICAgIHNldENvbnN0YW50OiBGVU5DLFxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2hhcGUgKHR5cGU6IEVDb2xsaWRlclR5cGUpOiBJQmFzZVNoYXBlIHtcclxuICAgIGluaXRDb2xsaWRlclByb3h5KCk7XHJcbiAgICByZXR1cm4gQ1JFQVRFX0NPTExJREVSX1BST1hZW3R5cGVdKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluaXRDb2xsaWRlclByb3h5ICgpIHtcclxuICAgIGlmIChDUkVBVEVfQ09MTElERVJfUFJPWFkuSU5JVEVEKSByZXR1cm47XHJcbiAgICBDUkVBVEVfQ09MTElERVJfUFJPWFkuSU5JVEVEID0gdHJ1ZTtcclxuXHJcbiAgICBjb25zdCBQSFlTSUNTX0JVSUxUSU4gPSBsZWdhY3lDQy5fZ2xvYmFsWydDQ19QSFlTSUNTX0JVSUxUSU4nXTtcclxuICAgIGNvbnN0IFBIWVNJQ1NfQ0FOTk9OID0gbGVnYWN5Q0MuX2dsb2JhbFsnQ0NfUEhZU0lDU19DQU5OT04nXTtcclxuICAgIGNvbnN0IFBIWVNJQ1NfQU1NTyA9IGxlZ2FjeUNDLl9nbG9iYWxbJ0NDX1BIWVNJQ1NfQU1NTyddO1xyXG5cclxuICAgIENSRUFURV9DT0xMSURFUl9QUk9YWVtFQ29sbGlkZXJUeXBlLkJPWF0gPSBmdW5jdGlvbiBjcmVhdGVCb3hTaGFwZSAoc2l6ZTogSVZlYzNMaWtlKTogSUJveFNoYXBlIHtcclxuICAgICAgICBpZiAoREVCVUcgJiYgY2hlY2tQaHlzaWNzTW9kdWxlKFdSQVBQRVIuQm94U2hhcGUpKSB7IHJldHVybiBFTlRJUkVfU0hBUEU7IH1cclxuICAgICAgICByZXR1cm4gbmV3IFdSQVBQRVIuQm94U2hhcGUoc2l6ZSkgYXMgSUJveFNoYXBlO1xyXG4gICAgfVxyXG5cclxuICAgIENSRUFURV9DT0xMSURFUl9QUk9YWVtFQ29sbGlkZXJUeXBlLlNQSEVSRV0gPSBmdW5jdGlvbiBjcmVhdGVTcGhlcmVTaGFwZSAocmFkaXVzOiBudW1iZXIpOiBJU3BoZXJlU2hhcGUge1xyXG4gICAgICAgIGlmIChERUJVRyAmJiBjaGVja1BoeXNpY3NNb2R1bGUoV1JBUFBFUi5TcGhlcmVTaGFwZSkpIHsgcmV0dXJuIEVOVElSRV9TSEFQRTsgfVxyXG4gICAgICAgIHJldHVybiBuZXcgV1JBUFBFUi5TcGhlcmVTaGFwZShyYWRpdXMpIGFzIElTcGhlcmVTaGFwZTtcclxuICAgIH1cclxuXHJcbiAgICBDUkVBVEVfQ09MTElERVJfUFJPWFlbRUNvbGxpZGVyVHlwZS5DQVBTVUxFXSA9IGZ1bmN0aW9uIGNyZWF0ZUNhcHN1bGVTaGFwZSAocmFkaXVzID0gMC41LCBoZWlnaHQgPSAyLCBkaXIgPSAxKTogSUNhcHN1bGVTaGFwZSB7XHJcbiAgICAgICAgaWYgKFBIWVNJQ1NfQlVJTFRJTiB8fCBQSFlTSUNTX0FNTU8pIHtcclxuICAgICAgICAgICAgaWYgKERFQlVHICYmIGNoZWNrUGh5c2ljc01vZHVsZShXUkFQUEVSLkNhcHN1bGVTaGFwZSkpIHsgcmV0dXJuIEVOVElSRV9TSEFQRTsgfVxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFdSQVBQRVIuQ2Fwc3VsZVNoYXBlKHJhZGl1cywgaGVpZ2h0LCBkaXIpIGFzIElDYXBzdWxlU2hhcGU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgd2FybklEKDk2MTApO1xyXG4gICAgICAgICAgICByZXR1cm4gRU5USVJFX1NIQVBFO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBDUkVBVEVfQ09MTElERVJfUFJPWFlbRUNvbGxpZGVyVHlwZS5DWUxJTkRFUl0gPSBmdW5jdGlvbiBjcmVhdGVDeWxpbmRlclNoYXBlIChyYWRpdXMgPSAwLjUsIGhlaWdodCA9IDIsIGRpciA9IDEpOiBJQ3lsaW5kZXJTaGFwZSB7XHJcbiAgICAgICAgaWYgKFBIWVNJQ1NfQ0FOTk9OIHx8IFBIWVNJQ1NfQU1NTykge1xyXG4gICAgICAgICAgICBpZiAoREVCVUcgJiYgY2hlY2tQaHlzaWNzTW9kdWxlKFdSQVBQRVIuQ3lsaW5kZXJTaGFwZSkpIHsgcmV0dXJuIEVOVElSRV9TSEFQRTsgfVxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFdSQVBQRVIuQ3lsaW5kZXJTaGFwZShyYWRpdXMsIGhlaWdodCwgZGlyKSBhcyBJQ3lsaW5kZXJTaGFwZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB3YXJuSUQoOTYxMik7XHJcbiAgICAgICAgICAgIHJldHVybiBFTlRJUkVfU0hBUEU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIENSRUFURV9DT0xMSURFUl9QUk9YWVtFQ29sbGlkZXJUeXBlLkNPTkVdID0gZnVuY3Rpb24gY3JlYXRlQ29uZVNoYXBlIChyYWRpdXMgPSAwLjUsIGhlaWdodCA9IDEsIGRpciA9IDEpOiBJQ29uZVNoYXBlIHtcclxuICAgICAgICBpZiAoUEhZU0lDU19DQU5OT04gfHwgUEhZU0lDU19BTU1PKSB7XHJcbiAgICAgICAgICAgIGlmIChERUJVRyAmJiBjaGVja1BoeXNpY3NNb2R1bGUoV1JBUFBFUi5Db25lU2hhcGUpKSB7IHJldHVybiBFTlRJUkVfU0hBUEU7IH1cclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBXUkFQUEVSLkNvbmVTaGFwZShyYWRpdXMsIGhlaWdodCwgZGlyKSBhcyBJQ29uZVNoYXBlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHdhcm5JRCg5NjEyKTtcclxuICAgICAgICAgICAgcmV0dXJuIEVOVElSRV9TSEFQRTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgQ1JFQVRFX0NPTExJREVSX1BST1hZW0VDb2xsaWRlclR5cGUuTUVTSF0gPSBmdW5jdGlvbiBjcmVhdGVUcmltZXNoU2hhcGUgKCk6IElUcmltZXNoU2hhcGUge1xyXG4gICAgICAgIGlmIChQSFlTSUNTX0NBTk5PTiB8fCBQSFlTSUNTX0FNTU8pIHtcclxuICAgICAgICAgICAgaWYgKERFQlVHICYmIGNoZWNrUGh5c2ljc01vZHVsZShXUkFQUEVSLlRyaW1lc2hTaGFwZSkpIHsgcmV0dXJuIEVOVElSRV9TSEFQRTsgfVxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFdSQVBQRVIuVHJpbWVzaFNoYXBlKCkgYXMgSVRyaW1lc2hTaGFwZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB3YXJuSUQoOTYxMSk7XHJcbiAgICAgICAgICAgIHJldHVybiBFTlRJUkVfU0hBUEU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIENSRUFURV9DT0xMSURFUl9QUk9YWVtFQ29sbGlkZXJUeXBlLlRFUlJBSU5dID0gZnVuY3Rpb24gY3JlYXRlVGVycmFpblNoYXBlICgpOiBJVGVycmFpblNoYXBlIHtcclxuICAgICAgICBpZiAoUEhZU0lDU19DQU5OT04gfHwgUEhZU0lDU19BTU1PKSB7XHJcbiAgICAgICAgICAgIGlmIChERUJVRyAmJiBjaGVja1BoeXNpY3NNb2R1bGUoV1JBUFBFUi5UZXJyYWluU2hhcGUpKSB7IHJldHVybiBFTlRJUkVfU0hBUEU7IH1cclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBXUkFQUEVSLlRlcnJhaW5TaGFwZSgpIGFzIElUZXJyYWluU2hhcGU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgd2FybihcIltQaHlzaWNzXTogYnVpbHRpbiBwaHlzaWNzIHN5c3RlbSBkb2Vzbid0IHN1cHBvcnQgY3lsaW5kZXIgY29sbGlkZXJcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBFTlRJUkVfU0hBUEU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIENSRUFURV9DT0xMSURFUl9QUk9YWVtFQ29sbGlkZXJUeXBlLlNJTVBMRVhdID0gZnVuY3Rpb24gY3JlYXRlU2ltcGxleFNoYXBlICgpOiBJU2ltcGxleFNoYXBlIHtcclxuICAgICAgICBpZiAoUEhZU0lDU19DQU5OT04gfHwgUEhZU0lDU19BTU1PKSB7XHJcbiAgICAgICAgICAgIGlmIChERUJVRyAmJiBjaGVja1BoeXNpY3NNb2R1bGUoV1JBUFBFUi5TaW1wbGV4U2hhcGUpKSB7IHJldHVybiBFTlRJUkVfU0hBUEU7IH1cclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBXUkFQUEVSLlNpbXBsZXhTaGFwZSgpIGFzIElTaW1wbGV4U2hhcGU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgd2FybihcIltQaHlzaWNzXTogYnVpbHRpbiBwaHlzaWNzIHN5c3RlbSBkb2Vzbid0IHN1cHBvcnQgc2ltcGxlIGNvbGxpZGVyXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gRU5USVJFX1NIQVBFO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBDUkVBVEVfQ09MTElERVJfUFJPWFlbRUNvbGxpZGVyVHlwZS5QTEFORV0gPSBmdW5jdGlvbiBjcmVhdGVQbGFuZVNoYXBlICgpOiBJUGxhbmVTaGFwZSB7XHJcbiAgICAgICAgaWYgKFBIWVNJQ1NfQ0FOTk9OIHx8IFBIWVNJQ1NfQU1NTykge1xyXG4gICAgICAgICAgICBpZiAoREVCVUcgJiYgY2hlY2tQaHlzaWNzTW9kdWxlKFdSQVBQRVIuUGxhbmVTaGFwZSkpIHsgcmV0dXJuIEVOVElSRV9TSEFQRTsgfVxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFdSQVBQRVIuUGxhbmVTaGFwZSgpIGFzIElQbGFuZVNoYXBlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHdhcm4oXCJbUGh5c2ljc106IGJ1aWx0aW4gcGh5c2ljcyBzeXN0ZW0gZG9lc24ndCBzdXBwb3J0IHBsYW5lIGNvbGxpZGVyXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gRU5USVJFX1NIQVBFO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLy8vIENSRUFURSBDT05TVFJBSU5UIC8vL1xyXG5cclxuY29uc3QgQ1JFQVRFX0NPTlNUUkFJTlRfUFJPWFkgPSB7IElOSVRFRDogZmFsc2UgfTtcclxuXHJcbmludGVyZmFjZSBJRW50aXJlQ29uc3RyYWludCBleHRlbmRzIElQb2ludFRvUG9pbnRDb25zdHJhaW50LCBJSGluZ2VDb25zdHJhaW50LCBJQ29uZVR3aXN0Q29uc3RyYWludCB7IH1cclxuY29uc3QgRU5USVJFX0NPTlNUUkFJTlQ6IElFbnRpcmVDb25zdHJhaW50ID0ge1xyXG4gICAgJ2ltcGwnOiBudWxsLFxyXG4gICAgJ2luaXRpYWxpemUnOiBGVU5DLFxyXG4gICAgJ29uTG9hZCc6IEZVTkMsXHJcbiAgICAnb25FbmFibGUnOiBGVU5DLFxyXG4gICAgJ29uRGlzYWJsZSc6IEZVTkMsXHJcbiAgICAnb25EZXN0cm95JzogRlVOQyxcclxuICAgICdzZXRFbmFibGVDb2xsaXNpb24nOiBGVU5DLFxyXG4gICAgJ3NldENvbm5lY3RlZEJvZHknOiBGVU5DLFxyXG4gICAgJ3NldFBpdm90QSc6IEZVTkMsXHJcbiAgICAnc2V0UGl2b3RCJzogRlVOQyxcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbnN0cmFpbnQgKHR5cGU6IEVDb25zdHJhaW50VHlwZSk6IElCYXNlQ29uc3RyYWludCB7XHJcbiAgICBpbml0Q29uc3RyYWludFByb3h5KCk7XHJcbiAgICByZXR1cm4gQ1JFQVRFX0NPTlNUUkFJTlRfUFJPWFlbdHlwZV0oKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaW5pdENvbnN0cmFpbnRQcm94eSAoKSB7XHJcbiAgICBpZiAoQ1JFQVRFX0NPTlNUUkFJTlRfUFJPWFkuSU5JVEVEKSByZXR1cm47XHJcbiAgICBDUkVBVEVfQ09OU1RSQUlOVF9QUk9YWS5JTklURUQgPSB0cnVlO1xyXG5cclxuICAgIGNvbnN0IFBIWVNJQ1NfQlVJTFRJTiA9IGxlZ2FjeUNDLl9nbG9iYWxbJ0NDX1BIWVNJQ1NfQlVJTFRJTiddO1xyXG4gICAgY29uc3QgUEhZU0lDU19DQU5OT04gPSBsZWdhY3lDQy5fZ2xvYmFsWydDQ19QSFlTSUNTX0NBTk5PTiddO1xyXG4gICAgY29uc3QgUEhZU0lDU19BTU1PID0gbGVnYWN5Q0MuX2dsb2JhbFsnQ0NfUEhZU0lDU19BTU1PJ107XHJcblxyXG4gICAgQ1JFQVRFX0NPTlNUUkFJTlRfUFJPWFlbRUNvbnN0cmFpbnRUeXBlLlBPSU5UX1RPX1BPSU5UXSA9IGZ1bmN0aW9uIGNyZWF0ZVBvaW50VG9Qb2ludENvbnN0cmFpbnQgKCk6IElQb2ludFRvUG9pbnRDb25zdHJhaW50IHtcclxuICAgICAgICBpZiAoUEhZU0lDU19DQU5OT04gfHwgUEhZU0lDU19BTU1PKSB7XHJcbiAgICAgICAgICAgIGlmIChERUJVRyAmJiBjaGVja1BoeXNpY3NNb2R1bGUoV1JBUFBFUi5Qb2ludFRvUG9pbnRDb25zdHJhaW50KSkgeyByZXR1cm4gRU5USVJFX0NPTlNUUkFJTlQ7IH1cclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBXUkFQUEVSLlBvaW50VG9Qb2ludENvbnN0cmFpbnQoKSBhcyBJUG9pbnRUb1BvaW50Q29uc3RyYWludDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB3YXJuKFwiW1BoeXNpY3NdOiBidWlsdGluIHBoeXNpY3Mgc3lzdGVtIGRvZXNuJ3Qgc3VwcG9ydCBwb2ludCB0byBwb2ludCBjb25zdHJhaW50XCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gRU5USVJFX0NPTlNUUkFJTlQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIENSRUFURV9DT05TVFJBSU5UX1BST1hZW0VDb25zdHJhaW50VHlwZS5ISU5HRV0gPSBmdW5jdGlvbiBjcmVhdGVIaW5nZUNvbnN0cmFpbnQgKCk6IElIaW5nZUNvbnN0cmFpbnQge1xyXG4gICAgICAgIGlmIChQSFlTSUNTX0NBTk5PTiB8fCBQSFlTSUNTX0FNTU8pIHtcclxuICAgICAgICAgICAgaWYgKERFQlVHICYmIGNoZWNrUGh5c2ljc01vZHVsZShXUkFQUEVSLkhpbmdlQ29uc3RyYWludCkpIHsgcmV0dXJuIEVOVElSRV9DT05TVFJBSU5UOyB9XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgV1JBUFBFUi5IaW5nZUNvbnN0cmFpbnQoKSBhcyBJSGluZ2VDb25zdHJhaW50O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHdhcm4oXCJbUGh5c2ljc106IGJ1aWx0aW4gcGh5c2ljcyBzeXN0ZW0gZG9lc24ndCBzdXBwb3J0IGhpbmdlIGNvbnN0cmFpbnRcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBFTlRJUkVfQ09OU1RSQUlOVDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgQ1JFQVRFX0NPTlNUUkFJTlRfUFJPWFlbRUNvbnN0cmFpbnRUeXBlLkNPTkVfVFdJU1RdID0gZnVuY3Rpb24gY3JlYXRlQ29uZVR3aXN0Q29uc3RyYWludCAoKTogSUNvbmVUd2lzdENvbnN0cmFpbnQge1xyXG4gICAgICAgIGlmIChQSFlTSUNTX0NBTk5PTiB8fCBQSFlTSUNTX0FNTU8pIHtcclxuICAgICAgICAgICAgaWYgKERFQlVHICYmIGNoZWNrUGh5c2ljc01vZHVsZShXUkFQUEVSLkNvbmVUd2lzdENvbnN0cmFpbnQpKSB7IHJldHVybiBudWxsIGFzIGFueTsgfVxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFdSQVBQRVIuQ29uZVR3aXN0Q29uc3RyYWludCgpIGFzIElDb25lVHdpc3RDb25zdHJhaW50O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHdhcm4oXCJbUGh5c2ljc106IGJ1aWx0aW4gcGh5c2ljcyBzeXN0ZW0gZG9lc24ndCBzdXBwb3J0IGNvbmUgdHdpc3QgY29uc3RyYWludFwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIEVOVElSRV9DT05TVFJBSU5UO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=