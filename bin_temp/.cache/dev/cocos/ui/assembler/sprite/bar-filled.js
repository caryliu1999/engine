(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../../core/math/index.js", "../../components/index.js", "../utils.js", "../../../core/platform/debug.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../../core/math/index.js"), require("../../components/index.js"), require("../utils.js"), require("../../../core/platform/debug.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.index, global.utils, global.debug);
    global.barFilled = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _index2, _utils, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.barFilled = void 0;

  function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  var FillType = _index2.Sprite.FillType;
  var matrix = new _index.Mat4();
  /**
   * barFilled 组装器
   * 可通过 `UI.barFilled` 获取该组装器。
   */

  var barFilled = {
    useModel: false,
    updateRenderData: function updateRenderData(sprite) {
      var frame = sprite.spriteFrame; // TODO: Material API design and export from editor could affect the material activation process
      // need to update the logic here
      // if (frame) {
      //     if (!frame._original && dynamicAtlasManager) {
      //         dynamicAtlasManager.insertSpriteFrame(frame);
      //     }
      //     if (sprite._material._texture !== frame._texture) {
      //         sprite._activateMaterial();
      //     }
      // }

      var renderData = sprite.renderData;

      if (renderData && frame) {
        var uvDirty = renderData.uvDirty;
        var vertDirty = renderData.vertDirty;

        if (!uvDirty && !vertDirty) {
          return;
        }

        var fillStart = sprite.fillStart;
        var fillRange = sprite.fillRange;

        if (fillRange < 0) {
          fillStart += fillRange;
          fillRange = -fillRange;
        }

        fillRange = fillStart + fillRange;
        fillStart = fillStart > 1.0 ? 1.0 : fillStart;
        fillStart = fillStart < 0.0 ? 0.0 : fillStart;
        fillRange = fillRange > 1.0 ? 1.0 : fillRange;
        fillRange = fillRange < 0.0 ? 0.0 : fillRange;
        fillRange = fillRange - fillStart;
        fillRange = fillRange < 0 ? 0 : fillRange;
        var fillEnd = fillStart + fillRange;
        fillEnd = fillEnd > 1 ? 1 : fillEnd;

        if (uvDirty) {
          this.updateUVs(sprite, fillStart, fillEnd);
        }

        if (vertDirty) {
          if (this.updateVertexData) {
            this.updateVertexData(sprite, fillStart, fillEnd);
          }

          this.updateWorldVertexData(sprite);
        }
      }
    },
    updateUVs: function updateUVs(sprite, fillStart, fillEnd) {
      var spriteFrame = sprite.spriteFrame;
      var renderData = sprite.renderData;
      var dataList = renderData.data; // build uvs

      var atlasWidth = spriteFrame.width;
      var atlasHeight = spriteFrame.height;
      var textureRect = spriteFrame.getRect(); // uv computation should take spriteSheet into account.

      var ul = 0;
      var vb = 0;
      var ur = 0;
      var vt = 0;
      var quadUV0 = 0;
      var quadUV1 = 0;
      var quadUV2 = 0;
      var quadUV3 = 0;
      var quadUV4 = 0;
      var quadUV5 = 0;
      var quadUV6 = 0;
      var quadUV7 = 0;

      if (spriteFrame.isRotated()) {
        ul = textureRect.x / atlasWidth;
        vb = (textureRect.y + textureRect.width) / atlasHeight;
        ur = (textureRect.x + textureRect.height) / atlasWidth;
        vt = textureRect.y / atlasHeight;
        quadUV0 = quadUV2 = ul;
        quadUV4 = quadUV6 = ur;
        quadUV3 = quadUV7 = vb;
        quadUV1 = quadUV5 = vt;
      } else {
        ul = textureRect.x / atlasWidth;
        vb = (textureRect.y + textureRect.height) / atlasHeight;
        ur = (textureRect.x + textureRect.width) / atlasWidth;
        vt = textureRect.y / atlasHeight;
        quadUV0 = quadUV4 = ul;
        quadUV2 = quadUV6 = ur;
        quadUV1 = quadUV3 = vb;
        quadUV5 = quadUV7 = vt;
      }

      switch (sprite.fillType) {
        case FillType.HORIZONTAL:
          dataList[0].u = quadUV0 + (quadUV2 - quadUV0) * fillStart;
          dataList[0].v = quadUV1 + (quadUV3 - quadUV1) * fillStart;
          dataList[1].u = quadUV0 + (quadUV2 - quadUV0) * fillEnd;
          dataList[1].v = quadUV1 + (quadUV3 - quadUV1) * fillEnd;
          dataList[2].u = quadUV4 + (quadUV6 - quadUV4) * fillStart;
          dataList[2].v = quadUV5 + (quadUV7 - quadUV5) * fillStart;
          dataList[3].u = quadUV4 + (quadUV6 - quadUV4) * fillEnd;
          dataList[3].v = quadUV5 + (quadUV7 - quadUV5) * fillEnd;
          break;

        case FillType.VERTICAL:
          dataList[0].u = quadUV0 + (quadUV4 - quadUV0) * fillStart;
          dataList[0].v = quadUV1 + (quadUV5 - quadUV1) * fillStart;
          dataList[1].u = quadUV2 + (quadUV6 - quadUV2) * fillStart;
          dataList[1].v = quadUV3 + (quadUV7 - quadUV3) * fillStart;
          dataList[2].u = quadUV0 + (quadUV4 - quadUV0) * fillEnd;
          dataList[2].v = quadUV1 + (quadUV5 - quadUV1) * fillEnd;
          dataList[3].u = quadUV2 + (quadUV6 - quadUV2) * fillEnd;
          dataList[3].v = quadUV3 + (quadUV7 - quadUV3) * fillEnd;
          break;

        default:
          (0, _debug.errorID)(2626);
          break;
      }

      renderData.uvDirty = false;
    },
    updateVertexData: function updateVertexData(sprite, fillStart, fillEnd) {
      var renderData = sprite.renderData;
      var dataList = renderData.data;
      var uiTrans = sprite.node._uiProps.uiTransformComp;
      var width = uiTrans.width;
      var height = uiTrans.height;
      var appX = uiTrans.anchorX * width;
      var appY = uiTrans.anchorY * height;
      var l = -appX;
      var b = -appY;
      var r = width - appX;
      var t = height - appY;
      var progressStart = 0;
      var progressEnd = 0;

      switch (sprite.fillType) {
        case FillType.HORIZONTAL:
          progressStart = l + (r - l) * fillStart;
          progressEnd = l + (r - l) * fillEnd;
          l = progressStart;
          r = progressEnd;
          break;

        case FillType.VERTICAL:
          progressStart = b + (t - b) * fillStart;
          progressEnd = b + (t - b) * fillEnd;
          b = progressStart;
          t = progressEnd;
          break;

        default:
          (0, _debug.errorID)(2626);
          break;
      }

      dataList[4].x = l;
      dataList[4].y = b;
      dataList[5].x = r;
      dataList[5].y = b;
      dataList[6].x = l;
      dataList[6].y = t;
      dataList[7].x = r;
      dataList[7].y = t;
      renderData.vertDirty = false;
    },
    createData: function createData(sprite) {
      var renderData = sprite.requestRenderData(); // 0-4 for world vertex
      // 5-8 for local vertex

      renderData.dataLength = 8;
      renderData.vertexCount = 4;
      renderData.indicesCount = 6;
      var dataList = renderData.data;

      var _iterator = _createForOfIteratorHelper(dataList),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var data = _step.value;
          data.z = 0;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return renderData;
    },
    updateWorldVertexData: function updateWorldVertexData(sprite) {
      var node = sprite.node;
      var dataList = sprite.renderData.data;
      node.getWorldMatrix(matrix);

      for (var i = 0; i < 4; i++) {
        var local = dataList[i + 4];
        var world = dataList[i];

        _index.Vec3.transformMat4(world, local, matrix);
      }
    },
    fillBuffers: function fillBuffers(sprite, renderer) {
      if (sprite.node.hasChangedFlags) {
        this.updateWorldVertexData(sprite);
      }

      var node = sprite.node;
      (0, _utils.fillVerticesWithoutCalc3D)(node, renderer, sprite.renderData, sprite.color);
    }
  };
  _exports.barFilled = barFilled;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImU6L2QwMDQ1MjUyMC9HaXRodWIvZW5naW5lL2NvY29zL3VpL2Fzc2VtYmxlci9zcHJpdGUvYmFyLWZpbGxlZC50cyJdLCJuYW1lcyI6WyJGaWxsVHlwZSIsIlNwcml0ZSIsIm1hdHJpeCIsIk1hdDQiLCJiYXJGaWxsZWQiLCJ1c2VNb2RlbCIsInVwZGF0ZVJlbmRlckRhdGEiLCJzcHJpdGUiLCJmcmFtZSIsInNwcml0ZUZyYW1lIiwicmVuZGVyRGF0YSIsInV2RGlydHkiLCJ2ZXJ0RGlydHkiLCJmaWxsU3RhcnQiLCJmaWxsUmFuZ2UiLCJmaWxsRW5kIiwidXBkYXRlVVZzIiwidXBkYXRlVmVydGV4RGF0YSIsInVwZGF0ZVdvcmxkVmVydGV4RGF0YSIsImRhdGFMaXN0IiwiZGF0YSIsImF0bGFzV2lkdGgiLCJ3aWR0aCIsImF0bGFzSGVpZ2h0IiwiaGVpZ2h0IiwidGV4dHVyZVJlY3QiLCJnZXRSZWN0IiwidWwiLCJ2YiIsInVyIiwidnQiLCJxdWFkVVYwIiwicXVhZFVWMSIsInF1YWRVVjIiLCJxdWFkVVYzIiwicXVhZFVWNCIsInF1YWRVVjUiLCJxdWFkVVY2IiwicXVhZFVWNyIsImlzUm90YXRlZCIsIngiLCJ5IiwiZmlsbFR5cGUiLCJIT1JJWk9OVEFMIiwidSIsInYiLCJWRVJUSUNBTCIsInVpVHJhbnMiLCJub2RlIiwiX3VpUHJvcHMiLCJ1aVRyYW5zZm9ybUNvbXAiLCJhcHBYIiwiYW5jaG9yWCIsImFwcFkiLCJhbmNob3JZIiwibCIsImIiLCJyIiwidCIsInByb2dyZXNzU3RhcnQiLCJwcm9ncmVzc0VuZCIsImNyZWF0ZURhdGEiLCJyZXF1ZXN0UmVuZGVyRGF0YSIsImRhdGFMZW5ndGgiLCJ2ZXJ0ZXhDb3VudCIsImluZGljZXNDb3VudCIsInoiLCJnZXRXb3JsZE1hdHJpeCIsImkiLCJsb2NhbCIsIndvcmxkIiwiVmVjMyIsInRyYW5zZm9ybU1hdDQiLCJmaWxsQnVmZmVycyIsInJlbmRlcmVyIiwiaGFzQ2hhbmdlZEZsYWdzIiwiY29sb3Ii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LENBQXRCOztBQUNBRyxvQkFBS0MsYUFBTCxDQUFtQkYsS0FBbkIsRUFBMEJELEtBQTFCLEVBQWlDbkUsTUFBakM7QUFDSDtBQUNKLEtBN01nQztBQStNakN1RSxJQUFBQSxXQS9NaUMsdUJBK01wQmxFLE1BL01vQixFQStNSm1FLFFBL01JLEVBK01VO0FBQ3ZDLFVBQUluRSxNQUFNLENBQUN5QyxJQUFQLENBQVkyQixlQUFoQixFQUFpQztBQUM3QixhQUFLekQscUJBQUwsQ0FBMkJYLE1BQTNCO0FBQ0g7O0FBRUQsVUFBTXlDLElBQUksR0FBR3pDLE1BQU0sQ0FBQ3lDLElBQXBCO0FBQ0EsNENBQTBCQSxJQUExQixFQUFnQzBCLFFBQWhDLEVBQTBDbkUsTUFBTSxDQUFDRyxVQUFqRCxFQUE4REgsTUFBTSxDQUFDcUUsS0FBckU7QUFDSDtBQXROZ0MsR0FBOUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXHJcblxyXG4gaHR0cHM6Ly93d3cuY29jb3MuY29tL1xyXG5cclxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcclxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZW5naW5lIHNvdXJjZSBjb2RlICh0aGUgXCJTb2Z0d2FyZVwiKSwgYSBsaW1pdGVkLFxyXG4gd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxyXG4gdG8gdXNlIENvY29zIENyZWF0b3Igc29sZWx5IHRvIGRldmVsb3AgZ2FtZXMgb24geW91ciB0YXJnZXQgcGxhdGZvcm1zLiBZb3Ugc2hhbGxcclxuIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcclxuIHVzZWQgZm9yIGRldmVsb3BpbmcgZ2FtZXMuIFlvdSBhcmUgbm90IGdyYW50ZWQgdG8gcHVibGlzaCwgZGlzdHJpYnV0ZSxcclxuIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiBDb2NvcyBDcmVhdG9yLlxyXG5cclxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXHJcbiBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC4gcmVzZXJ2ZXMgYWxsIHJpZ2h0cyBub3QgZXhwcmVzc2x5IGdyYW50ZWQgdG8geW91LlxyXG5cclxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcclxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxyXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXHJcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXHJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxyXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxyXG4gVEhFIFNPRlRXQVJFLlxyXG4qL1xyXG5cclxuLyoqXHJcbiAqIEBjYXRlZ29yeSB1aS1hc3NlbWJsZXJcclxuICovXHJcblxyXG5pbXBvcnQgeyBNYXQ0LCBWZWMzIH0gZnJvbSAnLi4vLi4vLi4vY29yZS9tYXRoJztcclxuaW1wb3J0IHsgSVJlbmRlckRhdGEsIFJlbmRlckRhdGEgfSBmcm9tICcuLi8uLi8uLi9jb3JlL3JlbmRlcmVyL3VpL3JlbmRlci1kYXRhJztcclxuaW1wb3J0IHsgVUkgfSBmcm9tICcuLi8uLi8uLi9jb3JlL3JlbmRlcmVyL3VpL3VpJztcclxuaW1wb3J0IHsgU3ByaXRlIH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cyc7XHJcbmltcG9ydCB7IElBc3NlbWJsZXIgfSBmcm9tICcuLi8uLi8uLi9jb3JlL3JlbmRlcmVyL3VpL2Jhc2UnO1xyXG5pbXBvcnQgeyBmaWxsVmVydGljZXNXaXRob3V0Q2FsYzNEIH0gZnJvbSAnLi4vdXRpbHMnO1xyXG5pbXBvcnQgeyBlcnJvcklEIH0gZnJvbSAnLi4vLi4vLi4vY29yZS9wbGF0Zm9ybS9kZWJ1Zyc7XHJcblxyXG5jb25zdCBGaWxsVHlwZSA9IFNwcml0ZS5GaWxsVHlwZTtcclxuY29uc3QgbWF0cml4ID0gbmV3IE1hdDQoKTtcclxuXHJcbi8qKlxyXG4gKiBiYXJGaWxsZWQg57uE6KOF5ZmoXHJcbiAqIOWPr+mAmui/hyBgVUkuYmFyRmlsbGVkYCDojrflj5bor6Xnu4Too4XlmajjgIJcclxuICovXHJcbmV4cG9ydCBjb25zdCBiYXJGaWxsZWQ6IElBc3NlbWJsZXIgPSB7XHJcbiAgICB1c2VNb2RlbDogZmFsc2UsXHJcbiAgICB1cGRhdGVSZW5kZXJEYXRhIChzcHJpdGU6IFNwcml0ZSkge1xyXG4gICAgICAgIGNvbnN0IGZyYW1lID0gc3ByaXRlLnNwcml0ZUZyYW1lO1xyXG5cclxuICAgICAgICAvLyBUT0RPOiBNYXRlcmlhbCBBUEkgZGVzaWduIGFuZCBleHBvcnQgZnJvbSBlZGl0b3IgY291bGQgYWZmZWN0IHRoZSBtYXRlcmlhbCBhY3RpdmF0aW9uIHByb2Nlc3NcclxuICAgICAgICAvLyBuZWVkIHRvIHVwZGF0ZSB0aGUgbG9naWMgaGVyZVxyXG4gICAgICAgIC8vIGlmIChmcmFtZSkge1xyXG4gICAgICAgIC8vICAgICBpZiAoIWZyYW1lLl9vcmlnaW5hbCAmJiBkeW5hbWljQXRsYXNNYW5hZ2VyKSB7XHJcbiAgICAgICAgLy8gICAgICAgICBkeW5hbWljQXRsYXNNYW5hZ2VyLmluc2VydFNwcml0ZUZyYW1lKGZyYW1lKTtcclxuICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgIC8vICAgICBpZiAoc3ByaXRlLl9tYXRlcmlhbC5fdGV4dHVyZSAhPT0gZnJhbWUuX3RleHR1cmUpIHtcclxuICAgICAgICAvLyAgICAgICAgIHNwcml0ZS5fYWN0aXZhdGVNYXRlcmlhbCgpO1xyXG4gICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICBjb25zdCByZW5kZXJEYXRhID0gc3ByaXRlLnJlbmRlckRhdGE7XHJcbiAgICAgICAgaWYgKHJlbmRlckRhdGEgJiYgZnJhbWUpIHtcclxuICAgICAgICAgICAgY29uc3QgdXZEaXJ0eSA9IHJlbmRlckRhdGEudXZEaXJ0eTtcclxuICAgICAgICAgICAgY29uc3QgdmVydERpcnR5ID0gcmVuZGVyRGF0YS52ZXJ0RGlydHk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXV2RGlydHkgJiYgIXZlcnREaXJ0eSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgZmlsbFN0YXJ0ID0gc3ByaXRlLmZpbGxTdGFydDtcclxuICAgICAgICAgICAgbGV0IGZpbGxSYW5nZSA9IHNwcml0ZS5maWxsUmFuZ2U7XHJcblxyXG4gICAgICAgICAgICBpZiAoZmlsbFJhbmdlIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgZmlsbFN0YXJ0ICs9IGZpbGxSYW5nZTtcclxuICAgICAgICAgICAgICAgIGZpbGxSYW5nZSA9IC1maWxsUmFuZ2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZpbGxSYW5nZSA9IGZpbGxTdGFydCArIGZpbGxSYW5nZTtcclxuXHJcbiAgICAgICAgICAgIGZpbGxTdGFydCA9IGZpbGxTdGFydCA+IDEuMCA/IDEuMCA6IGZpbGxTdGFydDtcclxuICAgICAgICAgICAgZmlsbFN0YXJ0ID0gZmlsbFN0YXJ0IDwgMC4wID8gMC4wIDogZmlsbFN0YXJ0O1xyXG5cclxuICAgICAgICAgICAgZmlsbFJhbmdlID0gZmlsbFJhbmdlID4gMS4wID8gMS4wIDogZmlsbFJhbmdlO1xyXG4gICAgICAgICAgICBmaWxsUmFuZ2UgPSBmaWxsUmFuZ2UgPCAwLjAgPyAwLjAgOiBmaWxsUmFuZ2U7XHJcbiAgICAgICAgICAgIGZpbGxSYW5nZSA9IGZpbGxSYW5nZSAtIGZpbGxTdGFydDtcclxuICAgICAgICAgICAgZmlsbFJhbmdlID0gZmlsbFJhbmdlIDwgMCA/IDAgOiBmaWxsUmFuZ2U7XHJcblxyXG4gICAgICAgICAgICBsZXQgZmlsbEVuZCA9IGZpbGxTdGFydCArIGZpbGxSYW5nZTtcclxuICAgICAgICAgICAgZmlsbEVuZCA9IGZpbGxFbmQgPiAxID8gMSA6IGZpbGxFbmQ7XHJcblxyXG4gICAgICAgICAgICBpZiAodXZEaXJ0eSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVVVnMhKHNwcml0ZSwgZmlsbFN0YXJ0LCBmaWxsRW5kKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodmVydERpcnR5KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy51cGRhdGVWZXJ0ZXhEYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVWZXJ0ZXhEYXRhKHNwcml0ZSwgZmlsbFN0YXJ0LCBmaWxsRW5kKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlV29ybGRWZXJ0ZXhEYXRhIShzcHJpdGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICB1cGRhdGVVVnMgKHNwcml0ZTogU3ByaXRlLCBmaWxsU3RhcnQ6IG51bWJlciwgZmlsbEVuZDogbnVtYmVyKSB7XHJcbiAgICAgICAgY29uc3Qgc3ByaXRlRnJhbWUgPSBzcHJpdGUuc3ByaXRlRnJhbWU7XHJcbiAgICAgICAgY29uc3QgcmVuZGVyRGF0YSA9IHNwcml0ZS5yZW5kZXJEYXRhO1xyXG4gICAgICAgIGNvbnN0IGRhdGFMaXN0ID0gcmVuZGVyRGF0YSEuZGF0YTtcclxuXHJcbiAgICAgICAgLy8gYnVpbGQgdXZzXHJcbiAgICAgICAgY29uc3QgYXRsYXNXaWR0aCA9IHNwcml0ZUZyYW1lIS53aWR0aDtcclxuICAgICAgICBjb25zdCBhdGxhc0hlaWdodCA9IHNwcml0ZUZyYW1lIS5oZWlnaHQ7XHJcbiAgICAgICAgY29uc3QgdGV4dHVyZVJlY3QgPSBzcHJpdGVGcmFtZSEuZ2V0UmVjdCgpO1xyXG4gICAgICAgIC8vIHV2IGNvbXB1dGF0aW9uIHNob3VsZCB0YWtlIHNwcml0ZVNoZWV0IGludG8gYWNjb3VudC5cclxuICAgICAgICBsZXQgdWwgPSAwO1xyXG4gICAgICAgIGxldCB2YiA9IDA7XHJcbiAgICAgICAgbGV0IHVyID0gMDtcclxuICAgICAgICBsZXQgdnQgPSAwO1xyXG4gICAgICAgIGxldCBxdWFkVVYwID0gMDtcclxuICAgICAgICBsZXQgcXVhZFVWMSA9IDA7XHJcbiAgICAgICAgbGV0IHF1YWRVVjIgPSAwO1xyXG4gICAgICAgIGxldCBxdWFkVVYzID0gMDtcclxuICAgICAgICBsZXQgcXVhZFVWNCA9IDA7XHJcbiAgICAgICAgbGV0IHF1YWRVVjUgPSAwO1xyXG4gICAgICAgIGxldCBxdWFkVVY2ID0gMDtcclxuICAgICAgICBsZXQgcXVhZFVWNyA9IDA7XHJcbiAgICAgICAgaWYgKHNwcml0ZUZyYW1lIS5pc1JvdGF0ZWQoKSkge1xyXG4gICAgICAgICAgICB1bCA9ICh0ZXh0dXJlUmVjdC54KSAvIGF0bGFzV2lkdGg7XHJcbiAgICAgICAgICAgIHZiID0gKHRleHR1cmVSZWN0LnkgKyB0ZXh0dXJlUmVjdC53aWR0aCkgLyBhdGxhc0hlaWdodDtcclxuICAgICAgICAgICAgdXIgPSAodGV4dHVyZVJlY3QueCArIHRleHR1cmVSZWN0LmhlaWdodCkgLyBhdGxhc1dpZHRoO1xyXG4gICAgICAgICAgICB2dCA9ICh0ZXh0dXJlUmVjdC55KSAvIGF0bGFzSGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgcXVhZFVWMCA9IHF1YWRVVjIgPSB1bDtcclxuICAgICAgICAgICAgcXVhZFVWNCA9IHF1YWRVVjYgPSB1cjtcclxuICAgICAgICAgICAgcXVhZFVWMyA9IHF1YWRVVjcgPSB2YjtcclxuICAgICAgICAgICAgcXVhZFVWMSA9IHF1YWRVVjUgPSB2dDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB1bCA9ICh0ZXh0dXJlUmVjdC54KSAvIGF0bGFzV2lkdGg7XHJcbiAgICAgICAgICAgIHZiID0gKHRleHR1cmVSZWN0LnkgKyB0ZXh0dXJlUmVjdC5oZWlnaHQpIC8gYXRsYXNIZWlnaHQ7XHJcbiAgICAgICAgICAgIHVyID0gKHRleHR1cmVSZWN0LnggKyB0ZXh0dXJlUmVjdC53aWR0aCkgLyBhdGxhc1dpZHRoO1xyXG4gICAgICAgICAgICB2dCA9ICh0ZXh0dXJlUmVjdC55KSAvIGF0bGFzSGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgcXVhZFVWMCA9IHF1YWRVVjQgPSB1bDtcclxuICAgICAgICAgICAgcXVhZFVWMiA9IHF1YWRVVjYgPSB1cjtcclxuICAgICAgICAgICAgcXVhZFVWMSA9IHF1YWRVVjMgPSB2YjtcclxuICAgICAgICAgICAgcXVhZFVWNSA9IHF1YWRVVjcgPSB2dDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN3aXRjaCAoc3ByaXRlLmZpbGxUeXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgRmlsbFR5cGUuSE9SSVpPTlRBTDpcclxuICAgICAgICAgICAgICAgIGRhdGFMaXN0WzBdLnUgPSBxdWFkVVYwICsgKHF1YWRVVjIgLSBxdWFkVVYwKSAqIGZpbGxTdGFydDtcclxuICAgICAgICAgICAgICAgIGRhdGFMaXN0WzBdLnYgPSBxdWFkVVYxICsgKHF1YWRVVjMgLSBxdWFkVVYxKSAqIGZpbGxTdGFydDtcclxuICAgICAgICAgICAgICAgIGRhdGFMaXN0WzFdLnUgPSBxdWFkVVYwICsgKHF1YWRVVjIgLSBxdWFkVVYwKSAqIGZpbGxFbmQ7XHJcbiAgICAgICAgICAgICAgICBkYXRhTGlzdFsxXS52ID0gcXVhZFVWMSArIChxdWFkVVYzIC0gcXVhZFVWMSkgKiBmaWxsRW5kO1xyXG4gICAgICAgICAgICAgICAgZGF0YUxpc3RbMl0udSA9IHF1YWRVVjQgKyAocXVhZFVWNiAtIHF1YWRVVjQpICogZmlsbFN0YXJ0O1xyXG4gICAgICAgICAgICAgICAgZGF0YUxpc3RbMl0udiA9IHF1YWRVVjUgKyAocXVhZFVWNyAtIHF1YWRVVjUpICogZmlsbFN0YXJ0O1xyXG4gICAgICAgICAgICAgICAgZGF0YUxpc3RbM10udSA9IHF1YWRVVjQgKyAocXVhZFVWNiAtIHF1YWRVVjQpICogZmlsbEVuZDtcclxuICAgICAgICAgICAgICAgIGRhdGFMaXN0WzNdLnYgPSBxdWFkVVY1ICsgKHF1YWRVVjcgLSBxdWFkVVY1KSAqIGZpbGxFbmQ7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBGaWxsVHlwZS5WRVJUSUNBTDpcclxuICAgICAgICAgICAgICAgIGRhdGFMaXN0WzBdLnUgPSBxdWFkVVYwICsgKHF1YWRVVjQgLSBxdWFkVVYwKSAqIGZpbGxTdGFydDtcclxuICAgICAgICAgICAgICAgIGRhdGFMaXN0WzBdLnYgPSBxdWFkVVYxICsgKHF1YWRVVjUgLSBxdWFkVVYxKSAqIGZpbGxTdGFydDtcclxuICAgICAgICAgICAgICAgIGRhdGFMaXN0WzFdLnUgPSBxdWFkVVYyICsgKHF1YWRVVjYgLSBxdWFkVVYyKSAqIGZpbGxTdGFydDtcclxuICAgICAgICAgICAgICAgIGRhdGFMaXN0WzFdLnYgPSBxdWFkVVYzICsgKHF1YWRVVjcgLSBxdWFkVVYzKSAqIGZpbGxTdGFydDtcclxuICAgICAgICAgICAgICAgIGRhdGFMaXN0WzJdLnUgPSBxdWFkVVYwICsgKHF1YWRVVjQgLSBxdWFkVVYwKSAqIGZpbGxFbmQ7XHJcbiAgICAgICAgICAgICAgICBkYXRhTGlzdFsyXS52ID0gcXVhZFVWMSArIChxdWFkVVY1IC0gcXVhZFVWMSkgKiBmaWxsRW5kO1xyXG4gICAgICAgICAgICAgICAgZGF0YUxpc3RbM10udSA9IHF1YWRVVjIgKyAocXVhZFVWNiAtIHF1YWRVVjIpICogZmlsbEVuZDtcclxuICAgICAgICAgICAgICAgIGRhdGFMaXN0WzNdLnYgPSBxdWFkVVYzICsgKHF1YWRVVjcgLSBxdWFkVVYzKSAqIGZpbGxFbmQ7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGVycm9ySUQoMjYyNik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJlbmRlckRhdGEhLnV2RGlydHkgPSBmYWxzZTtcclxuICAgIH0sXHJcblxyXG4gICAgdXBkYXRlVmVydGV4RGF0YSAoc3ByaXRlOiBTcHJpdGUsIGZpbGxTdGFydDogbnVtYmVyLCBmaWxsRW5kOiBudW1iZXIpIHtcclxuICAgICAgICBjb25zdCByZW5kZXJEYXRhOiBSZW5kZXJEYXRhfG51bGwgPSBzcHJpdGUucmVuZGVyRGF0YTtcclxuICAgICAgICBjb25zdCBkYXRhTGlzdDogSVJlbmRlckRhdGFbXSA9IHJlbmRlckRhdGEhLmRhdGE7XHJcbiAgICAgICAgY29uc3QgdWlUcmFucyA9IHNwcml0ZS5ub2RlLl91aVByb3BzLnVpVHJhbnNmb3JtQ29tcCE7XHJcbiAgICAgICAgY29uc3Qgd2lkdGggPSB1aVRyYW5zLndpZHRoO1xyXG4gICAgICAgIGNvbnN0IGhlaWdodCA9IHVpVHJhbnMuaGVpZ2h0O1xyXG4gICAgICAgIGNvbnN0IGFwcFggPSB1aVRyYW5zLmFuY2hvclggKiB3aWR0aDtcclxuICAgICAgICBjb25zdCBhcHBZID0gdWlUcmFucy5hbmNob3JZICogaGVpZ2h0O1xyXG5cclxuICAgICAgICBsZXQgbCA9IC1hcHBYO1xyXG4gICAgICAgIGxldCBiID0gLWFwcFk7XHJcbiAgICAgICAgbGV0IHIgPSB3aWR0aCAtIGFwcFg7XHJcbiAgICAgICAgbGV0IHQgPSBoZWlnaHQgLSBhcHBZO1xyXG5cclxuICAgICAgICBsZXQgcHJvZ3Jlc3NTdGFydCA9IDA7XHJcbiAgICAgICAgbGV0IHByb2dyZXNzRW5kID0gMDtcclxuICAgICAgICBzd2l0Y2ggKHNwcml0ZS5maWxsVHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIEZpbGxUeXBlLkhPUklaT05UQUw6XHJcbiAgICAgICAgICAgICAgICBwcm9ncmVzc1N0YXJ0ID0gbCArIChyIC0gbCkgKiBmaWxsU3RhcnQ7XHJcbiAgICAgICAgICAgICAgICBwcm9ncmVzc0VuZCA9IGwgKyAociAtIGwpICogZmlsbEVuZDtcclxuXHJcbiAgICAgICAgICAgICAgICBsID0gcHJvZ3Jlc3NTdGFydDtcclxuICAgICAgICAgICAgICAgIHIgPSBwcm9ncmVzc0VuZDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEZpbGxUeXBlLlZFUlRJQ0FMOlxyXG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3NTdGFydCA9IGIgKyAodCAtIGIpICogZmlsbFN0YXJ0O1xyXG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3NFbmQgPSBiICsgKHQgLSBiKSAqIGZpbGxFbmQ7XHJcblxyXG4gICAgICAgICAgICAgICAgYiA9IHByb2dyZXNzU3RhcnQ7XHJcbiAgICAgICAgICAgICAgICB0ID0gcHJvZ3Jlc3NFbmQ7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGVycm9ySUQoMjYyNik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGRhdGFMaXN0WzRdLnggPSBsO1xyXG4gICAgICAgIGRhdGFMaXN0WzRdLnkgPSBiO1xyXG4gICAgICAgIGRhdGFMaXN0WzVdLnggPSByO1xyXG4gICAgICAgIGRhdGFMaXN0WzVdLnkgPSBiO1xyXG4gICAgICAgIGRhdGFMaXN0WzZdLnggPSBsO1xyXG4gICAgICAgIGRhdGFMaXN0WzZdLnkgPSB0O1xyXG4gICAgICAgIGRhdGFMaXN0WzddLnggPSByO1xyXG4gICAgICAgIGRhdGFMaXN0WzddLnkgPSB0O1xyXG5cclxuICAgICAgICByZW5kZXJEYXRhIS52ZXJ0RGlydHkgPSBmYWxzZTtcclxuICAgIH0sXHJcblxyXG4gICAgY3JlYXRlRGF0YSAoc3ByaXRlOiBTcHJpdGUpIHtcclxuICAgICAgICBjb25zdCByZW5kZXJEYXRhOiBSZW5kZXJEYXRhfG51bGwgPSBzcHJpdGUucmVxdWVzdFJlbmRlckRhdGEoKTtcclxuICAgICAgICAvLyAwLTQgZm9yIHdvcmxkIHZlcnRleFxyXG4gICAgICAgIC8vIDUtOCBmb3IgbG9jYWwgdmVydGV4XHJcbiAgICAgICAgcmVuZGVyRGF0YSEuZGF0YUxlbmd0aCA9IDg7XHJcbiAgICAgICAgcmVuZGVyRGF0YSEudmVydGV4Q291bnQgPSA0O1xyXG4gICAgICAgIHJlbmRlckRhdGEhLmluZGljZXNDb3VudCA9IDY7XHJcblxyXG4gICAgICAgIGNvbnN0IGRhdGFMaXN0ID0gcmVuZGVyRGF0YSEuZGF0YTtcclxuICAgICAgICBmb3IgKGNvbnN0IGRhdGEgb2YgZGF0YUxpc3QpIHtcclxuICAgICAgICAgICAgZGF0YS56ID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZW5kZXJEYXRhIGFzIFJlbmRlckRhdGE7XHJcbiAgICB9LFxyXG5cclxuICAgIHVwZGF0ZVdvcmxkVmVydGV4RGF0YSAoc3ByaXRlOiBTcHJpdGUpIHtcclxuICAgICAgICBjb25zdCBub2RlID0gc3ByaXRlLm5vZGU7XHJcbiAgICAgICAgY29uc3QgZGF0YUxpc3QgPSBzcHJpdGUucmVuZGVyRGF0YSEuZGF0YTtcclxuXHJcbiAgICAgICAgbm9kZS5nZXRXb3JsZE1hdHJpeChtYXRyaXgpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsID0gZGF0YUxpc3RbaSArIDRdO1xyXG4gICAgICAgICAgICBjb25zdCB3b3JsZCA9IGRhdGFMaXN0W2ldO1xyXG4gICAgICAgICAgICBWZWMzLnRyYW5zZm9ybU1hdDQod29ybGQsIGxvY2FsLCBtYXRyaXgpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgZmlsbEJ1ZmZlcnMgKHNwcml0ZTogU3ByaXRlLCByZW5kZXJlcjogVUkpIHtcclxuICAgICAgICBpZiAoc3ByaXRlLm5vZGUuaGFzQ2hhbmdlZEZsYWdzKSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlV29ybGRWZXJ0ZXhEYXRhKHNwcml0ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBub2RlID0gc3ByaXRlLm5vZGU7XHJcbiAgICAgICAgZmlsbFZlcnRpY2VzV2l0aG91dENhbGMzRChub2RlLCByZW5kZXJlciwgc3ByaXRlLnJlbmRlckRhdGEhLCBzcHJpdGUuY29sb3IpO1xyXG4gICAgfSxcclxufTtcclxuIl19